// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package voting

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VotingABI is the input ABI used to generate the binding from.
const VotingABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_QUORUM_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"startDate\",\"type\":\"uint64\"},{\"name\":\"snapshotBlock\",\"type\":\"uint64\"},{\"name\":\"supportRequired\",\"type\":\"uint64\"},{\"name\":\"minAcceptQuorum\",\"type\":\"uint64\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"votingPower\",\"type\":\"uint256\"},{\"name\":\"script\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"changeMinAcceptQuorumPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_SUPPORT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"karma\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"changeSupportRequiredPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVoterWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_VOTES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_karma\",\"type\":\"address\"},{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptQuorumPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"},{\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_castVote\",\"type\":\"bool\"},{\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportRequiredPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supports\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"ChangeSupportRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"ChangeMinQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// VotingBin is the compiled bytecode used for deploying new contracts.
const VotingBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f764010000000002620038cb176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166200030264010000000002620047f7179091906401000000009004565b50565b600081549050919050565b8082555050565b61542780620003196000396000f3006080604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630803fac0146101d25780632914b9bd1461020157806332f0a3b5146102aa5780633c624c75146103015780634b12311c146103345780635a55c1f0146103a35780635eb24332146104e057806362de7e5a1461051757806374a8569b1461054a5780637c1d0b87146105a15780637e7db6e1146105d857806380afdea8146106335780638b3dd749146106665780639d4941d814610691578063a1658fad146106d4578063a479e50814610780578063af5d5c40146107d7578063bcf93dd614610802578063be2c64d414610841578063c0774df314610874578063cc63604a14610915578063cdb2867b1461095a578063d148f660146109bf578063d4aae0c414610a5e578063d5db2c8014610ab5578063d85c91ae14610b1c578063d948d46814610b73578063dc474b1a14610bdc578063de4796ed14610c1b578063de4f634714610c4a578063df133bca14610c75578063f4b0051314610cba578063f98a4eca14610d39578063fad167ab14610d66578063fc0c546a14610da5578063fc157cb414610dfc578063fd64eccb14610e3b575b600080fd5b3480156101de57600080fd5b506101e7610e6a565b604051808215151515815260200191505060405180910390f35b34801561020d57600080fd5b50610268600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610e95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b657600080fd5b506102bf610fb4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030d57600080fd5b50610316611061565b60405180826000191660001916815260200191505060405180910390f35b34801561034057600080fd5b5061037f60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061109a565b6040518082600281111561038f57fe5b60ff16815260200191505060405180910390f35b3480156103af57600080fd5b506103ce600480360381019080803590602001909291905050506111eb565b604051808b1515151581526020018a1515151581526020018967ffffffffffffffff1667ffffffffffffffff1681526020018867ffffffffffffffff1667ffffffffffffffff1681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561049c578082015181840152602081019050610481565b50505050905090810190601f1680156104c95780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b3480156104ec57600080fd5b50610515600480360381019080803567ffffffffffffffff169060200190929190505050611445565b005b34801561052357600080fd5b5061052c61171f565b60405180826000191660001916815260200191505060405180910390f35b34801561055657600080fd5b5061055f611758565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ad57600080fd5b506105d6600480360381019080803567ffffffffffffffff16906020019092919050505061177e565b005b3480156105e457600080fd5b50610619600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b56565b604051808215151515815260200191505060405180910390f35b34801561063f57600080fd5b50610648611b61565b60405180826000191660001916815260200191505060405180910390f35b34801561067257600080fd5b5061067b611b98565b6040518082815260200191505060405180910390f35b34801561069d57600080fd5b506106d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bcf565b005b3480156106e057600080fd5b50610766600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611fed565b604051808215151515815260200191505060405180910390f35b34801561078c57600080fd5b506107956121f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107e357600080fd5b506107ec61230f565b6040518082815260200191505060405180910390f35b34801561080e57600080fd5b5061081761249f565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561084d57600080fd5b506108566124b9565b60405180826000191660001916815260200191505060405180910390f35b34801561088057600080fd5b506108fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506124f2565b604051808215151515815260200191505060405180910390f35b34801561092157600080fd5b5061094060048036038101908080359060200190929190505050612543565b604051808215151515815260200191505060405180910390f35b34801561096657600080fd5b506109a560048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061276a565b604051808215151515815260200191505060405180910390f35b3480156109cb57600080fd5b50610a5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803567ffffffffffffffff16906020019092919050505061288e565b005b348015610a6a57600080fd5b50610a73612c78565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ac157600080fd5b50610b06600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050612caf565b6040518082815260200191505060405180910390f35b348015610b2857600080fd5b50610b5d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e7d565b6040518082815260200191505060405180910390f35b348015610b7f57600080fd5b50610bda600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061307d565b005b348015610be857600080fd5b50610bf1613187565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610c2757600080fd5b50610c306131a1565b604051808215151515815260200191505060405180910390f35b348015610c5657600080fd5b50610c5f6131d2565b6040518082815260200191505060405180910390f35b348015610c8157600080fd5b50610cb8600480360381019080803590602001909291908035151590602001909291908035151590602001909291905050506131d8565b005b348015610cc657600080fd5b50610d236004803603810190808035906020019082018035906020019190919293919293908035906020019082018035906020019190919293919293908035151590602001909291908035151590602001909291905050506133b8565b6040518082815260200191505060405180910390f35b348015610d4557600080fd5b50610d6460048036038101908080359060200190929190505050613587565b005b348015610d7257600080fd5b50610d7b613761565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610db157600080fd5b50610dba61377b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e0857600080fd5b50610e116137a0565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610e4757600080fd5b50610e506137ac565b604051808215151515815260200191505060405180910390f35b600080610e75611b98565b905060008114158015610e8f575080610e8c6137b5565b10155b91505090565b6000610e9f6121f4565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f26578082015181840152602081019050610f0b565b50505050905090810190601f168015610f535780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610f7257600080fd5b505af1158015610f86573d6000803e3d6000fd5b505050506040513d6020811015610f9c57600080fd5b81019080805190602001909291905050509050919050565b6000610fbe612c78565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561102157600080fd5b505af1158015611035573d6000803e3d6000fd5b505050506040513d602081101561104b57600080fd5b8101908080519060200190929190505050905090565b60405180807f4d4f444946595f51554f52554d5f524f4c4500000000000000000000000000008152506012019050604051809103902081565b60008260045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000815250901515611180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114557808201518184015260208101905061112a565b50505050905090810190601f1680156111725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003600085815260200190815260200160002060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000806000806000806000806000606060008b60045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f54450000000000000000000000000000000000008152509015156112e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112a657808201518184015260208101905061128b565b50505050905090810190601f1680156112d35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360008e81526020019081526020016000209150611300826137bd565b9b508160000160009054906101000a900460ff169a508160000160019054906101000a900467ffffffffffffffff1699508160000160099054906101000a900467ffffffffffffffff1698508160000160119054906101000a900467ffffffffffffffff1697508160010160009054906101000a900467ffffffffffffffff169650816002015495508160030154945081600401549350816005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561142f5780601f106114045761010080835404028352916020019161142f565b820191906000526020600020905b81548152906001019060200180831161141257829003601f168201915b5050505050925050509193959799509193959799565b60405180807f4d4f444946595f51554f52554d5f524f4c450000000000000000000000000000815250601201905060405180910390206114af8267ffffffffffffffff16600260009054906101000a900467ffffffffffffffff1667ffffffffffffffff16613849565b6114ba338383611fed565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515611598576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561155d578082015181840152602081019050611542565b50505050905090810190601f16801561158a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168367ffffffffffffffff1611156040805190810160405280601981526020017f564f54494e475f4348414e47455f51554f52554d5f50435453000000000000008152509015156116a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561166a57808201518184015260208101905061164f565b50505050905090810190601f1680156116975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082600260006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a5083604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390a1505050565b60405180807f4d4f444946595f535550504f52545f524f4c45000000000000000000000000008152506013019050604051809103902081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60405180807f4d4f444946595f535550504f52545f524f4c4500000000000000000000000000815250601301905060405180910390206117e88267ffffffffffffffff16600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16613849565b6117f3338383611fed565b6040805190810160405280600f81526020017f4150505f415554485f4641494c454400000000000000000000000000000000008152509015156118d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561189657808201518184015260208101905061187b565b50505050905090810190601f1680156118c35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508267ffffffffffffffff16600260009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611156040805190810160405280601a81526020017f564f54494e475f4348414e47455f535550504f52545f504354530000000000008152509015156119de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119a3578082015181840152602081019050611988565b50505050905090810190601f1680156119d05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50670de0b6b3a764000067ffffffffffffffff168367ffffffffffffffff16106040805190810160405280601a81526020017f564f54494e475f4348414e47455f535550505f544f4f5f424947000000000000815250901515611adc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611aa1578082015181840152602081019050611a86565b50505050905090810190601f168015611ace5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082600160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e83604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390a1505050565b600060019050919050565b6000611b937fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b600102600019166138c0565b905090565b6000611bca7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166138cb565b905090565b6000806000611bdd84611b56565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f5745440000000000000000000000000000815250901515611cbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c80578082015181840152602081019050611c65565b50505050905090810190601f168015611cad5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611cc4610fb4565b9250611ccf836138d6565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e5452414354000000000000815250901515611dad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d72578082015181840152602081019050611d57565b50505050905090810190601f168015611d9f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611e49573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611e43573d6000803e3d6000fd5b50611f82565b839050611e75308273ffffffffffffffffffffffffffffffffffffffff1661392890919063ffffffff16565b9150611ea283838373ffffffffffffffffffffffffffffffffffffffff16613b029092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c4544000000815250901515611f80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f45578082015181840152602081019050611f2a565b50505050905090810190601f168015611f725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008060606000611ffc610e6a565b151561200b57600093506121ea565b612013612c78565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561205357600093506121ea565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561215d578082015181840152602081019050612142565b50505050905090810190601f16801561218a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156121ac57600080fd5b505af11580156121c0573d6000803e3d6000fd5b505050506040513d60208110156121d657600080fd5b810190808051906020019092919050505093505b5050509392505050565b6000806121ff612c78565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b1580156122cb57600080fd5b505af11580156122df573d6000803e3d6000fd5b505050506040513d60208110156122f557600080fd5b810190808051906020019092919050505090508091505090565b600061249a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561239957600080fd5b505af11580156123ad573d6000803e3d6000fd5b505050506040513d60208110156123c357600080fd5b8101908080519060200190929190505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561245a57600080fd5b505af115801561246e573d6000803e3d6000fd5b505050506040513d602081101561248457600080fd5b8101908080519060200190929190505050613be2565b905090565b600260089054906101000a900467ffffffffffffffff1681565b60405180807f4352454154455f564f5445535f524f4c450000000000000000000000000000008152506011019050604051809103902081565b600061253b8360405180807f4352454154455f564f5445535f524f4c4500000000000000000000000000000081525060110190506040518091039020612536613bfb565b611fed565b905092915050565b60008060008360045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f544500000000000000000000000000000000000081525090151561262c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125f15780820151818401526020810190506125d6565b50505050905090810190601f16801561261e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506003600086815260200190815260200160002092508260000160009054906101000a900460ff16156126625760009350612762565b612697836002015484600401548560000160119054906101000a900467ffffffffffffffff1667ffffffffffffffff16613c00565b156126a55760019350612762565b6126c083600301548460020154613c5590919063ffffffff16565b91506126cb836137bd565b156126d95760009350612762565b61270a8360020154838560000160119054906101000a900467ffffffffffffffff1667ffffffffffffffff16613c00565b15156127195760009350612762565b61274e836002015484600401548560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16613c00565b151561275d5760009350612762565b600193505b505050919050565b6000808360045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000815250901515612851576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128165780820151818401526020810190506127fb565b50505050905090810190601f1680156128435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360008681526020019081526020016000209150612870826137bd565b80156128845750600061288285612e7d565b115b9250505092915050565b6000612898611b98565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515612977576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561293c578082015181840152602081019050612921565b50505050905090810190601f1680156129695780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612980613d4a565b8267ffffffffffffffff168267ffffffffffffffff1611156040805190810160405280601081526020017f564f54494e475f494e49545f5043545300000000000000000000000000000000815250901515612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a3b578082015181840152602081019050612a20565b50505050905090810190601f168015612a685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50670de0b6b3a764000067ffffffffffffffff168367ffffffffffffffff16106040805190810160405280601b81526020017f564f54494e475f494e49545f535550504f52545f544f4f5f4249470000000000815250901515612b74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b39578082015181840152602081019050612b1e565b50505050905090810190601f168015612b665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600260006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600260086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050565b6000612caa7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b60010260001916613e77565b905090565b600060405180807f4352454154455f564f5445535f524f4c4500000000000000000000000000000081525060110190506040518091039020612d2233826000604051908082528060200260200182016040528015612d1c5781602001602082028038833980820191505090505b50611fed565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612e00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dc5578082015181840152602081019050612daa565b50505050905090810190601f168015612df25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612e7286868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600180613e82565b915050949350505050565b60006130766000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612f3e57600080fd5b505af1158015612f52573d6000803e3d6000fd5b505050506040513d6020811015612f6857600080fd5b8101908080519060200190929190505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561303657600080fd5b505af115801561304a573d6000803e3d6000fd5b505050506040513d602081101561306057600080fd5b8101908080519060200190929190505050613be2565b9050919050565b61308733826124f2565b6040805190810160405280601681526020017f564f54494e475f43414e5f4e4f545f464f525741524400000000000000000000815250901515613165576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561312a57808201518184015260208101905061310f565b50505050905090810190601f1680156131575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613183816020604051908101604052806000815250600180613e82565b5050565b600260009054906101000a900467ffffffffffffffff1681565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6131cc611b98565b14905090565b60045481565b8260045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f54450000000000000000000000000000000000008152509015156132bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613281578082015181840152602081019050613266565b50505050905090810190601f1680156132ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506132c7843361276a565b6040805190810160405280601381526020017f564f54494e475f43414e5f4e4f545f564f5445000000000000000000000000008152509015156133a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561336a57808201518184015260208101905061334f565b50505050905090810190601f1680156133975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506133b284843385614190565b50505050565b600060405180807f4352454154455f564f5445535f524f4c450000000000000000000000000000008152506011019050604051809103902061342b338260006040519080825280602002602001820160405280156134255781602001602082028038833980820191505090505b50611fed565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515613509576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134ce5780820151818401526020810190506134b3565b50505050905090810190601f1680156134fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061357a88888080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505087878080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508686613e82565b9150509695505050505050565b8060045481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f544500000000000000000000000000000000000081525090151561366b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613630578082015181840152602081019050613615565b50505050905090810190601f16801561365d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061367582612543565b6040805190810160405280601681526020017f564f54494e475f43414e5f4e4f545f4558454355544500000000000000000000815250901515613753576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137185780820151818401526020810190506136fd565b50505050905090810190601f1680156137455780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061375d826143c7565b5050565b600160149054906101000a900467ffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b60006001905090565b600043905090565b600061380a600260089054906101000a900467ffffffffffffffff168360000160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1661453e90919063ffffffff16565b67ffffffffffffffff1661381c614647565b67ffffffffffffffff1610801561384257508160000160009054906101000a900460ff16155b9050919050565b6060600260405190808252806020026020018201604052801561387b5781602001602082028038833980820191505090505b5090508281600081518110151561388e57fe5b9060200190602002018181525050818160018151811015156138ac57fe5b906020019060200201818152505092915050565b600081549050919050565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156139175760009150613922565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509250613a12868461465e565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f524556455254454400000000815250901515613af5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613aba578082015181840152602081019050613a9f565b50505050905090810190601f168015613ae75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050613bd88582614693565b9150509392505050565b6000818310613bf15781613bf3565b825b905092915050565b606090565b6000806000841415613c155760009150613c4d565b83613c3b670de0b6b3a764000067ffffffffffffffff16876146e590919063ffffffff16565b811515613c4457fe5b04905082811191505b509392505050565b6000808284019050838110156040805190810160405280601181526020017f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000815250901515613d3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613d04578082015181840152602081019050613ce9565b50505050905090810190601f168015613d315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505092915050565b6000613d54611b98565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515613e33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613df8578082015181840152602081019050613ddd565b50505050905090810190601f168015613e255780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613e75613e3f6137b5565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166147f790919063ffffffff16565b565b600081549050919050565b6000806000806001613e926147fe565b039250613e9d61230f565b9150600082116040805190810160405280601681526020017f564f54494e475f4e4f5f564f54494e475f504f57455200000000000000000000815250901515613f81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f46578082015181840152602081019050613f2b565b50505050905090810190601f168015613f735780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060046000815480929190600101919050559350600360008581526020019081526020016000209050613fb2614647565b8160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550828160000160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600160149054906101000a900467ffffffffffffffff168160000160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600260009054906101000a900467ffffffffffffffff168160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160040181905550878160050190805190602001906140aa929190615356565b503373ffffffffffffffffffffffffffffffffffffffff16847f4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b9896040518080602001828103825283818151815260200191508051906020019080838360005b8381101561412557808201518184015260208101905061410a565b50505050905090810190601f1680156141525780820380516001836020036101000a031916815260200191505b509250505060405180910390a38580156141725750614171843361276a565b5b15614185576141848460013388614190565b5b505050949350505050565b60008060006003600088815260200190815260200160002092506141b385612e7d565b91508260060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506001600281111561421357fe5b81600281111561421f57fe5b14156142495761423c82846002015461481590919063ffffffff16565b8360020181905550614288565b60028081111561425557fe5b81600281111561426157fe5b14156142875761427e82846003015461481590919063ffffffff16565b83600301819055505b5b85156142b2576142a5828460020154613c5590919063ffffffff16565b83600201819055506142d2565b6142c9828460030154613c5590919063ffffffff16565b83600301819055505b856142de5760026142e1565b60015b8360060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561433d57fe5b02179055508473ffffffffffffffffffffffffffffffffffffffff16877fb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f888560405180831515151581526020018281526020019250505060405180910390a38380156143af57506143ae87612543565b5b156143be576143bd876143c7565b5b50505050505050565b6000606060036000848152602001908152602001600020915060018260000160006101000a81548160ff02191690831515021790555060006040519080825280601f01601f1916602001820160405280156144315781602001602082028038833980820191505090505b50905061450b826005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144cf5780601f106144a4576101008083540402835291602001916144cf565b820191906000526020600020905b8154815290600101906020018083116144b257829003601f168201915b50505050508260006040519080825280602002602001820160405280156145055781602001602082028038833980820191505090505b5061490a565b50827fbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab60405160405180910390a2505050565b60008082840190508367ffffffffffffffff168167ffffffffffffffff1610156040805190810160405280601381526020017f4d41544836345f4144445f4f564552464c4f570000000000000000000000000081525090151561463c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156146015780820151818401526020810190506145e6565b50505050905090810190601f16801561462e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505092915050565b6000614659614654615207565b61520f565b905090565b6000806000806040516020818751602089018a5afa9250600083111561468357805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af160008111156146d9573d600081146146c657602081146146cf576146d7565b600193506146d7565b600183511493505b505b50508091505092915050565b60008060008414156146fa57600091506147f0565b828402905082848281151561470b57fe5b04146040805190810160405280601181526020017f4d4154485f4d554c5f4f564552464c4f570000000000000000000000000000008152509015156147eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147b0578082015181840152602081019050614795565b50505050905090810190601f1680156147dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505b5092915050565b8082555050565b600061481061480b6137b5565b61520f565b905090565b600080838311156040805190810160405280601281526020017f4d4154485f5355425f554e444552464c4f5700000000000000000000000000008152509015156148fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148bf5780820151818401526020810190506148a4565b50505050905090810190601f1680156148ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390508091505092915050565b606060008060608061491a610e6a565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a45440000000000000000000000008152509015156149f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156149bd5780820151818401526020810190506149a2565b50505050905090810190601f1680156149ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080614a04612c78565b9150614a0e611b61565b9050614a198a610e95565b9550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000815250901515614b2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614aef578082015181840152602081019050614ad4565b50505050905090810190601f168015614b1c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff1663279cea3590507c0100000000000000000000000000000000000000000000000000000000029450848a8a8a60405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015614bb9578082015181840152602081019050614b9e565b50505050905090810190601f168015614be65780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015614c1f578082015181840152602081019050614c04565b50505050905090810190601f168015614c4c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b83811015614c88578082015181840152602081019050614c6d565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093508573ffffffffffffffffffffffffffffffffffffffff168460405180828051906020019080838360005b83811015614d3b578082015181840152602081019050614d20565b50505050905090810190601f168015614d685780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150506040805190810160405280601981526020017f45564d52554e5f455845435554494f4e5f524556455254454400000000000000815250901515614e59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614e1e578082015181840152602081019050614e03565b50505050905090810190601f168015614e4b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50614e62615326565b92508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015614ee7578082015181840152602081019050614ecc565b50505050905090810190601f168015614f145780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015614f4d578082015181840152602081019050614f32565b50505050905090810190601f168015614f7a5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015614fb3578082015181840152602081019050614f98565b50505050905090810190601f168015614fe05780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16615013612c78565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515615108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156150cd5780820151818401526020810190506150b2565b50505050905090810190601f1680156150fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060001916615116611b61565b60001916146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f444946494544008152509015156151f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156151be5780820151818401526020810190506151a3565b50505050905090810190601f1680156151eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050509392505050565b600042905090565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168211156040805190810160405280601581526020017f55494e5436345f4e554d4245525f544f4f5f424947000000000000000000000081525090151561531d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156152e25780820151818401526020810190506152c7565b50505050905090810190601f16801561530f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50819050919050565b60603d806000811461534d576040519250602082018301604052602082036020843e61534e565b5b505080905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061539757805160ff19168380011785556153c5565b828001600101855582156153c5579182015b828111156153c45782518255916020019190600101906153a9565b5b5090506153d291906153d6565b5090565b6153f891905b808211156153f45760008160009055506001016153dc565b5090565b905600a165627a7a72305820891eab2f2da69de7e6954b088ccd0bd1509584a04e3b92805032a08cf9f05f3b0029`

// DeployVoting deploys a new Ethereum contract, binding an instance of Voting to it.
func DeployVoting(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Voting, error) {
	parsed, err := abi.JSON(strings.NewReader(VotingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VotingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Voting{VotingCaller: VotingCaller{contract: contract}, VotingTransactor: VotingTransactor{contract: contract}, VotingFilterer: VotingFilterer{contract: contract}}, nil
}

// Voting is an auto generated Go binding around an Ethereum contract.
type Voting struct {
	VotingCaller     // Read-only binding to the contract
	VotingTransactor // Write-only binding to the contract
	VotingFilterer   // Log filterer for contract events
}

// VotingCaller is an auto generated read-only Go binding around an Ethereum contract.
type VotingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VotingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VotingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VotingSession struct {
	Contract     *Voting           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VotingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VotingCallerSession struct {
	Contract *VotingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VotingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VotingTransactorSession struct {
	Contract     *VotingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VotingRaw is an auto generated low-level Go binding around an Ethereum contract.
type VotingRaw struct {
	Contract *Voting // Generic contract binding to access the raw methods on
}

// VotingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VotingCallerRaw struct {
	Contract *VotingCaller // Generic read-only contract binding to access the raw methods on
}

// VotingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VotingTransactorRaw struct {
	Contract *VotingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVoting creates a new instance of Voting, bound to a specific deployed contract.
func NewVoting(address common.Address, backend bind.ContractBackend) (*Voting, error) {
	contract, err := bindVoting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Voting{VotingCaller: VotingCaller{contract: contract}, VotingTransactor: VotingTransactor{contract: contract}, VotingFilterer: VotingFilterer{contract: contract}}, nil
}

// NewVotingCaller creates a new read-only instance of Voting, bound to a specific deployed contract.
func NewVotingCaller(address common.Address, caller bind.ContractCaller) (*VotingCaller, error) {
	contract, err := bindVoting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VotingCaller{contract: contract}, nil
}

// NewVotingTransactor creates a new write-only instance of Voting, bound to a specific deployed contract.
func NewVotingTransactor(address common.Address, transactor bind.ContractTransactor) (*VotingTransactor, error) {
	contract, err := bindVoting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VotingTransactor{contract: contract}, nil
}

// NewVotingFilterer creates a new log filterer instance of Voting, bound to a specific deployed contract.
func NewVotingFilterer(address common.Address, filterer bind.ContractFilterer) (*VotingFilterer, error) {
	contract, err := bindVoting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VotingFilterer{contract: contract}, nil
}

// bindVoting binds a generic wrapper to an already deployed contract.
func bindVoting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VotingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Voting *VotingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Voting.Contract.VotingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Voting *VotingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Voting.Contract.VotingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Voting *VotingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Voting.Contract.VotingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Voting *VotingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Voting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Voting *VotingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Voting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Voting *VotingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Voting.Contract.contract.Transact(opts, method, params...)
}

// CREATEVOTESROLE is a free data retrieval call binding the contract method 0xbe2c64d4.
//
// Solidity: function CREATE_VOTES_ROLE() constant returns(bytes32)
func (_Voting *VotingCaller) CREATEVOTESROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "CREATE_VOTES_ROLE")
	return *ret0, err
}

// CREATEVOTESROLE is a free data retrieval call binding the contract method 0xbe2c64d4.
//
// Solidity: function CREATE_VOTES_ROLE() constant returns(bytes32)
func (_Voting *VotingSession) CREATEVOTESROLE() ([32]byte, error) {
	return _Voting.Contract.CREATEVOTESROLE(&_Voting.CallOpts)
}

// CREATEVOTESROLE is a free data retrieval call binding the contract method 0xbe2c64d4.
//
// Solidity: function CREATE_VOTES_ROLE() constant returns(bytes32)
func (_Voting *VotingCallerSession) CREATEVOTESROLE() ([32]byte, error) {
	return _Voting.Contract.CREATEVOTESROLE(&_Voting.CallOpts)
}

// MODIFYQUORUMROLE is a free data retrieval call binding the contract method 0x3c624c75.
//
// Solidity: function MODIFY_QUORUM_ROLE() constant returns(bytes32)
func (_Voting *VotingCaller) MODIFYQUORUMROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "MODIFY_QUORUM_ROLE")
	return *ret0, err
}

// MODIFYQUORUMROLE is a free data retrieval call binding the contract method 0x3c624c75.
//
// Solidity: function MODIFY_QUORUM_ROLE() constant returns(bytes32)
func (_Voting *VotingSession) MODIFYQUORUMROLE() ([32]byte, error) {
	return _Voting.Contract.MODIFYQUORUMROLE(&_Voting.CallOpts)
}

// MODIFYQUORUMROLE is a free data retrieval call binding the contract method 0x3c624c75.
//
// Solidity: function MODIFY_QUORUM_ROLE() constant returns(bytes32)
func (_Voting *VotingCallerSession) MODIFYQUORUMROLE() ([32]byte, error) {
	return _Voting.Contract.MODIFYQUORUMROLE(&_Voting.CallOpts)
}

// MODIFYSUPPORTROLE is a free data retrieval call binding the contract method 0x62de7e5a.
//
// Solidity: function MODIFY_SUPPORT_ROLE() constant returns(bytes32)
func (_Voting *VotingCaller) MODIFYSUPPORTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "MODIFY_SUPPORT_ROLE")
	return *ret0, err
}

// MODIFYSUPPORTROLE is a free data retrieval call binding the contract method 0x62de7e5a.
//
// Solidity: function MODIFY_SUPPORT_ROLE() constant returns(bytes32)
func (_Voting *VotingSession) MODIFYSUPPORTROLE() ([32]byte, error) {
	return _Voting.Contract.MODIFYSUPPORTROLE(&_Voting.CallOpts)
}

// MODIFYSUPPORTROLE is a free data retrieval call binding the contract method 0x62de7e5a.
//
// Solidity: function MODIFY_SUPPORT_ROLE() constant returns(bytes32)
func (_Voting *VotingCallerSession) MODIFYSUPPORTROLE() ([32]byte, error) {
	return _Voting.Contract.MODIFYSUPPORTROLE(&_Voting.CallOpts)
}

// PCTBASE is a free data retrieval call binding the contract method 0xfc157cb4.
//
// Solidity: function PCT_BASE() constant returns(uint64)
func (_Voting *VotingCaller) PCTBASE(opts *bind.CallOpts) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "PCT_BASE")
	return *ret0, err
}

// PCTBASE is a free data retrieval call binding the contract method 0xfc157cb4.
//
// Solidity: function PCT_BASE() constant returns(uint64)
func (_Voting *VotingSession) PCTBASE() (uint64, error) {
	return _Voting.Contract.PCTBASE(&_Voting.CallOpts)
}

// PCTBASE is a free data retrieval call binding the contract method 0xfc157cb4.
//
// Solidity: function PCT_BASE() constant returns(uint64)
func (_Voting *VotingCallerSession) PCTBASE() (uint64, error) {
	return _Voting.Contract.PCTBASE(&_Voting.CallOpts)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Voting *VotingCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Voting *VotingSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Voting.Contract.AllowRecoverability(&_Voting.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Voting *VotingCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Voting.Contract.AllowRecoverability(&_Voting.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Voting *VotingCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Voting *VotingSession) AppId() ([32]byte, error) {
	return _Voting.Contract.AppId(&_Voting.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Voting *VotingCallerSession) AppId() ([32]byte, error) {
	return _Voting.Contract.AppId(&_Voting.CallOpts)
}

// CanExecute is a free data retrieval call binding the contract method 0xcc63604a.
//
// Solidity: function canExecute(uint256 _voteId) constant returns(bool)
func (_Voting *VotingCaller) CanExecute(opts *bind.CallOpts, _voteId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "canExecute", _voteId)
	return *ret0, err
}

// CanExecute is a free data retrieval call binding the contract method 0xcc63604a.
//
// Solidity: function canExecute(uint256 _voteId) constant returns(bool)
func (_Voting *VotingSession) CanExecute(_voteId *big.Int) (bool, error) {
	return _Voting.Contract.CanExecute(&_Voting.CallOpts, _voteId)
}

// CanExecute is a free data retrieval call binding the contract method 0xcc63604a.
//
// Solidity: function canExecute(uint256 _voteId) constant returns(bool)
func (_Voting *VotingCallerSession) CanExecute(_voteId *big.Int) (bool, error) {
	return _Voting.Contract.CanExecute(&_Voting.CallOpts, _voteId)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Voting *VotingCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Voting *VotingSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Voting.Contract.CanForward(&_Voting.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Voting *VotingCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Voting.Contract.CanForward(&_Voting.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Voting *VotingCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Voting *VotingSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Voting.Contract.CanPerform(&_Voting.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Voting *VotingCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Voting.Contract.CanPerform(&_Voting.CallOpts, _sender, _role, _params)
}

// CanVote is a free data retrieval call binding the contract method 0xcdb2867b.
//
// Solidity: function canVote(uint256 _voteId, address _voter) constant returns(bool)
func (_Voting *VotingCaller) CanVote(opts *bind.CallOpts, _voteId *big.Int, _voter common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "canVote", _voteId, _voter)
	return *ret0, err
}

// CanVote is a free data retrieval call binding the contract method 0xcdb2867b.
//
// Solidity: function canVote(uint256 _voteId, address _voter) constant returns(bool)
func (_Voting *VotingSession) CanVote(_voteId *big.Int, _voter common.Address) (bool, error) {
	return _Voting.Contract.CanVote(&_Voting.CallOpts, _voteId, _voter)
}

// CanVote is a free data retrieval call binding the contract method 0xcdb2867b.
//
// Solidity: function canVote(uint256 _voteId, address _voter) constant returns(bool)
func (_Voting *VotingCallerSession) CanVote(_voteId *big.Int, _voter common.Address) (bool, error) {
	return _Voting.Contract.CanVote(&_Voting.CallOpts, _voteId, _voter)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Voting *VotingCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Voting *VotingSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Voting.Contract.GetEVMScriptExecutor(&_Voting.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Voting *VotingCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Voting.Contract.GetEVMScriptExecutor(&_Voting.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Voting *VotingCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Voting *VotingSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Voting.Contract.GetEVMScriptRegistry(&_Voting.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Voting *VotingCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Voting.Contract.GetEVMScriptRegistry(&_Voting.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Voting *VotingCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Voting *VotingSession) GetInitializationBlock() (*big.Int, error) {
	return _Voting.Contract.GetInitializationBlock(&_Voting.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Voting *VotingCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Voting.Contract.GetInitializationBlock(&_Voting.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Voting *VotingCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Voting *VotingSession) GetRecoveryVault() (common.Address, error) {
	return _Voting.Contract.GetRecoveryVault(&_Voting.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Voting *VotingCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Voting.Contract.GetRecoveryVault(&_Voting.CallOpts)
}

// GetTotalVoterWeight is a free data retrieval call binding the contract method 0xaf5d5c40.
//
// Solidity: function getTotalVoterWeight() constant returns(uint256)
func (_Voting *VotingCaller) GetTotalVoterWeight(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getTotalVoterWeight")
	return *ret0, err
}

// GetTotalVoterWeight is a free data retrieval call binding the contract method 0xaf5d5c40.
//
// Solidity: function getTotalVoterWeight() constant returns(uint256)
func (_Voting *VotingSession) GetTotalVoterWeight() (*big.Int, error) {
	return _Voting.Contract.GetTotalVoterWeight(&_Voting.CallOpts)
}

// GetTotalVoterWeight is a free data retrieval call binding the contract method 0xaf5d5c40.
//
// Solidity: function getTotalVoterWeight() constant returns(uint256)
func (_Voting *VotingCallerSession) GetTotalVoterWeight() (*big.Int, error) {
	return _Voting.Contract.GetTotalVoterWeight(&_Voting.CallOpts)
}

// GetVote is a free data retrieval call binding the contract method 0x5a55c1f0.
//
// Solidity: function getVote(uint256 _voteId) constant returns(bool open, bool executed, uint64 startDate, uint64 snapshotBlock, uint64 supportRequired, uint64 minAcceptQuorum, uint256 yea, uint256 nay, uint256 votingPower, bytes script)
func (_Voting *VotingCaller) GetVote(opts *bind.CallOpts, _voteId *big.Int) (struct {
	Open            bool
	Executed        bool
	StartDate       uint64
	SnapshotBlock   uint64
	SupportRequired uint64
	MinAcceptQuorum uint64
	Yea             *big.Int
	Nay             *big.Int
	VotingPower     *big.Int
	Script          []byte
}, error) {
	ret := new(struct {
		Open            bool
		Executed        bool
		StartDate       uint64
		SnapshotBlock   uint64
		SupportRequired uint64
		MinAcceptQuorum uint64
		Yea             *big.Int
		Nay             *big.Int
		VotingPower     *big.Int
		Script          []byte
	})
	out := ret
	err := _Voting.contract.Call(opts, out, "getVote", _voteId)
	return *ret, err
}

// GetVote is a free data retrieval call binding the contract method 0x5a55c1f0.
//
// Solidity: function getVote(uint256 _voteId) constant returns(bool open, bool executed, uint64 startDate, uint64 snapshotBlock, uint64 supportRequired, uint64 minAcceptQuorum, uint256 yea, uint256 nay, uint256 votingPower, bytes script)
func (_Voting *VotingSession) GetVote(_voteId *big.Int) (struct {
	Open            bool
	Executed        bool
	StartDate       uint64
	SnapshotBlock   uint64
	SupportRequired uint64
	MinAcceptQuorum uint64
	Yea             *big.Int
	Nay             *big.Int
	VotingPower     *big.Int
	Script          []byte
}, error) {
	return _Voting.Contract.GetVote(&_Voting.CallOpts, _voteId)
}

// GetVote is a free data retrieval call binding the contract method 0x5a55c1f0.
//
// Solidity: function getVote(uint256 _voteId) constant returns(bool open, bool executed, uint64 startDate, uint64 snapshotBlock, uint64 supportRequired, uint64 minAcceptQuorum, uint256 yea, uint256 nay, uint256 votingPower, bytes script)
func (_Voting *VotingCallerSession) GetVote(_voteId *big.Int) (struct {
	Open            bool
	Executed        bool
	StartDate       uint64
	SnapshotBlock   uint64
	SupportRequired uint64
	MinAcceptQuorum uint64
	Yea             *big.Int
	Nay             *big.Int
	VotingPower     *big.Int
	Script          []byte
}, error) {
	return _Voting.Contract.GetVote(&_Voting.CallOpts, _voteId)
}

// GetVoterState is a free data retrieval call binding the contract method 0x4b12311c.
//
// Solidity: function getVoterState(uint256 _voteId, address _voter) constant returns(uint8)
func (_Voting *VotingCaller) GetVoterState(opts *bind.CallOpts, _voteId *big.Int, _voter common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getVoterState", _voteId, _voter)
	return *ret0, err
}

// GetVoterState is a free data retrieval call binding the contract method 0x4b12311c.
//
// Solidity: function getVoterState(uint256 _voteId, address _voter) constant returns(uint8)
func (_Voting *VotingSession) GetVoterState(_voteId *big.Int, _voter common.Address) (uint8, error) {
	return _Voting.Contract.GetVoterState(&_Voting.CallOpts, _voteId, _voter)
}

// GetVoterState is a free data retrieval call binding the contract method 0x4b12311c.
//
// Solidity: function getVoterState(uint256 _voteId, address _voter) constant returns(uint8)
func (_Voting *VotingCallerSession) GetVoterState(_voteId *big.Int, _voter common.Address) (uint8, error) {
	return _Voting.Contract.GetVoterState(&_Voting.CallOpts, _voteId, _voter)
}

// GetVoterWeight is a free data retrieval call binding the contract method 0xd85c91ae.
//
// Solidity: function getVoterWeight(address _voter) constant returns(uint256)
func (_Voting *VotingCaller) GetVoterWeight(opts *bind.CallOpts, _voter common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "getVoterWeight", _voter)
	return *ret0, err
}

// GetVoterWeight is a free data retrieval call binding the contract method 0xd85c91ae.
//
// Solidity: function getVoterWeight(address _voter) constant returns(uint256)
func (_Voting *VotingSession) GetVoterWeight(_voter common.Address) (*big.Int, error) {
	return _Voting.Contract.GetVoterWeight(&_Voting.CallOpts, _voter)
}

// GetVoterWeight is a free data retrieval call binding the contract method 0xd85c91ae.
//
// Solidity: function getVoterWeight(address _voter) constant returns(uint256)
func (_Voting *VotingCallerSession) GetVoterWeight(_voter common.Address) (*big.Int, error) {
	return _Voting.Contract.GetVoterWeight(&_Voting.CallOpts, _voter)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Voting *VotingCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Voting *VotingSession) HasInitialized() (bool, error) {
	return _Voting.Contract.HasInitialized(&_Voting.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Voting *VotingCallerSession) HasInitialized() (bool, error) {
	return _Voting.Contract.HasInitialized(&_Voting.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Voting *VotingCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Voting *VotingSession) IsForwarder() (bool, error) {
	return _Voting.Contract.IsForwarder(&_Voting.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Voting *VotingCallerSession) IsForwarder() (bool, error) {
	return _Voting.Contract.IsForwarder(&_Voting.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Voting *VotingCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Voting *VotingSession) IsPetrified() (bool, error) {
	return _Voting.Contract.IsPetrified(&_Voting.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Voting *VotingCallerSession) IsPetrified() (bool, error) {
	return _Voting.Contract.IsPetrified(&_Voting.CallOpts)
}

// Karma is a free data retrieval call binding the contract method 0x74a8569b.
//
// Solidity: function karma() constant returns(address)
func (_Voting *VotingCaller) Karma(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "karma")
	return *ret0, err
}

// Karma is a free data retrieval call binding the contract method 0x74a8569b.
//
// Solidity: function karma() constant returns(address)
func (_Voting *VotingSession) Karma() (common.Address, error) {
	return _Voting.Contract.Karma(&_Voting.CallOpts)
}

// Karma is a free data retrieval call binding the contract method 0x74a8569b.
//
// Solidity: function karma() constant returns(address)
func (_Voting *VotingCallerSession) Karma() (common.Address, error) {
	return _Voting.Contract.Karma(&_Voting.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Voting *VotingCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Voting *VotingSession) Kernel() (common.Address, error) {
	return _Voting.Contract.Kernel(&_Voting.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Voting *VotingCallerSession) Kernel() (common.Address, error) {
	return _Voting.Contract.Kernel(&_Voting.CallOpts)
}

// MinAcceptQuorumPct is a free data retrieval call binding the contract method 0xdc474b1a.
//
// Solidity: function minAcceptQuorumPct() constant returns(uint64)
func (_Voting *VotingCaller) MinAcceptQuorumPct(opts *bind.CallOpts) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "minAcceptQuorumPct")
	return *ret0, err
}

// MinAcceptQuorumPct is a free data retrieval call binding the contract method 0xdc474b1a.
//
// Solidity: function minAcceptQuorumPct() constant returns(uint64)
func (_Voting *VotingSession) MinAcceptQuorumPct() (uint64, error) {
	return _Voting.Contract.MinAcceptQuorumPct(&_Voting.CallOpts)
}

// MinAcceptQuorumPct is a free data retrieval call binding the contract method 0xdc474b1a.
//
// Solidity: function minAcceptQuorumPct() constant returns(uint64)
func (_Voting *VotingCallerSession) MinAcceptQuorumPct() (uint64, error) {
	return _Voting.Contract.MinAcceptQuorumPct(&_Voting.CallOpts)
}

// SupportRequiredPct is a free data retrieval call binding the contract method 0xfad167ab.
//
// Solidity: function supportRequiredPct() constant returns(uint64)
func (_Voting *VotingCaller) SupportRequiredPct(opts *bind.CallOpts) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "supportRequiredPct")
	return *ret0, err
}

// SupportRequiredPct is a free data retrieval call binding the contract method 0xfad167ab.
//
// Solidity: function supportRequiredPct() constant returns(uint64)
func (_Voting *VotingSession) SupportRequiredPct() (uint64, error) {
	return _Voting.Contract.SupportRequiredPct(&_Voting.CallOpts)
}

// SupportRequiredPct is a free data retrieval call binding the contract method 0xfad167ab.
//
// Solidity: function supportRequiredPct() constant returns(uint64)
func (_Voting *VotingCallerSession) SupportRequiredPct() (uint64, error) {
	return _Voting.Contract.SupportRequiredPct(&_Voting.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Voting *VotingCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Voting *VotingSession) Token() (common.Address, error) {
	return _Voting.Contract.Token(&_Voting.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Voting *VotingCallerSession) Token() (common.Address, error) {
	return _Voting.Contract.Token(&_Voting.CallOpts)
}

// VoteTime is a free data retrieval call binding the contract method 0xbcf93dd6.
//
// Solidity: function voteTime() constant returns(uint64)
func (_Voting *VotingCaller) VoteTime(opts *bind.CallOpts) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "voteTime")
	return *ret0, err
}

// VoteTime is a free data retrieval call binding the contract method 0xbcf93dd6.
//
// Solidity: function voteTime() constant returns(uint64)
func (_Voting *VotingSession) VoteTime() (uint64, error) {
	return _Voting.Contract.VoteTime(&_Voting.CallOpts)
}

// VoteTime is a free data retrieval call binding the contract method 0xbcf93dd6.
//
// Solidity: function voteTime() constant returns(uint64)
func (_Voting *VotingCallerSession) VoteTime() (uint64, error) {
	return _Voting.Contract.VoteTime(&_Voting.CallOpts)
}

// VotesLength is a free data retrieval call binding the contract method 0xde4f6347.
//
// Solidity: function votesLength() constant returns(uint256)
func (_Voting *VotingCaller) VotesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Voting.contract.Call(opts, out, "votesLength")
	return *ret0, err
}

// VotesLength is a free data retrieval call binding the contract method 0xde4f6347.
//
// Solidity: function votesLength() constant returns(uint256)
func (_Voting *VotingSession) VotesLength() (*big.Int, error) {
	return _Voting.Contract.VotesLength(&_Voting.CallOpts)
}

// VotesLength is a free data retrieval call binding the contract method 0xde4f6347.
//
// Solidity: function votesLength() constant returns(uint256)
func (_Voting *VotingCallerSession) VotesLength() (*big.Int, error) {
	return _Voting.Contract.VotesLength(&_Voting.CallOpts)
}

// ChangeMinAcceptQuorumPct is a paid mutator transaction binding the contract method 0x5eb24332.
//
// Solidity: function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) returns()
func (_Voting *VotingTransactor) ChangeMinAcceptQuorumPct(opts *bind.TransactOpts, _minAcceptQuorumPct uint64) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "changeMinAcceptQuorumPct", _minAcceptQuorumPct)
}

// ChangeMinAcceptQuorumPct is a paid mutator transaction binding the contract method 0x5eb24332.
//
// Solidity: function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) returns()
func (_Voting *VotingSession) ChangeMinAcceptQuorumPct(_minAcceptQuorumPct uint64) (*types.Transaction, error) {
	return _Voting.Contract.ChangeMinAcceptQuorumPct(&_Voting.TransactOpts, _minAcceptQuorumPct)
}

// ChangeMinAcceptQuorumPct is a paid mutator transaction binding the contract method 0x5eb24332.
//
// Solidity: function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) returns()
func (_Voting *VotingTransactorSession) ChangeMinAcceptQuorumPct(_minAcceptQuorumPct uint64) (*types.Transaction, error) {
	return _Voting.Contract.ChangeMinAcceptQuorumPct(&_Voting.TransactOpts, _minAcceptQuorumPct)
}

// ChangeSupportRequiredPct is a paid mutator transaction binding the contract method 0x7c1d0b87.
//
// Solidity: function changeSupportRequiredPct(uint64 _supportRequiredPct) returns()
func (_Voting *VotingTransactor) ChangeSupportRequiredPct(opts *bind.TransactOpts, _supportRequiredPct uint64) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "changeSupportRequiredPct", _supportRequiredPct)
}

// ChangeSupportRequiredPct is a paid mutator transaction binding the contract method 0x7c1d0b87.
//
// Solidity: function changeSupportRequiredPct(uint64 _supportRequiredPct) returns()
func (_Voting *VotingSession) ChangeSupportRequiredPct(_supportRequiredPct uint64) (*types.Transaction, error) {
	return _Voting.Contract.ChangeSupportRequiredPct(&_Voting.TransactOpts, _supportRequiredPct)
}

// ChangeSupportRequiredPct is a paid mutator transaction binding the contract method 0x7c1d0b87.
//
// Solidity: function changeSupportRequiredPct(uint64 _supportRequiredPct) returns()
func (_Voting *VotingTransactorSession) ChangeSupportRequiredPct(_supportRequiredPct uint64) (*types.Transaction, error) {
	return _Voting.Contract.ChangeSupportRequiredPct(&_Voting.TransactOpts, _supportRequiredPct)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _voteId) returns()
func (_Voting *VotingTransactor) ExecuteVote(opts *bind.TransactOpts, _voteId *big.Int) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "executeVote", _voteId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _voteId) returns()
func (_Voting *VotingSession) ExecuteVote(_voteId *big.Int) (*types.Transaction, error) {
	return _Voting.Contract.ExecuteVote(&_Voting.TransactOpts, _voteId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _voteId) returns()
func (_Voting *VotingTransactorSession) ExecuteVote(_voteId *big.Int) (*types.Transaction, error) {
	return _Voting.Contract.ExecuteVote(&_Voting.TransactOpts, _voteId)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Voting *VotingTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Voting *VotingSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Voting.Contract.Forward(&_Voting.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Voting *VotingTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Voting.Contract.Forward(&_Voting.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0xd148f660.
//
// Solidity: function initialize(address _token, address _karma, uint64 _supportRequiredPct, uint64 _minAcceptQuorumPct, uint64 _voteTime) returns()
func (_Voting *VotingTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _karma common.Address, _supportRequiredPct uint64, _minAcceptQuorumPct uint64, _voteTime uint64) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "initialize", _token, _karma, _supportRequiredPct, _minAcceptQuorumPct, _voteTime)
}

// Initialize is a paid mutator transaction binding the contract method 0xd148f660.
//
// Solidity: function initialize(address _token, address _karma, uint64 _supportRequiredPct, uint64 _minAcceptQuorumPct, uint64 _voteTime) returns()
func (_Voting *VotingSession) Initialize(_token common.Address, _karma common.Address, _supportRequiredPct uint64, _minAcceptQuorumPct uint64, _voteTime uint64) (*types.Transaction, error) {
	return _Voting.Contract.Initialize(&_Voting.TransactOpts, _token, _karma, _supportRequiredPct, _minAcceptQuorumPct, _voteTime)
}

// Initialize is a paid mutator transaction binding the contract method 0xd148f660.
//
// Solidity: function initialize(address _token, address _karma, uint64 _supportRequiredPct, uint64 _minAcceptQuorumPct, uint64 _voteTime) returns()
func (_Voting *VotingTransactorSession) Initialize(_token common.Address, _karma common.Address, _supportRequiredPct uint64, _minAcceptQuorumPct uint64, _voteTime uint64) (*types.Transaction, error) {
	return _Voting.Contract.Initialize(&_Voting.TransactOpts, _token, _karma, _supportRequiredPct, _minAcceptQuorumPct, _voteTime)
}

// NewVote is a paid mutator transaction binding the contract method 0xf4b00513.
//
// Solidity: function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided) returns(uint256 voteId)
func (_Voting *VotingTransactor) NewVote(opts *bind.TransactOpts, _executionScript []byte, _metadata string, _castVote bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "newVote", _executionScript, _metadata, _castVote, _executesIfDecided)
}

// NewVote is a paid mutator transaction binding the contract method 0xf4b00513.
//
// Solidity: function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided) returns(uint256 voteId)
func (_Voting *VotingSession) NewVote(_executionScript []byte, _metadata string, _castVote bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.Contract.NewVote(&_Voting.TransactOpts, _executionScript, _metadata, _castVote, _executesIfDecided)
}

// NewVote is a paid mutator transaction binding the contract method 0xf4b00513.
//
// Solidity: function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided) returns(uint256 voteId)
func (_Voting *VotingTransactorSession) NewVote(_executionScript []byte, _metadata string, _castVote bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.Contract.NewVote(&_Voting.TransactOpts, _executionScript, _metadata, _castVote, _executesIfDecided)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Voting *VotingTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Voting *VotingSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Voting.Contract.TransferToVault(&_Voting.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Voting *VotingTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Voting.Contract.TransferToVault(&_Voting.TransactOpts, _token)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) returns()
func (_Voting *VotingTransactor) Vote(opts *bind.TransactOpts, _voteId *big.Int, _supports bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.contract.Transact(opts, "vote", _voteId, _supports, _executesIfDecided)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) returns()
func (_Voting *VotingSession) Vote(_voteId *big.Int, _supports bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.Contract.Vote(&_Voting.TransactOpts, _voteId, _supports, _executesIfDecided)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) returns()
func (_Voting *VotingTransactorSession) Vote(_voteId *big.Int, _supports bool, _executesIfDecided bool) (*types.Transaction, error) {
	return _Voting.Contract.Vote(&_Voting.TransactOpts, _voteId, _supports, _executesIfDecided)
}

// VotingCastVoteIterator is returned from FilterCastVote and is used to iterate over the raw logs and unpacked data for CastVote events raised by the Voting contract.
type VotingCastVoteIterator struct {
	Event *VotingCastVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingCastVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingCastVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingCastVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingCastVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingCastVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingCastVote represents a CastVote event raised by the Voting contract.
type VotingCastVote struct {
	VoteId   *big.Int
	Voter    common.Address
	Supports bool
	Stake    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCastVote is a free log retrieval operation binding the contract event 0xb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f.
//
// Solidity: event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake)
func (_Voting *VotingFilterer) FilterCastVote(opts *bind.FilterOpts, voteId []*big.Int, voter []common.Address) (*VotingCastVoteIterator, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Voting.contract.FilterLogs(opts, "CastVote", voteIdRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &VotingCastVoteIterator{contract: _Voting.contract, event: "CastVote", logs: logs, sub: sub}, nil
}

// WatchCastVote is a free log subscription operation binding the contract event 0xb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f.
//
// Solidity: event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake)
func (_Voting *VotingFilterer) WatchCastVote(opts *bind.WatchOpts, sink chan<- *VotingCastVote, voteId []*big.Int, voter []common.Address) (event.Subscription, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Voting.contract.WatchLogs(opts, "CastVote", voteIdRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingCastVote)
				if err := _Voting.contract.UnpackLog(event, "CastVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingChangeMinQuorumIterator is returned from FilterChangeMinQuorum and is used to iterate over the raw logs and unpacked data for ChangeMinQuorum events raised by the Voting contract.
type VotingChangeMinQuorumIterator struct {
	Event *VotingChangeMinQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingChangeMinQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingChangeMinQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingChangeMinQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingChangeMinQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingChangeMinQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingChangeMinQuorum represents a ChangeMinQuorum event raised by the Voting contract.
type VotingChangeMinQuorum struct {
	MinAcceptQuorumPct uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangeMinQuorum is a free log retrieval operation binding the contract event 0x3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a50.
//
// Solidity: event ChangeMinQuorum(uint64 minAcceptQuorumPct)
func (_Voting *VotingFilterer) FilterChangeMinQuorum(opts *bind.FilterOpts) (*VotingChangeMinQuorumIterator, error) {

	logs, sub, err := _Voting.contract.FilterLogs(opts, "ChangeMinQuorum")
	if err != nil {
		return nil, err
	}
	return &VotingChangeMinQuorumIterator{contract: _Voting.contract, event: "ChangeMinQuorum", logs: logs, sub: sub}, nil
}

// WatchChangeMinQuorum is a free log subscription operation binding the contract event 0x3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a50.
//
// Solidity: event ChangeMinQuorum(uint64 minAcceptQuorumPct)
func (_Voting *VotingFilterer) WatchChangeMinQuorum(opts *bind.WatchOpts, sink chan<- *VotingChangeMinQuorum) (event.Subscription, error) {

	logs, sub, err := _Voting.contract.WatchLogs(opts, "ChangeMinQuorum")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingChangeMinQuorum)
				if err := _Voting.contract.UnpackLog(event, "ChangeMinQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingChangeSupportRequiredIterator is returned from FilterChangeSupportRequired and is used to iterate over the raw logs and unpacked data for ChangeSupportRequired events raised by the Voting contract.
type VotingChangeSupportRequiredIterator struct {
	Event *VotingChangeSupportRequired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingChangeSupportRequiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingChangeSupportRequired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingChangeSupportRequired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingChangeSupportRequiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingChangeSupportRequiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingChangeSupportRequired represents a ChangeSupportRequired event raised by the Voting contract.
type VotingChangeSupportRequired struct {
	SupportRequiredPct uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangeSupportRequired is a free log retrieval operation binding the contract event 0x903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e.
//
// Solidity: event ChangeSupportRequired(uint64 supportRequiredPct)
func (_Voting *VotingFilterer) FilterChangeSupportRequired(opts *bind.FilterOpts) (*VotingChangeSupportRequiredIterator, error) {

	logs, sub, err := _Voting.contract.FilterLogs(opts, "ChangeSupportRequired")
	if err != nil {
		return nil, err
	}
	return &VotingChangeSupportRequiredIterator{contract: _Voting.contract, event: "ChangeSupportRequired", logs: logs, sub: sub}, nil
}

// WatchChangeSupportRequired is a free log subscription operation binding the contract event 0x903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e.
//
// Solidity: event ChangeSupportRequired(uint64 supportRequiredPct)
func (_Voting *VotingFilterer) WatchChangeSupportRequired(opts *bind.WatchOpts, sink chan<- *VotingChangeSupportRequired) (event.Subscription, error) {

	logs, sub, err := _Voting.contract.WatchLogs(opts, "ChangeSupportRequired")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingChangeSupportRequired)
				if err := _Voting.contract.UnpackLog(event, "ChangeSupportRequired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingExecuteVoteIterator is returned from FilterExecuteVote and is used to iterate over the raw logs and unpacked data for ExecuteVote events raised by the Voting contract.
type VotingExecuteVoteIterator struct {
	Event *VotingExecuteVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingExecuteVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingExecuteVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingExecuteVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingExecuteVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingExecuteVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingExecuteVote represents a ExecuteVote event raised by the Voting contract.
type VotingExecuteVote struct {
	VoteId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExecuteVote is a free log retrieval operation binding the contract event 0xbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab.
//
// Solidity: event ExecuteVote(uint256 indexed voteId)
func (_Voting *VotingFilterer) FilterExecuteVote(opts *bind.FilterOpts, voteId []*big.Int) (*VotingExecuteVoteIterator, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _Voting.contract.FilterLogs(opts, "ExecuteVote", voteIdRule)
	if err != nil {
		return nil, err
	}
	return &VotingExecuteVoteIterator{contract: _Voting.contract, event: "ExecuteVote", logs: logs, sub: sub}, nil
}

// WatchExecuteVote is a free log subscription operation binding the contract event 0xbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab.
//
// Solidity: event ExecuteVote(uint256 indexed voteId)
func (_Voting *VotingFilterer) WatchExecuteVote(opts *bind.WatchOpts, sink chan<- *VotingExecuteVote, voteId []*big.Int) (event.Subscription, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}

	logs, sub, err := _Voting.contract.WatchLogs(opts, "ExecuteVote", voteIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingExecuteVote)
				if err := _Voting.contract.UnpackLog(event, "ExecuteVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Voting contract.
type VotingRecoverToVaultIterator struct {
	Event *VotingRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingRecoverToVault represents a RecoverToVault event raised by the Voting contract.
type VotingRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Voting *VotingFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*VotingRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Voting.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &VotingRecoverToVaultIterator{contract: _Voting.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Voting *VotingFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *VotingRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Voting.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingRecoverToVault)
				if err := _Voting.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Voting contract.
type VotingScriptResultIterator struct {
	Event *VotingScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingScriptResult represents a ScriptResult event raised by the Voting contract.
type VotingScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Voting *VotingFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*VotingScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Voting.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &VotingScriptResultIterator{contract: _Voting.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Voting *VotingFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *VotingScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Voting.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingScriptResult)
				if err := _Voting.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingStartVoteIterator is returned from FilterStartVote and is used to iterate over the raw logs and unpacked data for StartVote events raised by the Voting contract.
type VotingStartVoteIterator struct {
	Event *VotingStartVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingStartVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingStartVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingStartVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingStartVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingStartVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingStartVote represents a StartVote event raised by the Voting contract.
type VotingStartVote struct {
	VoteId   *big.Int
	Creator  common.Address
	Metadata string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStartVote is a free log retrieval operation binding the contract event 0x4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b9.
//
// Solidity: event StartVote(uint256 indexed voteId, address indexed creator, string metadata)
func (_Voting *VotingFilterer) FilterStartVote(opts *bind.FilterOpts, voteId []*big.Int, creator []common.Address) (*VotingStartVoteIterator, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _Voting.contract.FilterLogs(opts, "StartVote", voteIdRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return &VotingStartVoteIterator{contract: _Voting.contract, event: "StartVote", logs: logs, sub: sub}, nil
}

// WatchStartVote is a free log subscription operation binding the contract event 0x4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b9.
//
// Solidity: event StartVote(uint256 indexed voteId, address indexed creator, string metadata)
func (_Voting *VotingFilterer) WatchStartVote(opts *bind.WatchOpts, sink chan<- *VotingStartVote, voteId []*big.Int, creator []common.Address) (event.Subscription, error) {

	var voteIdRule []interface{}
	for _, voteIdItem := range voteId {
		voteIdRule = append(voteIdRule, voteIdItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _Voting.contract.WatchLogs(opts, "StartVote", voteIdRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingStartVote)
				if err := _Voting.contract.UnpackLog(event, "StartVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
