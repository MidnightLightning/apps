// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenmanager

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TokenmanagerABI is the input ABI used to generate the binding from.
const TokenmanagerABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"everHeld\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VESTINGS_PER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vested\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"}],\"name\":\"assignVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"getVesting\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISSUE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingsLengths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSIGN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_transferable\",\"type\":\"bool\"},{\"name\":\"_maxAccountTokens\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAccountTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REVOKE_VESTINGS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"revokeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonVestedAmount\",\"type\":\"uint256\"}],\"name\":\"RevokeVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// TokenmanagerBin is the compiled bytecode used for deploying new contracts.
const TokenmanagerBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f764010000000002620046b2176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166200030264010000000002620056d5179091906401000000009004565b50565b600081549050919050565b8082555050565b61571080620003196000396000f3006080604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f413d1146101d25780630803fac01461022d5780630db3971b1461025c5780630f8f8b831461028757806321cb18cd146102de5780632914b9bd1461038757806332f0a3b5146104305780633e05a36d1461048757806340c10f19146105445780634a3931491461059157806372f8393c146106165780637e7db6e11461067757806380afdea8146106d2578063856222f1146107055780638b3dd7491461073857806397f2562a146107635780639d4941d8146107ba5780639dc29fac146107fd578063a1658fad1461084a578063a479e508146108f6578063a51d9a8e1461094d578063b930908f14610980578063be760488146109b3578063c0774df314610a00578063cc872b6614610aa1578063d4aae0c414610ace578063d948d46814610b25578063da682aeb14610b8e578063de4796ed14610c13578063e37ff29f14610c42578063e9a9c85014610c9b578063ecfda43214610cce578063edc168f114610cf9578063f48c305414610d2c578063fa6799f214610d7a578063fc0c546a14610dc7578063fd64eccb14610e1e575b600080fd5b3480156101de57600080fd5b50610213600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4d565b604051808215151515815260200191505060405180910390f35b34801561023957600080fd5b50610242610e6d565b604051808215151515815260200191505060405180910390f35b34801561026857600080fd5b50610271610e98565b6040518082815260200191505060405180910390f35b34801561029357600080fd5b506102c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e9d565b6040518082815260200191505060405180910390f35b3480156102ea57600080fd5b50610371600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803567ffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803515159060200190929190505050610eb0565b6040518082815260200191505060405180910390f35b34801561039357600080fd5b506103ee600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611428565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043c57600080fd5b50610445611547565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049357600080fd5b506104d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f4565b604051808681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff168152602001821515151581526020019550505050505060405180910390f35b34801561055057600080fd5b5061058f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117eb565b005b34801561059d57600080fd5b506105fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a0e565b604051808215151515815260200191505060405180910390f35b34801561062257600080fd5b50610661600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cd5565b6040518082815260200191505060405180910390f35b34801561068357600080fd5b506106b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f46565b604051808215151515815260200191505060405180910390f35b3480156106de57600080fd5b506106e7611fa0565b60405180826000191660001916815260200191505060405180910390f35b34801561071157600080fd5b5061071a611fd7565b60405180826000191660001916815260200191505060405180910390f35b34801561074457600080fd5b5061074d612010565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612047565b6040518082815260200191505060405180910390f35b3480156107c657600080fd5b506107fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061205f565b005b34801561080957600080fd5b50610848600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061247d565b005b34801561085657600080fd5b506108dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506126ad565b604051808215151515815260200191505060405180910390f35b34801561090257600080fd5b5061090b6128b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095957600080fd5b506109626129cf565b60405180826000191660001916815260200191505060405180910390f35b34801561098c57600080fd5b50610995612a08565b60405180826000191660001916815260200191505060405180910390f35b3480156109bf57600080fd5b506109fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a41565b005b348015610a0c57600080fd5b50610a87600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612b7b565b604051808215151515815260200191505060405180910390f35b348015610aad57600080fd5b50610acc60048036038101908080359060200190929190505050612c8f565b005b348015610ada57600080fd5b50610ae3612dc7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b3157600080fd5b50610b8c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612dfe565b005b348015610b9a57600080fd5b50610bf9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612fd2565b604051808215151515815260200191505060405180910390f35b348015610c1f57600080fd5b50610c28612fdf565b604051808215151515815260200191505060405180910390f35b348015610c4e57600080fd5b50610c99600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919080359060200190929190505050613010565b005b348015610ca757600080fd5b50610cb06134a2565b60405180826000191660001916815260200191505060405180910390f35b348015610cda57600080fd5b50610ce36134db565b6040518082815260200191505060405180910390f35b348015610d0557600080fd5b50610d0e6134e1565b60405180826000191660001916815260200191505060405180910390f35b610d60600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061351a565b604051808215151515815260200191505060405180910390f35b348015610d8657600080fd5b50610dc5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613654565b005b348015610dd357600080fd5b50610ddc613da2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e2a57600080fd5b50610e33613dc7565b604051808215151515815260200191505060405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b600080610e78612010565b905060008114158015610e92575080610e8f613dd0565b10155b91505090565b603281565b6000610ea98242611cd5565b9050919050565b60008060405180807f41535349474e5f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020610ef38989613dd8565b610efe3383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515610fdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fa1578082015181840152602081019050610f86565b50505050905090810190601f168015610fce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506032600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106040805190810160405280601481526020017f544d5f544f4f5f4d414e595f56455354494e47530000000000000000000000008152509015156110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110c35780820151818401526020810190506110a8565b50505050905090810190601f1680156110f05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508667ffffffffffffffff168867ffffffffffffffff161115801561113757508567ffffffffffffffff168767ffffffffffffffff1611155b6040805190810160405280601381526020017f544d5f57524f4e475f434c4946465f4441544500000000000000000000000000815250901515611215576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111da5780820151818401526020810190506111bf565b50505050905090810190601f1680156112075780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055925060a0604051908101604052808a81526020018967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff168152602001861515815250600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160186101000a81548160ff0219169083151502179055509050506113c28a8a613e02565b8973ffffffffffffffffffffffffffffffffffffffff167f627ad26dcfe82ec79b33fda0ddd062f6fab9f4914acac8345f79090dfd86fb54848b604051808381526020018281526020019250505060405180910390a28293505050509695505050505050565b60006114326128b4565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114b957808201518184015260208101905061149e565b50505050905090810190601f1680156114e65780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050506040513d602081101561152f57600080fd5b81019080805190602001909291905050509050919050565b6000611551612dc7565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b505050506040513d60208110156115de57600080fd5b8101908080519060200190929190505050905090565b6000806000806000808787600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481106040805190810160405280600d81526020017f544d5f4e4f5f56455354494e470000000000000000000000000000000000000081525090151561171f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116e45780820151818401526020810190506116c9565b50505050905090810190601f1680156117115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000209250826000015497508260010160009054906101000a900467ffffffffffffffff1696508260010160089054906101000a900467ffffffffffffffff1695508260010160109054906101000a900467ffffffffffffffff1694508260010160189054906101000a900460ff1693505050509295509295909350565b60405180807f4d494e545f524f4c4500000000000000000000000000000000000000000000008152506009019050604051809103902061182b8383613dd8565b6118363383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515611914576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118d95780820151818401526020810190506118be565b50505050905090810190601f1680156119065780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061191f8484614101565b6040805190810160405280601b81526020017f544d5f4d494e545f42414c5f494e435f4e4f545f414c4c4f57454400000000008152509015156119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119c25780820151818401526020810190506119a7565b50505050905090810190601f1680156119ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611a088484614219565b50505050565b6000806000611a1b610e6d565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000815250901515611af9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611abe578082015181840152602081019050611aa3565b50505050905090810190601f168015611aeb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601881526020017f544d5f5452414e534645525f57524f4e475f53454e4445520000000000000000815250901515611c28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611bed578082015181840152602081019050611bd2565b50505050905090810190601f168015611c1a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b503073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611c8e57503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b9150811515611cc757611ca18585614101565b9050801580611cb8575083611cb68742611cd5565b105b15611cc65760009250611ccc565b5b600192505b50509392505050565b600080600080600080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054945060009350600092505b84831015611e3057600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000209150611e0c8260000154611d948961431d565b67ffffffffffffffff168460010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168560010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168660010160109054906101000a900467ffffffffffffffff1667ffffffffffffffff16614434565b9050611e2181856144bd90919063ffffffff16565b93508280600101935050611d29565b611f39846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ef057600080fd5b505af1158015611f04573d6000803e3d6000fd5b505050506040513d6020811015611f1a57600080fd5b81019080805190602001909291905050506145b290919063ffffffff16565b9550505050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000611fd27fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b600102600019166146a7565b905090565b60405180807f49535355455f524f4c4500000000000000000000000000000000000000000000815250600a019050604051809103902081565b60006120427febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166146b2565b905090565b60036020528060005260406000206000915090505481565b600080600061206d84611f46565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f574544000000000000000000000000000081525090151561214b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121105780820151818401526020810190506120f5565b50505050905090810190601f16801561213d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612154611547565b925061215f836146bd565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000081525090151561223d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122025780820151818401526020810190506121e7565b50505050905090810190601f16801561222f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156122d9573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156122d3573d6000803e3d6000fd5b50612412565b839050612305308273ffffffffffffffffffffffffffffffffffffffff1661470f90919063ffffffff16565b915061233283838373ffffffffffffffffffffffffffffffffffffffff166148e99092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c4544000000815250901515612410576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123d55780820151818401526020810190506123ba565b50505050905090810190601f1680156124025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60405180807f4255524e5f524f4c450000000000000000000000000000000000000000000000815250600901905060405180910390206124bd8383613dd8565b6124c83383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c454400000000000000000000000000000000008152509015156125a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561256b578082015181840152602081019050612550565b50505050905090810190601f1680156125985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3ce77fe85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561266b57600080fd5b505af115801561267f573d6000803e3d6000fd5b505050506040513d602081101561269557600080fd5b81019080805190602001909291905050505050505050565b600080606060006126bc610e6d565b15156126cb57600093506128aa565b6126d3612dc7565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561271357600093506128aa565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561281d578082015181840152602081019050612802565b50505050905090810190601f16801561284a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561286c57600080fd5b505af1158015612880573d6000803e3d6000fd5b505050506040513d602081101561289657600080fd5b810190808051906020019092919050505093505b5050509392505050565b6000806128bf612dc7565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b15801561298b57600080fd5b505af115801561299f573d6000803e3d6000fd5b505050506040513d60208110156129b557600080fd5b810190808051906020019092919050505090508091505090565b60405180807f41535349474e5f524f4c45000000000000000000000000000000000000000000815250600b019050604051809103902081565b60405180807f4255524e5f524f4c4500000000000000000000000000000000000000000000008152506009019050604051809103902081565b60405180807f41535349474e5f524f4c45000000000000000000000000000000000000000000815250600b0190506040518091039020612a818383613dd8565b612a8c3383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612b6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b2f578082015181840152602081019050612b14565b50505050905090810190601f168015612b5c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612b758484613e02565b50505050565b6000612b85610e6d565b8015612c87575060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050506040513d6020811015612c7457600080fd5b8101908080519060200190929190505050115b905092915050565b60405180807f49535355455f524f4c4500000000000000000000000000000000000000000000815250600a0190506040518091039020612cce826149c9565b612cd93383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612db7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d7c578082015181840152602081019050612d61565b50505050905090810190601f168015612da95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612dc23084614219565b505050565b6000612df97f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b60010260001916614a21565b905090565b606080612e0b3384612b7b565b6040805190810160405280601281526020017f544d5f43414e5f4e4f545f464f52574152440000000000000000000000000000815250901515612ee9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612eae578082015181840152602081019050612e93565b50505050905090810190601f168015612edb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006040519080825280601f01601f191660200182016040528015612f1e5781602001602082028038833980820191505090505b5091506001604051908082528060200260200182016040528015612f515781602001602082028038833980820191505090505b5090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181101515612f8557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612fcc838383614a2c565b50505050565b6000600190509392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61300a612010565b14905090565b600061301a612010565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156130f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156130be5780820151818401526020810190506130a3565b50505050905090810190601f1680156130eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613102615329565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663f77c47916040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561317d57600080fd5b505af1158015613191573d6000803e3d6000fd5b505050506040513d60208110156131a757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601381526020017f544d5f544f4b454e5f434f4e54524f4c4c4552000000000000000000000000008152509015156132ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613272578082015181840152602081019050613257565b50505050905090810190601f16801561329f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600081146132fc578061331e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6001819055508115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bef97c876040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156133ac57600080fd5b505af11580156133c0573d6000803e3d6000fd5b505050506040513d60208110156133d657600080fd5b8101908080519060200190929190505050151514151561349d576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41e60c5836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050600060405180830381600087803b15801561348457600080fd5b505af1158015613498573d6000803e3d6000fd5b505050505b505050565b60405180807f4d494e545f524f4c4500000000000000000000000000000000000000000000008152506009019050604051809103902081565b60015481565b60405180807f5245564f4b455f56455354494e47535f524f4c450000000000000000000000008152506014019050604051809103902081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601d81526020017f544d5f50524f58595f5041594d454e545f57524f4e475f53454e44455200000081525090151561364a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561360f5780820151818401526020810190506135f4565b50505050905090810190601f16801561363c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060009050919050565b60008060405180807f5245564f4b455f56455354494e47535f524f4c450000000000000000000000008152506014019050604051809103902061369685615456565b6136a13383836126ad565b6040805190810160405280600f81526020017f4150505f415554485f4641494c4544000000000000000000000000000000000081525090151561377f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613744578082015181840152602081019050613729565b50505050905090810190601f1680156137715780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508585600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481106040805190810160405280600d81526020017f544d5f4e4f5f56455354494e47000000000000000000000000000000000000008152509015156138a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561386757808201518184015260208101905061384c565b50505050905090810190601f1680156138945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002095508560010160189054906101000a900460ff166040805190810160405280601881526020017f544d5f56455354494e475f4e4f545f5245564f4b41424c4500000000000000008152509015156139e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139aa57808201518184015260208101905061398f565b50505050905090810190601f1680156139d75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613a6e86600001546139f661547e565b67ffffffffffffffff168860010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168960010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168a60010160109054906101000a900467ffffffffffffffff1667ffffffffffffffff16614434565b9450600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff02191690556001820160186101000a81549060ff021916905550506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8930886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015613c2857600080fd5b505af1158015613c3c573d6000803e3d6000fd5b505050506040513d6020811015613c5257600080fd5b81019080805190602001909291905050506040805190810160405280602081526020017f544d5f5245564f4b455f5452414e534645525f46524f4d5f5245564552544544815250901515613d41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613d06578082015181840152602081019050613ceb565b50505050905090810190601f168015613d335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508773ffffffffffffffffffffffffffffffffffffffff167fafc516b1509f836efdc27d64d966d14f82ef53f456f0de74c12ac8a651a084cc8887604051808381526020018281526020019250505060405180910390a25050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b600043905090565b6060613dfa8373ffffffffffffffffffffffffffffffffffffffff1683615495565b905092915050565b613e0c8282614101565b6040805190810160405280601d81526020017f544d5f41535349474e5f42414c5f494e435f4e4f545f414c4c4f574544000000815250901515613eea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613eaf578082015181840152602081019050613e94565b50505050905090810190601f168015613edc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015613fe357600080fd5b505af1158015613ff7573d6000803e3d6000fd5b505050506040513d602081101561400d57600080fd5b81019080805190602001909291905050506040805190810160405280602081526020017f544d5f41535349474e5f5452414e534645525f46524f4d5f52455645525445448152509015156140fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156140c15780820151818401526020810190506140a6565b50505050905090810190601f1680156140ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050565b600060015461420f836000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156141c657600080fd5b505af11580156141da573d6000803e3d6000fd5b505050506040513d60208110156141f057600080fd5b81019080805190602001909291905050506144bd90919063ffffffff16565b1115905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663827f32c083836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156142dd57600080fd5b505af11580156142f1573d6000803e3d6000fd5b505050506040513d602081101561430757600080fd5b8101908080519060200190929190505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168211156040805190810160405280601581526020017f55494e5436345f4e554d4245525f544f4f5f424947000000000000000000000081525090151561442b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156143f05780820151818401526020810190506143d5565b50505050905090810190601f16801561441d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50819050919050565b600080828610151561444957600091506144b3565b83861015614459578691506144b3565b61446c85846145b290919063ffffffff16565b61449161448287896145b290919063ffffffff16565b8961550c90919063ffffffff16565b81151561449a57fe5b0490506144b081886145b290919063ffffffff16565b91505b5095945050505050565b6000808284019050838110156040805190810160405280601181526020017f4d4154485f4144445f4f564552464c4f570000000000000000000000000000008152509015156145a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561456c578082015181840152602081019050614551565b50505050905090810190601f1680156145995780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505092915050565b600080838311156040805190810160405280601281526020017f4d4154485f5355425f554e444552464c4f570000000000000000000000000000815250901515614697576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561465c578082015181840152602081019050614641565b50505050905090810190601f1680156146895780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390508091505092915050565b600081549050919050565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156146fe5760009150614709565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505092506147f9868461561e565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f5245564552544544000000008152509015156148dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148a1578082015181840152602081019050614886565b50505050905090810190601f1680156148ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506149bf8582615653565b9150509392505050565b606060016040519080825280602002602001820160405280156149fb5781602001602082028038833980820191505090505b50905081816000815181101515614a0e57fe5b9060200190602002018181525050919050565b600081549050919050565b6060600080606080614a3c610e6d565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000815250901515614b1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614adf578082015181840152602081019050614ac4565b50505050905090810190601f168015614b0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080614b26612dc7565b9150614b30611fa0565b9050614b3b8a611428565b9550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000815250901515614c4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614c11578082015181840152602081019050614bf6565b50505050905090810190601f168015614c3e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff1663279cea3590507c0100000000000000000000000000000000000000000000000000000000029450848a8a8a60405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015614cdb578082015181840152602081019050614cc0565b50505050905090810190601f168015614d085780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015614d41578082015181840152602081019050614d26565b50505050905090810190601f168015614d6e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b83811015614daa578082015181840152602081019050614d8f565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093508573ffffffffffffffffffffffffffffffffffffffff168460405180828051906020019080838360005b83811015614e5d578082015181840152602081019050614e42565b50505050905090810190601f168015614e8a5780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150506040805190810160405280601981526020017f45564d52554e5f455845435554494f4e5f524556455254454400000000000000815250901515614f7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614f40578082015181840152602081019050614f25565b50505050905090810190601f168015614f6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50614f846156a5565b92508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015615009578082015181840152602081019050614fee565b50505050905090810190601f1680156150365780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561506f578082015181840152602081019050615054565b50505050905090810190601f16801561509c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156150d55780820151818401526020810190506150ba565b50505050905090810190601f1680156151025780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16615135612dc7565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f4449464945440081525090151561522a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156151ef5780820151818401526020810190506151d4565b50505050905090810190601f16801561521c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060001916615238611fa0565b60001916146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f4449464945440081525090151561531b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156152e05780820151818401526020810190506152c5565b50505050905090810190601f16801561530d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050509392505050565b6000615333612010565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515615412576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156153d75780820151818401526020810190506153bc565b50505050905090810190601f1680156154045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061545461541e613dd0565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166156d590919063ffffffff16565b565b60606154778273ffffffffffffffffffffffffffffffffffffffff166149c9565b9050919050565b600061549061548b6156dc565b61431d565b905090565b606060026040519080825280602002602001820160405280156154c75781602001602082028038833980820191505090505b509050828160008151811015156154da57fe5b9060200190602002018181525050818160018151811015156154f857fe5b906020019060200201818152505092915050565b60008060008414156155215760009150615617565b828402905082848281151561553257fe5b04146040805190810160405280601181526020017f4d4154485f4d554c5f4f564552464c4f57000000000000000000000000000000815250901515615612576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156155d75780820151818401526020810190506155bc565b50505050905090810190601f1680156156045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505b5092915050565b6000806000806040516020818751602089018a5afa9250600083111561564357805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af16000811115615699573d60008114615686576020811461568f57615697565b60019350615697565b600183511493505b505b50508091505092915050565b60603d80600081146156cc576040519250602082018301604052602082036020843e6156cd565b5b505080905090565b8082555050565b6000429050905600a165627a7a72305820d0033594c509d65dba3861781838fe3b53b53d574335bd83c56837fa78b5f0800029`

// DeployTokenmanager deploys a new Ethereum contract, binding an instance of Tokenmanager to it.
func DeployTokenmanager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Tokenmanager, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenmanagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenmanagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Tokenmanager{TokenmanagerCaller: TokenmanagerCaller{contract: contract}, TokenmanagerTransactor: TokenmanagerTransactor{contract: contract}, TokenmanagerFilterer: TokenmanagerFilterer{contract: contract}}, nil
}

// Tokenmanager is an auto generated Go binding around an Ethereum contract.
type Tokenmanager struct {
	TokenmanagerCaller     // Read-only binding to the contract
	TokenmanagerTransactor // Write-only binding to the contract
	TokenmanagerFilterer   // Log filterer for contract events
}

// TokenmanagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenmanagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenmanagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenmanagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenmanagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenmanagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenmanagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenmanagerSession struct {
	Contract     *Tokenmanager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenmanagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenmanagerCallerSession struct {
	Contract *TokenmanagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TokenmanagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenmanagerTransactorSession struct {
	Contract     *TokenmanagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenmanagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenmanagerRaw struct {
	Contract *Tokenmanager // Generic contract binding to access the raw methods on
}

// TokenmanagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenmanagerCallerRaw struct {
	Contract *TokenmanagerCaller // Generic read-only contract binding to access the raw methods on
}

// TokenmanagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenmanagerTransactorRaw struct {
	Contract *TokenmanagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenmanager creates a new instance of Tokenmanager, bound to a specific deployed contract.
func NewTokenmanager(address common.Address, backend bind.ContractBackend) (*Tokenmanager, error) {
	contract, err := bindTokenmanager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Tokenmanager{TokenmanagerCaller: TokenmanagerCaller{contract: contract}, TokenmanagerTransactor: TokenmanagerTransactor{contract: contract}, TokenmanagerFilterer: TokenmanagerFilterer{contract: contract}}, nil
}

// NewTokenmanagerCaller creates a new read-only instance of Tokenmanager, bound to a specific deployed contract.
func NewTokenmanagerCaller(address common.Address, caller bind.ContractCaller) (*TokenmanagerCaller, error) {
	contract, err := bindTokenmanager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerCaller{contract: contract}, nil
}

// NewTokenmanagerTransactor creates a new write-only instance of Tokenmanager, bound to a specific deployed contract.
func NewTokenmanagerTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenmanagerTransactor, error) {
	contract, err := bindTokenmanager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerTransactor{contract: contract}, nil
}

// NewTokenmanagerFilterer creates a new log filterer instance of Tokenmanager, bound to a specific deployed contract.
func NewTokenmanagerFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenmanagerFilterer, error) {
	contract, err := bindTokenmanager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerFilterer{contract: contract}, nil
}

// bindTokenmanager binds a generic wrapper to an already deployed contract.
func bindTokenmanager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenmanagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tokenmanager *TokenmanagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Tokenmanager.Contract.TokenmanagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tokenmanager *TokenmanagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tokenmanager.Contract.TokenmanagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tokenmanager *TokenmanagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tokenmanager.Contract.TokenmanagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tokenmanager *TokenmanagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Tokenmanager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tokenmanager *TokenmanagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tokenmanager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tokenmanager *TokenmanagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tokenmanager.Contract.contract.Transact(opts, method, params...)
}

// ASSIGNROLE is a free data retrieval call binding the contract method 0xa51d9a8e.
//
// Solidity: function ASSIGN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) ASSIGNROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "ASSIGN_ROLE")
	return *ret0, err
}

// ASSIGNROLE is a free data retrieval call binding the contract method 0xa51d9a8e.
//
// Solidity: function ASSIGN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) ASSIGNROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.ASSIGNROLE(&_Tokenmanager.CallOpts)
}

// ASSIGNROLE is a free data retrieval call binding the contract method 0xa51d9a8e.
//
// Solidity: function ASSIGN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) ASSIGNROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.ASSIGNROLE(&_Tokenmanager.CallOpts)
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) BURNROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "BURN_ROLE")
	return *ret0, err
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) BURNROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.BURNROLE(&_Tokenmanager.CallOpts)
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) BURNROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.BURNROLE(&_Tokenmanager.CallOpts)
}

// ISSUEROLE is a free data retrieval call binding the contract method 0x856222f1.
//
// Solidity: function ISSUE_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) ISSUEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "ISSUE_ROLE")
	return *ret0, err
}

// ISSUEROLE is a free data retrieval call binding the contract method 0x856222f1.
//
// Solidity: function ISSUE_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) ISSUEROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.ISSUEROLE(&_Tokenmanager.CallOpts)
}

// ISSUEROLE is a free data retrieval call binding the contract method 0x856222f1.
//
// Solidity: function ISSUE_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) ISSUEROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.ISSUEROLE(&_Tokenmanager.CallOpts)
}

// MAXVESTINGSPERADDRESS is a free data retrieval call binding the contract method 0x0db3971b.
//
// Solidity: function MAX_VESTINGS_PER_ADDRESS() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) MAXVESTINGSPERADDRESS(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "MAX_VESTINGS_PER_ADDRESS")
	return *ret0, err
}

// MAXVESTINGSPERADDRESS is a free data retrieval call binding the contract method 0x0db3971b.
//
// Solidity: function MAX_VESTINGS_PER_ADDRESS() constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) MAXVESTINGSPERADDRESS() (*big.Int, error) {
	return _Tokenmanager.Contract.MAXVESTINGSPERADDRESS(&_Tokenmanager.CallOpts)
}

// MAXVESTINGSPERADDRESS is a free data retrieval call binding the contract method 0x0db3971b.
//
// Solidity: function MAX_VESTINGS_PER_ADDRESS() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) MAXVESTINGSPERADDRESS() (*big.Int, error) {
	return _Tokenmanager.Contract.MAXVESTINGSPERADDRESS(&_Tokenmanager.CallOpts)
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) MINTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "MINT_ROLE")
	return *ret0, err
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) MINTROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.MINTROLE(&_Tokenmanager.CallOpts)
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) MINTROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.MINTROLE(&_Tokenmanager.CallOpts)
}

// REVOKEVESTINGSROLE is a free data retrieval call binding the contract method 0xedc168f1.
//
// Solidity: function REVOKE_VESTINGS_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) REVOKEVESTINGSROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "REVOKE_VESTINGS_ROLE")
	return *ret0, err
}

// REVOKEVESTINGSROLE is a free data retrieval call binding the contract method 0xedc168f1.
//
// Solidity: function REVOKE_VESTINGS_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) REVOKEVESTINGSROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.REVOKEVESTINGSROLE(&_Tokenmanager.CallOpts)
}

// REVOKEVESTINGSROLE is a free data retrieval call binding the contract method 0xedc168f1.
//
// Solidity: function REVOKE_VESTINGS_ROLE() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) REVOKEVESTINGSROLE() ([32]byte, error) {
	return _Tokenmanager.Contract.REVOKEVESTINGSROLE(&_Tokenmanager.CallOpts)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address _token) constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) AllowRecoverability(opts *bind.CallOpts, _token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "allowRecoverability", _token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address _token) constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) AllowRecoverability(_token common.Address) (bool, error) {
	return _Tokenmanager.Contract.AllowRecoverability(&_Tokenmanager.CallOpts, _token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address _token) constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) AllowRecoverability(_token common.Address) (bool, error) {
	return _Tokenmanager.Contract.AllowRecoverability(&_Tokenmanager.CallOpts, _token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerSession) AppId() ([32]byte, error) {
	return _Tokenmanager.Contract.AppId(&_Tokenmanager.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tokenmanager *TokenmanagerCallerSession) AppId() ([32]byte, error) {
	return _Tokenmanager.Contract.AppId(&_Tokenmanager.CallOpts)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Tokenmanager.Contract.CanForward(&_Tokenmanager.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Tokenmanager.Contract.CanForward(&_Tokenmanager.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Tokenmanager.Contract.CanPerform(&_Tokenmanager.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Tokenmanager.Contract.CanPerform(&_Tokenmanager.CallOpts, _sender, _role, _params)
}

// EverHeld is a free data retrieval call binding the contract method 0x03f413d1.
//
// Solidity: function everHeld(address ) constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) EverHeld(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "everHeld", arg0)
	return *ret0, err
}

// EverHeld is a free data retrieval call binding the contract method 0x03f413d1.
//
// Solidity: function everHeld(address ) constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) EverHeld(arg0 common.Address) (bool, error) {
	return _Tokenmanager.Contract.EverHeld(&_Tokenmanager.CallOpts, arg0)
}

// EverHeld is a free data retrieval call binding the contract method 0x03f413d1.
//
// Solidity: function everHeld(address ) constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) EverHeld(arg0 common.Address) (bool, error) {
	return _Tokenmanager.Contract.EverHeld(&_Tokenmanager.CallOpts, arg0)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tokenmanager *TokenmanagerCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tokenmanager *TokenmanagerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Tokenmanager.Contract.GetEVMScriptExecutor(&_Tokenmanager.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tokenmanager *TokenmanagerCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Tokenmanager.Contract.GetEVMScriptExecutor(&_Tokenmanager.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tokenmanager *TokenmanagerCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tokenmanager *TokenmanagerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Tokenmanager.Contract.GetEVMScriptRegistry(&_Tokenmanager.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tokenmanager *TokenmanagerCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Tokenmanager.Contract.GetEVMScriptRegistry(&_Tokenmanager.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) GetInitializationBlock() (*big.Int, error) {
	return _Tokenmanager.Contract.GetInitializationBlock(&_Tokenmanager.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Tokenmanager.Contract.GetInitializationBlock(&_Tokenmanager.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tokenmanager *TokenmanagerCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tokenmanager *TokenmanagerSession) GetRecoveryVault() (common.Address, error) {
	return _Tokenmanager.Contract.GetRecoveryVault(&_Tokenmanager.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tokenmanager *TokenmanagerCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Tokenmanager.Contract.GetRecoveryVault(&_Tokenmanager.CallOpts)
}

// GetVesting is a free data retrieval call binding the contract method 0x3e05a36d.
//
// Solidity: function getVesting(address _recipient, uint256 _vestingId) constant returns(uint256 amount, uint64 start, uint64 cliff, uint64 vesting, bool revokable)
func (_Tokenmanager *TokenmanagerCaller) GetVesting(opts *bind.CallOpts, _recipient common.Address, _vestingId *big.Int) (struct {
	Amount    *big.Int
	Start     uint64
	Cliff     uint64
	Vesting   uint64
	Revokable bool
}, error) {
	ret := new(struct {
		Amount    *big.Int
		Start     uint64
		Cliff     uint64
		Vesting   uint64
		Revokable bool
	})
	out := ret
	err := _Tokenmanager.contract.Call(opts, out, "getVesting", _recipient, _vestingId)
	return *ret, err
}

// GetVesting is a free data retrieval call binding the contract method 0x3e05a36d.
//
// Solidity: function getVesting(address _recipient, uint256 _vestingId) constant returns(uint256 amount, uint64 start, uint64 cliff, uint64 vesting, bool revokable)
func (_Tokenmanager *TokenmanagerSession) GetVesting(_recipient common.Address, _vestingId *big.Int) (struct {
	Amount    *big.Int
	Start     uint64
	Cliff     uint64
	Vesting   uint64
	Revokable bool
}, error) {
	return _Tokenmanager.Contract.GetVesting(&_Tokenmanager.CallOpts, _recipient, _vestingId)
}

// GetVesting is a free data retrieval call binding the contract method 0x3e05a36d.
//
// Solidity: function getVesting(address _recipient, uint256 _vestingId) constant returns(uint256 amount, uint64 start, uint64 cliff, uint64 vesting, bool revokable)
func (_Tokenmanager *TokenmanagerCallerSession) GetVesting(_recipient common.Address, _vestingId *big.Int) (struct {
	Amount    *big.Int
	Start     uint64
	Cliff     uint64
	Vesting   uint64
	Revokable bool
}, error) {
	return _Tokenmanager.Contract.GetVesting(&_Tokenmanager.CallOpts, _recipient, _vestingId)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) HasInitialized() (bool, error) {
	return _Tokenmanager.Contract.HasInitialized(&_Tokenmanager.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) HasInitialized() (bool, error) {
	return _Tokenmanager.Contract.HasInitialized(&_Tokenmanager.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) IsForwarder() (bool, error) {
	return _Tokenmanager.Contract.IsForwarder(&_Tokenmanager.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) IsForwarder() (bool, error) {
	return _Tokenmanager.Contract.IsForwarder(&_Tokenmanager.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tokenmanager *TokenmanagerCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tokenmanager *TokenmanagerSession) IsPetrified() (bool, error) {
	return _Tokenmanager.Contract.IsPetrified(&_Tokenmanager.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tokenmanager *TokenmanagerCallerSession) IsPetrified() (bool, error) {
	return _Tokenmanager.Contract.IsPetrified(&_Tokenmanager.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tokenmanager *TokenmanagerCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tokenmanager *TokenmanagerSession) Kernel() (common.Address, error) {
	return _Tokenmanager.Contract.Kernel(&_Tokenmanager.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tokenmanager *TokenmanagerCallerSession) Kernel() (common.Address, error) {
	return _Tokenmanager.Contract.Kernel(&_Tokenmanager.CallOpts)
}

// MaxAccountTokens is a free data retrieval call binding the contract method 0xecfda432.
//
// Solidity: function maxAccountTokens() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) MaxAccountTokens(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "maxAccountTokens")
	return *ret0, err
}

// MaxAccountTokens is a free data retrieval call binding the contract method 0xecfda432.
//
// Solidity: function maxAccountTokens() constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) MaxAccountTokens() (*big.Int, error) {
	return _Tokenmanager.Contract.MaxAccountTokens(&_Tokenmanager.CallOpts)
}

// MaxAccountTokens is a free data retrieval call binding the contract method 0xecfda432.
//
// Solidity: function maxAccountTokens() constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) MaxAccountTokens() (*big.Int, error) {
	return _Tokenmanager.Contract.MaxAccountTokens(&_Tokenmanager.CallOpts)
}

// SpendableBalanceOf is a free data retrieval call binding the contract method 0x0f8f8b83.
//
// Solidity: function spendableBalanceOf(address _holder) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) SpendableBalanceOf(opts *bind.CallOpts, _holder common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "spendableBalanceOf", _holder)
	return *ret0, err
}

// SpendableBalanceOf is a free data retrieval call binding the contract method 0x0f8f8b83.
//
// Solidity: function spendableBalanceOf(address _holder) constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) SpendableBalanceOf(_holder common.Address) (*big.Int, error) {
	return _Tokenmanager.Contract.SpendableBalanceOf(&_Tokenmanager.CallOpts, _holder)
}

// SpendableBalanceOf is a free data retrieval call binding the contract method 0x0f8f8b83.
//
// Solidity: function spendableBalanceOf(address _holder) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) SpendableBalanceOf(_holder common.Address) (*big.Int, error) {
	return _Tokenmanager.Contract.SpendableBalanceOf(&_Tokenmanager.CallOpts, _holder)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Tokenmanager *TokenmanagerCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Tokenmanager *TokenmanagerSession) Token() (common.Address, error) {
	return _Tokenmanager.Contract.Token(&_Tokenmanager.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_Tokenmanager *TokenmanagerCallerSession) Token() (common.Address, error) {
	return _Tokenmanager.Contract.Token(&_Tokenmanager.CallOpts)
}

// TransferableBalance is a free data retrieval call binding the contract method 0x72f8393c.
//
// Solidity: function transferableBalance(address _holder, uint256 _time) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) TransferableBalance(opts *bind.CallOpts, _holder common.Address, _time *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "transferableBalance", _holder, _time)
	return *ret0, err
}

// TransferableBalance is a free data retrieval call binding the contract method 0x72f8393c.
//
// Solidity: function transferableBalance(address _holder, uint256 _time) constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) TransferableBalance(_holder common.Address, _time *big.Int) (*big.Int, error) {
	return _Tokenmanager.Contract.TransferableBalance(&_Tokenmanager.CallOpts, _holder, _time)
}

// TransferableBalance is a free data retrieval call binding the contract method 0x72f8393c.
//
// Solidity: function transferableBalance(address _holder, uint256 _time) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) TransferableBalance(_holder common.Address, _time *big.Int) (*big.Int, error) {
	return _Tokenmanager.Contract.TransferableBalance(&_Tokenmanager.CallOpts, _holder, _time)
}

// VestingsLengths is a free data retrieval call binding the contract method 0x97f2562a.
//
// Solidity: function vestingsLengths(address ) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCaller) VestingsLengths(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tokenmanager.contract.Call(opts, out, "vestingsLengths", arg0)
	return *ret0, err
}

// VestingsLengths is a free data retrieval call binding the contract method 0x97f2562a.
//
// Solidity: function vestingsLengths(address ) constant returns(uint256)
func (_Tokenmanager *TokenmanagerSession) VestingsLengths(arg0 common.Address) (*big.Int, error) {
	return _Tokenmanager.Contract.VestingsLengths(&_Tokenmanager.CallOpts, arg0)
}

// VestingsLengths is a free data retrieval call binding the contract method 0x97f2562a.
//
// Solidity: function vestingsLengths(address ) constant returns(uint256)
func (_Tokenmanager *TokenmanagerCallerSession) VestingsLengths(arg0 common.Address) (*big.Int, error) {
	return _Tokenmanager.Contract.VestingsLengths(&_Tokenmanager.CallOpts, arg0)
}

// Assign is a paid mutator transaction binding the contract method 0xbe760488.
//
// Solidity: function assign(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactor) Assign(opts *bind.TransactOpts, _receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "assign", _receiver, _amount)
}

// Assign is a paid mutator transaction binding the contract method 0xbe760488.
//
// Solidity: function assign(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerSession) Assign(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Assign(&_Tokenmanager.TransactOpts, _receiver, _amount)
}

// Assign is a paid mutator transaction binding the contract method 0xbe760488.
//
// Solidity: function assign(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Assign(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Assign(&_Tokenmanager.TransactOpts, _receiver, _amount)
}

// AssignVested is a paid mutator transaction binding the contract method 0x21cb18cd.
//
// Solidity: function assignVested(address _receiver, uint256 _amount, uint64 _start, uint64 _cliff, uint64 _vested, bool _revokable) returns(uint256)
func (_Tokenmanager *TokenmanagerTransactor) AssignVested(opts *bind.TransactOpts, _receiver common.Address, _amount *big.Int, _start uint64, _cliff uint64, _vested uint64, _revokable bool) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "assignVested", _receiver, _amount, _start, _cliff, _vested, _revokable)
}

// AssignVested is a paid mutator transaction binding the contract method 0x21cb18cd.
//
// Solidity: function assignVested(address _receiver, uint256 _amount, uint64 _start, uint64 _cliff, uint64 _vested, bool _revokable) returns(uint256)
func (_Tokenmanager *TokenmanagerSession) AssignVested(_receiver common.Address, _amount *big.Int, _start uint64, _cliff uint64, _vested uint64, _revokable bool) (*types.Transaction, error) {
	return _Tokenmanager.Contract.AssignVested(&_Tokenmanager.TransactOpts, _receiver, _amount, _start, _cliff, _vested, _revokable)
}

// AssignVested is a paid mutator transaction binding the contract method 0x21cb18cd.
//
// Solidity: function assignVested(address _receiver, uint256 _amount, uint64 _start, uint64 _cliff, uint64 _vested, bool _revokable) returns(uint256)
func (_Tokenmanager *TokenmanagerTransactorSession) AssignVested(_receiver common.Address, _amount *big.Int, _start uint64, _cliff uint64, _vested uint64, _revokable bool) (*types.Transaction, error) {
	return _Tokenmanager.Contract.AssignVested(&_Tokenmanager.TransactOpts, _receiver, _amount, _start, _cliff, _vested, _revokable)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _holder, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactor) Burn(opts *bind.TransactOpts, _holder common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "burn", _holder, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _holder, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerSession) Burn(_holder common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Burn(&_Tokenmanager.TransactOpts, _holder, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _holder, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Burn(_holder common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Burn(&_Tokenmanager.TransactOpts, _holder, _amount)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Tokenmanager *TokenmanagerTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Tokenmanager *TokenmanagerSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Forward(&_Tokenmanager.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Forward(&_Tokenmanager.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0xe37ff29f.
//
// Solidity: function initialize(address _token, bool _transferable, uint256 _maxAccountTokens) returns()
func (_Tokenmanager *TokenmanagerTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _transferable bool, _maxAccountTokens *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "initialize", _token, _transferable, _maxAccountTokens)
}

// Initialize is a paid mutator transaction binding the contract method 0xe37ff29f.
//
// Solidity: function initialize(address _token, bool _transferable, uint256 _maxAccountTokens) returns()
func (_Tokenmanager *TokenmanagerSession) Initialize(_token common.Address, _transferable bool, _maxAccountTokens *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Initialize(&_Tokenmanager.TransactOpts, _token, _transferable, _maxAccountTokens)
}

// Initialize is a paid mutator transaction binding the contract method 0xe37ff29f.
//
// Solidity: function initialize(address _token, bool _transferable, uint256 _maxAccountTokens) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Initialize(_token common.Address, _transferable bool, _maxAccountTokens *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Initialize(&_Tokenmanager.TransactOpts, _token, _transferable, _maxAccountTokens)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactor) Issue(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "issue", _amount)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerSession) Issue(_amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Issue(&_Tokenmanager.TransactOpts, _amount)
}

// Issue is a paid mutator transaction binding the contract method 0xcc872b66.
//
// Solidity: function issue(uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Issue(_amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Issue(&_Tokenmanager.TransactOpts, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactor) Mint(opts *bind.TransactOpts, _receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "mint", _receiver, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerSession) Mint(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Mint(&_Tokenmanager.TransactOpts, _receiver, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) Mint(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.Mint(&_Tokenmanager.TransactOpts, _receiver, _amount)
}

// OnApprove is a paid mutator transaction binding the contract method 0xda682aeb.
//
// Solidity: function onApprove(address , address , uint256 ) returns(bool)
func (_Tokenmanager *TokenmanagerTransactor) OnApprove(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "onApprove", arg0, arg1, arg2)
}

// OnApprove is a paid mutator transaction binding the contract method 0xda682aeb.
//
// Solidity: function onApprove(address , address , uint256 ) returns(bool)
func (_Tokenmanager *TokenmanagerSession) OnApprove(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.OnApprove(&_Tokenmanager.TransactOpts, arg0, arg1, arg2)
}

// OnApprove is a paid mutator transaction binding the contract method 0xda682aeb.
//
// Solidity: function onApprove(address , address , uint256 ) returns(bool)
func (_Tokenmanager *TokenmanagerTransactorSession) OnApprove(arg0 common.Address, arg1 common.Address, arg2 *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.OnApprove(&_Tokenmanager.TransactOpts, arg0, arg1, arg2)
}

// OnTransfer is a paid mutator transaction binding the contract method 0x4a393149.
//
// Solidity: function onTransfer(address _from, address _to, uint256 _amount) returns(bool)
func (_Tokenmanager *TokenmanagerTransactor) OnTransfer(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "onTransfer", _from, _to, _amount)
}

// OnTransfer is a paid mutator transaction binding the contract method 0x4a393149.
//
// Solidity: function onTransfer(address _from, address _to, uint256 _amount) returns(bool)
func (_Tokenmanager *TokenmanagerSession) OnTransfer(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.OnTransfer(&_Tokenmanager.TransactOpts, _from, _to, _amount)
}

// OnTransfer is a paid mutator transaction binding the contract method 0x4a393149.
//
// Solidity: function onTransfer(address _from, address _to, uint256 _amount) returns(bool)
func (_Tokenmanager *TokenmanagerTransactorSession) OnTransfer(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.OnTransfer(&_Tokenmanager.TransactOpts, _from, _to, _amount)
}

// ProxyPayment is a paid mutator transaction binding the contract method 0xf48c3054.
//
// Solidity: function proxyPayment(address ) returns(bool)
func (_Tokenmanager *TokenmanagerTransactor) ProxyPayment(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "proxyPayment", arg0)
}

// ProxyPayment is a paid mutator transaction binding the contract method 0xf48c3054.
//
// Solidity: function proxyPayment(address ) returns(bool)
func (_Tokenmanager *TokenmanagerSession) ProxyPayment(arg0 common.Address) (*types.Transaction, error) {
	return _Tokenmanager.Contract.ProxyPayment(&_Tokenmanager.TransactOpts, arg0)
}

// ProxyPayment is a paid mutator transaction binding the contract method 0xf48c3054.
//
// Solidity: function proxyPayment(address ) returns(bool)
func (_Tokenmanager *TokenmanagerTransactorSession) ProxyPayment(arg0 common.Address) (*types.Transaction, error) {
	return _Tokenmanager.Contract.ProxyPayment(&_Tokenmanager.TransactOpts, arg0)
}

// RevokeVesting is a paid mutator transaction binding the contract method 0xfa6799f2.
//
// Solidity: function revokeVesting(address _holder, uint256 _vestingId) returns()
func (_Tokenmanager *TokenmanagerTransactor) RevokeVesting(opts *bind.TransactOpts, _holder common.Address, _vestingId *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "revokeVesting", _holder, _vestingId)
}

// RevokeVesting is a paid mutator transaction binding the contract method 0xfa6799f2.
//
// Solidity: function revokeVesting(address _holder, uint256 _vestingId) returns()
func (_Tokenmanager *TokenmanagerSession) RevokeVesting(_holder common.Address, _vestingId *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.RevokeVesting(&_Tokenmanager.TransactOpts, _holder, _vestingId)
}

// RevokeVesting is a paid mutator transaction binding the contract method 0xfa6799f2.
//
// Solidity: function revokeVesting(address _holder, uint256 _vestingId) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) RevokeVesting(_holder common.Address, _vestingId *big.Int) (*types.Transaction, error) {
	return _Tokenmanager.Contract.RevokeVesting(&_Tokenmanager.TransactOpts, _holder, _vestingId)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tokenmanager *TokenmanagerTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Tokenmanager.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tokenmanager *TokenmanagerSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Tokenmanager.Contract.TransferToVault(&_Tokenmanager.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tokenmanager *TokenmanagerTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Tokenmanager.Contract.TransferToVault(&_Tokenmanager.TransactOpts, _token)
}

// TokenmanagerNewVestingIterator is returned from FilterNewVesting and is used to iterate over the raw logs and unpacked data for NewVesting events raised by the Tokenmanager contract.
type TokenmanagerNewVestingIterator struct {
	Event *TokenmanagerNewVesting // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenmanagerNewVestingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenmanagerNewVesting)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenmanagerNewVesting)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenmanagerNewVestingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenmanagerNewVestingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenmanagerNewVesting represents a NewVesting event raised by the Tokenmanager contract.
type TokenmanagerNewVesting struct {
	Receiver  common.Address
	VestingId *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewVesting is a free log retrieval operation binding the contract event 0x627ad26dcfe82ec79b33fda0ddd062f6fab9f4914acac8345f79090dfd86fb54.
//
// Solidity: event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount)
func (_Tokenmanager *TokenmanagerFilterer) FilterNewVesting(opts *bind.FilterOpts, receiver []common.Address) (*TokenmanagerNewVestingIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Tokenmanager.contract.FilterLogs(opts, "NewVesting", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerNewVestingIterator{contract: _Tokenmanager.contract, event: "NewVesting", logs: logs, sub: sub}, nil
}

// WatchNewVesting is a free log subscription operation binding the contract event 0x627ad26dcfe82ec79b33fda0ddd062f6fab9f4914acac8345f79090dfd86fb54.
//
// Solidity: event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount)
func (_Tokenmanager *TokenmanagerFilterer) WatchNewVesting(opts *bind.WatchOpts, sink chan<- *TokenmanagerNewVesting, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Tokenmanager.contract.WatchLogs(opts, "NewVesting", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenmanagerNewVesting)
				if err := _Tokenmanager.contract.UnpackLog(event, "NewVesting", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenmanagerRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Tokenmanager contract.
type TokenmanagerRecoverToVaultIterator struct {
	Event *TokenmanagerRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenmanagerRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenmanagerRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenmanagerRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenmanagerRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenmanagerRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenmanagerRecoverToVault represents a RecoverToVault event raised by the Tokenmanager contract.
type TokenmanagerRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Tokenmanager *TokenmanagerFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*TokenmanagerRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Tokenmanager.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerRecoverToVaultIterator{contract: _Tokenmanager.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Tokenmanager *TokenmanagerFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *TokenmanagerRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Tokenmanager.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenmanagerRecoverToVault)
				if err := _Tokenmanager.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenmanagerRevokeVestingIterator is returned from FilterRevokeVesting and is used to iterate over the raw logs and unpacked data for RevokeVesting events raised by the Tokenmanager contract.
type TokenmanagerRevokeVestingIterator struct {
	Event *TokenmanagerRevokeVesting // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenmanagerRevokeVestingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenmanagerRevokeVesting)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenmanagerRevokeVesting)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenmanagerRevokeVestingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenmanagerRevokeVestingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenmanagerRevokeVesting represents a RevokeVesting event raised by the Tokenmanager contract.
type TokenmanagerRevokeVesting struct {
	Receiver        common.Address
	VestingId       *big.Int
	NonVestedAmount *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRevokeVesting is a free log retrieval operation binding the contract event 0xafc516b1509f836efdc27d64d966d14f82ef53f456f0de74c12ac8a651a084cc.
//
// Solidity: event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount)
func (_Tokenmanager *TokenmanagerFilterer) FilterRevokeVesting(opts *bind.FilterOpts, receiver []common.Address) (*TokenmanagerRevokeVestingIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Tokenmanager.contract.FilterLogs(opts, "RevokeVesting", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerRevokeVestingIterator{contract: _Tokenmanager.contract, event: "RevokeVesting", logs: logs, sub: sub}, nil
}

// WatchRevokeVesting is a free log subscription operation binding the contract event 0xafc516b1509f836efdc27d64d966d14f82ef53f456f0de74c12ac8a651a084cc.
//
// Solidity: event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount)
func (_Tokenmanager *TokenmanagerFilterer) WatchRevokeVesting(opts *bind.WatchOpts, sink chan<- *TokenmanagerRevokeVesting, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Tokenmanager.contract.WatchLogs(opts, "RevokeVesting", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenmanagerRevokeVesting)
				if err := _Tokenmanager.contract.UnpackLog(event, "RevokeVesting", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenmanagerScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Tokenmanager contract.
type TokenmanagerScriptResultIterator struct {
	Event *TokenmanagerScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenmanagerScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenmanagerScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenmanagerScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenmanagerScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenmanagerScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenmanagerScriptResult represents a ScriptResult event raised by the Tokenmanager contract.
type TokenmanagerScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Tokenmanager *TokenmanagerFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*TokenmanagerScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Tokenmanager.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &TokenmanagerScriptResultIterator{contract: _Tokenmanager.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Tokenmanager *TokenmanagerFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *TokenmanagerScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Tokenmanager.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenmanagerScriptResult)
				if err := _Tokenmanager.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
