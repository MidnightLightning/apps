// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tipping

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TippingABI is the input ABI used to generate the binding from.
const TippingABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sha3HexAddress\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toName\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_ctype\",\"type\":\"uint8\"},{\"name\":\"_cid\",\"type\":\"uint40\"}],\"name\":\"tip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nameOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"nameNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"ownerOfName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fromName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"toName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ctype\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"uint40\"}],\"name\":\"Tip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"toName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// TippingBin is the compiled bytecode used for deploying new contracts.
const TippingBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f7640100000000026200296f176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620003026401000000000262002c91179091906401000000009004565b50565b600081549050919050565b8082555050565b612d4b80620003196000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec146101435780630803fac01461019a5780631e83409a146101c957806327b752b81461020c5780632914b9bd1461026b57806332f0a3b5146103145780633f15457f1461036b578063485cc955146103c25780634c6e58fb146104255780637cb7acf7146104885780637cdd5edb146105445780637e7db6e1146105c95780637f8737491461062457806380afdea8146106cd57806383525394146107005780638909aa3f146107335780638b3dd749146107785780639d4941d8146107a3578063a1658fad146107e6578063a479e50814610892578063d4aae0c4146108e9578063d9f2b5f914610940578063de4796ed1461099f578063e5a6b10f146109ce575b600080fd5b34801561014f57600080fd5b50610158610a25565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a657600080fd5b506101af610a4a565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b5061020a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a75565b005b34801561021857600080fd5b5061024d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f78565b60405180826000191660001916815260200191505060405180910390f35b34801561027757600080fd5b506102d2600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fe2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032057600080fd5b50610329611101565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037757600080fd5b506103806111ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ce57600080fd5b50610423600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d4565b005b34801561043157600080fd5b5061048660048036038101908080359060200190820180359060200191909192939192939080359060200190929190803560ff169060200190929190803564ffffffffff16906020019092919050505061144b565b005b34801561049457600080fd5b506104c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a4b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105095780820151818401526020810190506104ee565b50505050905090810190601f1680156105365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055057600080fd5b506105ab600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b85565b60405180826000191660001916815260200191505060405180910390f35b3480156105d557600080fd5b5061060a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cad565b604051808215151515815260200191505060405180910390f35b34801561063057600080fd5b5061068b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611cb8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d957600080fd5b506106e2611d9c565b60405180826000191660001916815260200191505060405180910390f35b34801561070c57600080fd5b50610715611dd3565b60405180826000191660001916815260200191505060405180910390f35b34801561073f57600080fd5b506107626004803603810190808035600019169060200190929190505050611e0c565b6040518082815260200191505060405180910390f35b34801561078457600080fd5b5061078d611e24565b6040518082815260200191505060405180910390f35b3480156107af57600080fd5b506107e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e5b565b005b3480156107f257600080fd5b50610878600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612279565b604051808215151515815260200191505060405180910390f35b34801561089e57600080fd5b506108a7612480565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108f557600080fd5b506108fe61259b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561094c57600080fd5b50610981600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125d2565b60405180826000191660001916815260200191505060405180910390f35b3480156109ab57600080fd5b506109b46126a0565b604051808215151515815260200191505060405180910390f35b3480156109da57600080fd5b506109e36126d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610a55611e24565b905060008114158015610a6f575080610a6c6126f7565b10155b91505090565b6060600080610a8384611a4b565b92506000835114156040805190810160405280601381526020017f555345525f4e4f545f5245474953544552454400000000000000000000000000815250901515610b69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b2e578082015181840152602081019050610b13565b50505050905090810190601f168015610b5b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50826040518082805190602001908083835b602083101515610ba05780518252602082019150602081019050602083039250610b7b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600160008360001916600019168152602001908152602001600020549050600081116040805190810160405280601081526020017f4e4f5448494e475f544f5f434c41494d00000000000000000000000000000000815250901515610ccf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c94578082015181840152602081019050610c79565b50505050905090810190601f168015610cc15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060016000836000191660001916815260200190815260200160002060009055600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050506040513d6020811015610dde57600080fd5b81019080805190602001909291905050506040805190810160405280602081526020017f46494e414e43455f544b4e5f5452414e534645525f46524f4d5f524556455254815250901515610ecd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e92578082015181840152602081019050610e77565b50505050905090810190601f168015610ebf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507f990b6cd9495ee903483cf910ae467cbd572f7f4ae1fbc9e81bd623a1377ca2af83826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610f37578082015181840152602081019050610f1c565b50505050905090810190601f168015610f645780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610fd45760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610f9e565b506028600020915050919050565b6000610fec612480565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611073578082015181840152602081019050611058565b50505050905090810190601f1680156110a05780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156110bf57600080fd5b505af11580156110d3573d6000803e3d6000fd5b505050506040513d60208110156110e957600080fd5b81019080805190602001909291905050509050919050565b600061110b61259b565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561116e57600080fd5b505af1158015611182573d6000803e3d6000fd5b505050506040513d602081101561119857600080fd5b8101908080519060200190929190505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006111de611e24565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156112bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611282578082015181840152602081019050611267565b50505050905090810190601f1680156112af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506112c66126ff565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611406600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf7ffdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f56001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b810190808051906020019092919050505061282c565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080606061148b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611cb8565b925060008373ffffffffffffffffffffffffffffffffffffffff1614156117305787876040518083838082843782019150509250505060405180910390209150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156115c457600080fd5b505af11580156115d8573d6000803e3d6000fd5b505050506040513d60208110156115ee57600080fd5b81019080805190602001909291905050506040805190810160405280602081526020017f46494e414e43455f544b4e5f5452414e534645525f46524f4d5f5245564552548152509015156116dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116a2578082015181840152602081019050611687565b50505050905090810190601f1680156116cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061170c866001600085600019166000191681526020019081526020016000205461286f90919063ffffffff16565b60016000846000191660001916815260200190815260200160002081905550611944565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3385896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561182957600080fd5b505af115801561183d573d6000803e3d6000fd5b505050506040513d602081101561185357600080fd5b81019080805190602001909291905050506040805190810160405280602081526020017f46494e414e43455f544b4e5f5452414e534645525f46524f4d5f524556455254815250901515611942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119075780820151818401526020810190506118ec565b50505050905090810190601f1680156119345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b61194d33611a4b565b90507f2bd10d551f42f2d84ed70a813ececdf3969e370789ab544ea13b401fbbdc32c581898989898960405180806020018060200186815260200185600281111561199457fe5b60ff1681526020018464ffffffffff1664ffffffffff168152602001838103835289818151815260200191508051906020019080838360005b838110156119e85780820151818401526020810190506119cd565b50505050905090810190601f168015611a155780820380516001836020036101000a031916815260200191505b50838103825288888281815260200192508082843782019150509850505050505050505060405180910390a15050505050505050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f3431611a93846125d2565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611aed57600080fd5b505af1158015611b01573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b2b57600080fd5b810190808051640100000000811115611b4357600080fd5b82810190506020810184811115611b5957600080fd5b8151856001820283011164010000000082111715611b7657600080fd5b50509291905050509050919050565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102826040518082805190602001908083835b602083101515611be15780518252602082019150602081019050602083039250611bbc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611c795780518252602082019150602081019050602083039250611c54565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de611d0084611b85565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611d5a57600080fd5b505af1158015611d6e573d6000803e3d6000fd5b505050506040513d6020811015611d8457600080fd5b81019080805190602001909291905050509050919050565b6000611dce7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b60010260001916612964565b905090565b60405180807f4e4f4e45000000000000000000000000000000000000000000000000000000008152506004019050604051809103902081565b60016020528060005260406000206000915090505481565b6000611e567febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e6001026000191661296f565b905090565b6000806000611e6984611cad565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f5745440000000000000000000000000000815250901515611f47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f0c578082015181840152602081019050611ef1565b50505050905090810190601f168015611f395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611f50611101565b9250611f5b8361297a565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e5452414354000000000000815250901515612039576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ffe578082015181840152602081019050611fe3565b50505050905090810190601f16801561202b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120d5573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156120cf573d6000803e3d6000fd5b5061220e565b839050612101308273ffffffffffffffffffffffffffffffffffffffff166129cc90919063ffffffff16565b915061212e83838373ffffffffffffffffffffffffffffffffffffffff16612ba69092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c454400000081525090151561220c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121d15780820151818401526020810190506121b6565b50505050905090810190601f1680156121fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008060606000612288610a4a565b15156122975760009350612476565b61229f61259b565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122df5760009350612476565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156123e95780820151818401526020810190506123ce565b50505050905090810190601f1680156124165780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b505050506040513d602081101561246257600080fd5b810190808051906020019092919050505093505b5050509392505050565b60008061248b61259b565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b505050506040513d602081101561258157600080fd5b810190808051906020019092919050505090508091505090565b60006125cd7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b60010260001916612c86565b905090565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010261260183610f78565b6040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561266c5780518252602082019150602081019050602083039250612647565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6126cb611e24565b14905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600043905090565b6000612709611e24565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156127e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127ad578082015181840152602081019050612792565b50505050905090810190601f1680156127da5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061282a6127f46126f7565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916612c9190919063ffffffff16565b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110156040805190810160405280601181526020017f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000815250901515612959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561291e578082015181840152602081019050612903565b50505050905090810190601f16801561294b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508091505092915050565b600081549050919050565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156129bb57600091506129c6565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509250612ab68684612c98565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f524556455254454400000000815250901515612b99576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b5e578082015181840152602081019050612b43565b50505050905090810190601f168015612b8b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612c7c8582612ccd565b9150509392505050565b600081549050919050565b8082555050565b6000806000806040516020818751602089018a5afa92506000831115612cbd57805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af16000811115612d13573d60008114612d005760208114612d0957612d11565b60019350612d11565b600183511493505b505b505080915050929150505600a165627a7a72305820cfbfebb206e58c5218ba074ac4d63ebecadbe3b96be8bf0e46df66c6cbd943170029`

// DeployTipping deploys a new Ethereum contract, binding an instance of Tipping to it.
func DeployTipping(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Tipping, error) {
	parsed, err := abi.JSON(strings.NewReader(TippingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TippingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Tipping{TippingCaller: TippingCaller{contract: contract}, TippingTransactor: TippingTransactor{contract: contract}, TippingFilterer: TippingFilterer{contract: contract}}, nil
}

// Tipping is an auto generated Go binding around an Ethereum contract.
type Tipping struct {
	TippingCaller     // Read-only binding to the contract
	TippingTransactor // Write-only binding to the contract
	TippingFilterer   // Log filterer for contract events
}

// TippingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TippingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TippingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TippingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TippingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TippingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TippingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TippingSession struct {
	Contract     *Tipping          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TippingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TippingCallerSession struct {
	Contract *TippingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// TippingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TippingTransactorSession struct {
	Contract     *TippingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TippingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TippingRaw struct {
	Contract *Tipping // Generic contract binding to access the raw methods on
}

// TippingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TippingCallerRaw struct {
	Contract *TippingCaller // Generic read-only contract binding to access the raw methods on
}

// TippingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TippingTransactorRaw struct {
	Contract *TippingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTipping creates a new instance of Tipping, bound to a specific deployed contract.
func NewTipping(address common.Address, backend bind.ContractBackend) (*Tipping, error) {
	contract, err := bindTipping(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Tipping{TippingCaller: TippingCaller{contract: contract}, TippingTransactor: TippingTransactor{contract: contract}, TippingFilterer: TippingFilterer{contract: contract}}, nil
}

// NewTippingCaller creates a new read-only instance of Tipping, bound to a specific deployed contract.
func NewTippingCaller(address common.Address, caller bind.ContractCaller) (*TippingCaller, error) {
	contract, err := bindTipping(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TippingCaller{contract: contract}, nil
}

// NewTippingTransactor creates a new write-only instance of Tipping, bound to a specific deployed contract.
func NewTippingTransactor(address common.Address, transactor bind.ContractTransactor) (*TippingTransactor, error) {
	contract, err := bindTipping(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TippingTransactor{contract: contract}, nil
}

// NewTippingFilterer creates a new log filterer instance of Tipping, bound to a specific deployed contract.
func NewTippingFilterer(address common.Address, filterer bind.ContractFilterer) (*TippingFilterer, error) {
	contract, err := bindTipping(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TippingFilterer{contract: contract}, nil
}

// bindTipping binds a generic wrapper to an already deployed contract.
func bindTipping(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TippingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tipping *TippingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Tipping.Contract.TippingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tipping *TippingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tipping.Contract.TippingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tipping *TippingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tipping.Contract.TippingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tipping *TippingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Tipping.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tipping *TippingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tipping.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tipping *TippingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tipping.Contract.contract.Transact(opts, method, params...)
}

// NONE is a free data retrieval call binding the contract method 0x83525394.
//
// Solidity: function NONE() constant returns(bytes32)
func (_Tipping *TippingCaller) NONE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "NONE")
	return *ret0, err
}

// NONE is a free data retrieval call binding the contract method 0x83525394.
//
// Solidity: function NONE() constant returns(bytes32)
func (_Tipping *TippingSession) NONE() ([32]byte, error) {
	return _Tipping.Contract.NONE(&_Tipping.CallOpts)
}

// NONE is a free data retrieval call binding the contract method 0x83525394.
//
// Solidity: function NONE() constant returns(bytes32)
func (_Tipping *TippingCallerSession) NONE() ([32]byte, error) {
	return _Tipping.Contract.NONE(&_Tipping.CallOpts)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Tipping *TippingCaller) AddrNode(opts *bind.CallOpts, _addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "addrNode", _addr)
	return *ret0, err
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Tipping *TippingSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Tipping.Contract.AddrNode(&_Tipping.CallOpts, _addr)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Tipping *TippingCallerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Tipping.Contract.AddrNode(&_Tipping.CallOpts, _addr)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Tipping *TippingCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Tipping *TippingSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Tipping.Contract.AllowRecoverability(&_Tipping.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Tipping *TippingCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Tipping.Contract.AllowRecoverability(&_Tipping.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tipping *TippingCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tipping *TippingSession) AppId() ([32]byte, error) {
	return _Tipping.Contract.AppId(&_Tipping.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Tipping *TippingCallerSession) AppId() ([32]byte, error) {
	return _Tipping.Contract.AppId(&_Tipping.CallOpts)
}

// Balances is a free data retrieval call binding the contract method 0x8909aa3f.
//
// Solidity: function balances(bytes32 ) constant returns(uint256)
func (_Tipping *TippingCaller) Balances(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "balances", arg0)
	return *ret0, err
}

// Balances is a free data retrieval call binding the contract method 0x8909aa3f.
//
// Solidity: function balances(bytes32 ) constant returns(uint256)
func (_Tipping *TippingSession) Balances(arg0 [32]byte) (*big.Int, error) {
	return _Tipping.Contract.Balances(&_Tipping.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x8909aa3f.
//
// Solidity: function balances(bytes32 ) constant returns(uint256)
func (_Tipping *TippingCallerSession) Balances(arg0 [32]byte) (*big.Int, error) {
	return _Tipping.Contract.Balances(&_Tipping.CallOpts, arg0)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tipping *TippingCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tipping *TippingSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Tipping.Contract.CanPerform(&_Tipping.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Tipping *TippingCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Tipping.Contract.CanPerform(&_Tipping.CallOpts, _sender, _role, _params)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Tipping *TippingCaller) Currency(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "currency")
	return *ret0, err
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Tipping *TippingSession) Currency() (common.Address, error) {
	return _Tipping.Contract.Currency(&_Tipping.CallOpts)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Tipping *TippingCallerSession) Currency() (common.Address, error) {
	return _Tipping.Contract.Currency(&_Tipping.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Tipping *TippingCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Tipping *TippingSession) Ens() (common.Address, error) {
	return _Tipping.Contract.Ens(&_Tipping.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Tipping *TippingCallerSession) Ens() (common.Address, error) {
	return _Tipping.Contract.Ens(&_Tipping.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tipping *TippingCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tipping *TippingSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Tipping.Contract.GetEVMScriptExecutor(&_Tipping.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Tipping *TippingCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Tipping.Contract.GetEVMScriptExecutor(&_Tipping.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tipping *TippingCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tipping *TippingSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Tipping.Contract.GetEVMScriptRegistry(&_Tipping.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Tipping *TippingCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Tipping.Contract.GetEVMScriptRegistry(&_Tipping.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tipping *TippingCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tipping *TippingSession) GetInitializationBlock() (*big.Int, error) {
	return _Tipping.Contract.GetInitializationBlock(&_Tipping.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Tipping *TippingCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Tipping.Contract.GetInitializationBlock(&_Tipping.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tipping *TippingCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tipping *TippingSession) GetRecoveryVault() (common.Address, error) {
	return _Tipping.Contract.GetRecoveryVault(&_Tipping.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Tipping *TippingCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Tipping.Contract.GetRecoveryVault(&_Tipping.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tipping *TippingCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tipping *TippingSession) HasInitialized() (bool, error) {
	return _Tipping.Contract.HasInitialized(&_Tipping.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Tipping *TippingCallerSession) HasInitialized() (bool, error) {
	return _Tipping.Contract.HasInitialized(&_Tipping.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tipping *TippingCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tipping *TippingSession) IsPetrified() (bool, error) {
	return _Tipping.Contract.IsPetrified(&_Tipping.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Tipping *TippingCallerSession) IsPetrified() (bool, error) {
	return _Tipping.Contract.IsPetrified(&_Tipping.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tipping *TippingCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tipping *TippingSession) Kernel() (common.Address, error) {
	return _Tipping.Contract.Kernel(&_Tipping.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Tipping *TippingCallerSession) Kernel() (common.Address, error) {
	return _Tipping.Contract.Kernel(&_Tipping.CallOpts)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Tipping *TippingCaller) NameNode(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "nameNode", _username)
	return *ret0, err
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Tipping *TippingSession) NameNode(_username string) ([32]byte, error) {
	return _Tipping.Contract.NameNode(&_Tipping.CallOpts, _username)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Tipping *TippingCallerSession) NameNode(_username string) ([32]byte, error) {
	return _Tipping.Contract.NameNode(&_Tipping.CallOpts, _username)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Tipping *TippingCaller) NameOfOwner(opts *bind.CallOpts, _owner common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "nameOfOwner", _owner)
	return *ret0, err
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Tipping *TippingSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Tipping.Contract.NameOfOwner(&_Tipping.CallOpts, _owner)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Tipping *TippingCallerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Tipping.Contract.NameOfOwner(&_Tipping.CallOpts, _owner)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Tipping *TippingCaller) OwnerOfName(opts *bind.CallOpts, _username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "ownerOfName", _username)
	return *ret0, err
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Tipping *TippingSession) OwnerOfName(_username string) (common.Address, error) {
	return _Tipping.Contract.OwnerOfName(&_Tipping.CallOpts, _username)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Tipping *TippingCallerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Tipping.Contract.OwnerOfName(&_Tipping.CallOpts, _username)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Tipping *TippingCaller) Resolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "resolver")
	return *ret0, err
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Tipping *TippingSession) Resolver() (common.Address, error) {
	return _Tipping.Contract.Resolver(&_Tipping.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Tipping *TippingCallerSession) Resolver() (common.Address, error) {
	return _Tipping.Contract.Resolver(&_Tipping.CallOpts)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Tipping *TippingCaller) Sha3HexAddress(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Tipping.contract.Call(opts, out, "sha3HexAddress", addr)
	return *ret0, err
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Tipping *TippingSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Tipping.Contract.Sha3HexAddress(&_Tipping.CallOpts, addr)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Tipping *TippingCallerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Tipping.Contract.Sha3HexAddress(&_Tipping.CallOpts, addr)
}

// Claim is a paid mutator transaction binding the contract method 0x1e83409a.
//
// Solidity: function claim(address _owner) returns()
func (_Tipping *TippingTransactor) Claim(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _Tipping.contract.Transact(opts, "claim", _owner)
}

// Claim is a paid mutator transaction binding the contract method 0x1e83409a.
//
// Solidity: function claim(address _owner) returns()
func (_Tipping *TippingSession) Claim(_owner common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.Claim(&_Tipping.TransactOpts, _owner)
}

// Claim is a paid mutator transaction binding the contract method 0x1e83409a.
//
// Solidity: function claim(address _owner) returns()
func (_Tipping *TippingTransactorSession) Claim(_owner common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.Claim(&_Tipping.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currency) returns()
func (_Tipping *TippingTransactor) Initialize(opts *bind.TransactOpts, _ens common.Address, _currency common.Address) (*types.Transaction, error) {
	return _Tipping.contract.Transact(opts, "initialize", _ens, _currency)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currency) returns()
func (_Tipping *TippingSession) Initialize(_ens common.Address, _currency common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.Initialize(&_Tipping.TransactOpts, _ens, _currency)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currency) returns()
func (_Tipping *TippingTransactorSession) Initialize(_ens common.Address, _currency common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.Initialize(&_Tipping.TransactOpts, _ens, _currency)
}

// Tip is a paid mutator transaction binding the contract method 0x4c6e58fb.
//
// Solidity: function tip(string _toName, uint256 _amount, uint8 _ctype, uint40 _cid) returns()
func (_Tipping *TippingTransactor) Tip(opts *bind.TransactOpts, _toName string, _amount *big.Int, _ctype uint8, _cid *big.Int) (*types.Transaction, error) {
	return _Tipping.contract.Transact(opts, "tip", _toName, _amount, _ctype, _cid)
}

// Tip is a paid mutator transaction binding the contract method 0x4c6e58fb.
//
// Solidity: function tip(string _toName, uint256 _amount, uint8 _ctype, uint40 _cid) returns()
func (_Tipping *TippingSession) Tip(_toName string, _amount *big.Int, _ctype uint8, _cid *big.Int) (*types.Transaction, error) {
	return _Tipping.Contract.Tip(&_Tipping.TransactOpts, _toName, _amount, _ctype, _cid)
}

// Tip is a paid mutator transaction binding the contract method 0x4c6e58fb.
//
// Solidity: function tip(string _toName, uint256 _amount, uint8 _ctype, uint40 _cid) returns()
func (_Tipping *TippingTransactorSession) Tip(_toName string, _amount *big.Int, _ctype uint8, _cid *big.Int) (*types.Transaction, error) {
	return _Tipping.Contract.Tip(&_Tipping.TransactOpts, _toName, _amount, _ctype, _cid)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tipping *TippingTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Tipping.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tipping *TippingSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.TransferToVault(&_Tipping.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Tipping *TippingTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Tipping.Contract.TransferToVault(&_Tipping.TransactOpts, _token)
}

// TippingClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Tipping contract.
type TippingClaimIterator struct {
	Event *TippingClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TippingClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TippingClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TippingClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TippingClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TippingClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TippingClaim represents a Claim event raised by the Tipping contract.
type TippingClaim struct {
	ToName  string
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x990b6cd9495ee903483cf910ae467cbd572f7f4ae1fbc9e81bd623a1377ca2af.
//
// Solidity: event Claim(string toName, uint256 balance)
func (_Tipping *TippingFilterer) FilterClaim(opts *bind.FilterOpts) (*TippingClaimIterator, error) {

	logs, sub, err := _Tipping.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &TippingClaimIterator{contract: _Tipping.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x990b6cd9495ee903483cf910ae467cbd572f7f4ae1fbc9e81bd623a1377ca2af.
//
// Solidity: event Claim(string toName, uint256 balance)
func (_Tipping *TippingFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *TippingClaim) (event.Subscription, error) {

	logs, sub, err := _Tipping.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TippingClaim)
				if err := _Tipping.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TippingRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Tipping contract.
type TippingRecoverToVaultIterator struct {
	Event *TippingRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TippingRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TippingRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TippingRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TippingRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TippingRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TippingRecoverToVault represents a RecoverToVault event raised by the Tipping contract.
type TippingRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Tipping *TippingFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*TippingRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Tipping.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &TippingRecoverToVaultIterator{contract: _Tipping.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Tipping *TippingFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *TippingRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Tipping.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TippingRecoverToVault)
				if err := _Tipping.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TippingScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Tipping contract.
type TippingScriptResultIterator struct {
	Event *TippingScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TippingScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TippingScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TippingScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TippingScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TippingScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TippingScriptResult represents a ScriptResult event raised by the Tipping contract.
type TippingScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Tipping *TippingFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*TippingScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Tipping.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &TippingScriptResultIterator{contract: _Tipping.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Tipping *TippingFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *TippingScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Tipping.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TippingScriptResult)
				if err := _Tipping.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TippingTipIterator is returned from FilterTip and is used to iterate over the raw logs and unpacked data for Tip events raised by the Tipping contract.
type TippingTipIterator struct {
	Event *TippingTip // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TippingTipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TippingTip)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TippingTip)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TippingTipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TippingTipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TippingTip represents a Tip event raised by the Tipping contract.
type TippingTip struct {
	FromName string
	ToName   string
	Amount   *big.Int
	Ctype    uint8
	Cid      *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTip is a free log retrieval operation binding the contract event 0x2bd10d551f42f2d84ed70a813ececdf3969e370789ab544ea13b401fbbdc32c5.
//
// Solidity: event Tip(string fromName, string toName, uint256 amount, uint8 ctype, uint40 cid)
func (_Tipping *TippingFilterer) FilterTip(opts *bind.FilterOpts) (*TippingTipIterator, error) {

	logs, sub, err := _Tipping.contract.FilterLogs(opts, "Tip")
	if err != nil {
		return nil, err
	}
	return &TippingTipIterator{contract: _Tipping.contract, event: "Tip", logs: logs, sub: sub}, nil
}

// WatchTip is a free log subscription operation binding the contract event 0x2bd10d551f42f2d84ed70a813ececdf3969e370789ab544ea13b401fbbdc32c5.
//
// Solidity: event Tip(string fromName, string toName, uint256 amount, uint8 ctype, uint40 cid)
func (_Tipping *TippingFilterer) WatchTip(opts *bind.WatchOpts, sink chan<- *TippingTip) (event.Subscription, error) {

	logs, sub, err := _Tipping.contract.WatchLogs(opts, "Tip")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TippingTip)
				if err := _Tipping.contract.UnpackLog(event, "Tip", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
