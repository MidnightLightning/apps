// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package distribution

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DistributionABI is the input ABI used to generate the binding from.
const DistributionABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sha3HexAddress\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hashAddress\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_award\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_karmaManager\",\"type\":\"address\"},{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DISTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"karmaManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nameOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"nameNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"ownerOfName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRootsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_award\",\"type\":\"uint256\"}],\"name\":\"hash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"addRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_award\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"award\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"DistributionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"award\",\"type\":\"uint256\"}],\"name\":\"UserAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// DistributionBin is the compiled bytecode used for deploying new contracts.
const DistributionBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f76401000000000262002ff3176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620003026401000000000262003315179091906401000000009004565b50565b600081549050919050565b8082555050565b6133cf80620003196000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec1461019b5780630803fac0146101f257806327b752b8146102215780632914b9bd146102805780632a709b141461032957806332f0a3b5146103805780633aa5fe59146103d75780633f15457f146104365780634ce41a211461048d578063611f57641461056957806363acc14d146106035780637148ce351461069457806375e3d330146106c75780637cb7acf71461071e5780637cdd5edb146107da5780637e7db6e11461085f5780637f873749146108ba57806380afdea8146109635780638b3dd749146109965780639423fc6e146109c157806395989ed0146109ec5780639d4941d814610a7b578063a1658fad14610abe578063a479e50814610b6a578063be25270f14610bc1578063c2b40ae414610c50578063d4aae0c414610c99578063d59e646114610cf0578063d9f2b5f914610d21578063dd0e621514610d80578063de4796ed14610dc9578063fa72203e14610df8575b600080fd5b3480156101a757600080fd5b506101b0610e63565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101fe57600080fd5b50610207610e88565b604051808215151515815260200191505060405180910390f35b34801561022d57600080fd5b50610262600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eb3565b60405180826000191660001916815260200191505060405180910390f35b34801561028c57600080fd5b506102e7600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033557600080fd5b5061033e61103c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038c57600080fd5b50610395611062565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e357600080fd5b50610418600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061110f565b60405180826000191660001916815260200191505060405180910390f35b34801561044257600080fd5b5061044b611169565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049957600080fd5b5061054f6004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061118f565b604051808215151515815260200191505060405180910390f35b34801561057557600080fd5b506105e96004803603810190808035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035600019169060200190929190505050611215565b604051808215151515815260200191505060405180910390f35b34801561060f57600080fd5b50610692600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050611303565b005b3480156106a057600080fd5b506106a96115c6565b60405180826000191660001916815260200191505060405180910390f35b3480156106d357600080fd5b506106dc6115ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072a57600080fd5b5061075f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611625565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079f578082015181840152602081019050610784565b50505050905090810190601f1680156107cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107e657600080fd5b50610841600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061175f565b60405180826000191660001916815260200191505060405180910390f35b34801561086b57600080fd5b506108a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611887565b604051808215151515815260200191505060405180910390f35b3480156108c657600080fd5b50610921600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611892565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096f57600080fd5b50610978611976565b60405180826000191660001916815260200191505060405180910390f35b3480156109a257600080fd5b506109ab6119ad565b6040518082815260200191505060405180910390f35b3480156109cd57600080fd5b506109d66119e4565b6040518082815260200191505060405180910390f35b3480156109f857600080fd5b50610a616004803603810190808035600019169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119f1565b604051808215151515815260200191505060405180910390f35b348015610a8757600080fd5b50610abc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aa2565b005b348015610aca57600080fd5b50610b50600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611ec0565b604051808215151515815260200191505060405180910390f35b348015610b7657600080fd5b50610b7f6120c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bcd57600080fd5b50610c32600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506121e2565b60405180826000191660001916815260200191505060405180910390f35b348015610c5c57600080fd5b50610c7b60048036038101908080359060200190929190505050612257565b60405180826000191660001916815260200191505060405180910390f35b348015610ca557600080fd5b50610cae61227a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cfc57600080fd5b50610d1f60048036038101908080356000191690602001909291905050506122b1565b005b348015610d2d57600080fd5b50610d62600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612520565b60405180826000191660001916815260200191505060405180910390f35b348015610d8c57600080fd5b50610daf60048036038101908080356000191690602001909291905050506125ee565b604051808215151515815260200191505060405180910390f35b348015610dd557600080fd5b50610dde612619565b604051808215151515815260200191505060405180910390f35b348015610e0457600080fd5b50610e6160048036038101908080356000191690602001909291908035906020019082018035906020019190919293919293908035906020019092919080359060200190820180359060200191909192939192939050505061264a565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610e936119ad565b905060008114158015610ead575080610eaa612dbf565b10155b91505090565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610f0f5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610ed9565b506028600020915050919050565b6000610f276120c7565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fae578082015181840152602081019050610f93565b50505050905090810190601f168015610fdb5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b505050506040513d602081101561102457600080fd5b81019080805190602001909291905050509050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061106c61227a565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d60208110156110f957600080fd5b8101908080519060200190929190505050905090565b600081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008084846040518083805190602001908083835b6020831015156111c957805182526020820191506020810190506020830392506111a4565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040518091039020905061120a868483611215565b915050949350505050565b600080600090505b83518110156112ee57838181518110151561123457fe5b9060200190602002015160001916836000191610156112995782848281518110151561125c57fe5b90602001906020020151604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092506112e1565b83818151811015156112a757fe5b9060200190602002015183604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092505b808060010191505061121d565b84600019168360001916149150509392505050565b600061130d6119ad565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113b1578082015181840152602081019050611396565b50505050905090810190601f1680156113de5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506113f5612dc7565b83600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611535600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf7ffdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f56001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156114f557600080fd5b505af1158015611509573d6000803e3d6000fd5b505050506040513d602081101561151f57600080fd5b8101908080519060200190929190505050612ef4565b82600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115c081612f37565b50505050565b60405180807f53544152545f444953545249425554494f4e00000000000000000000000000008152506012019050604051809103902081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f343161166d84612520565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561170557600080fd5b81019080805164010000000081111561171d57600080fd5b8281019050602081018481111561173357600080fd5b815185600182028301116401000000008211171561175057600080fd5b50509291905050509050919050565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102826040518082805190602001908083835b6020831015156117bb5780518252602082019150602081019050602083039250611796565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611853578051825260208201915060208101905060208303925061182e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de6118da8461175f565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561193457600080fd5b505af1158015611948573d6000803e3d6000fd5b505050506040513d602081101561195e57600080fd5b81019080805190602001909291905050509050919050565b60006119a87fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b60010260001916612fe8565b905090565b60006119df7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916612ff3565b905090565b6000600180549050905090565b60006002600084600019166000191681526020019081526020016000206001016000836040518082805190602001908083835b602083101515611a495780518252602082019150602081019050602083039250611a24565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806000611ab084611887565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f5745440000000000000000000000000000815250901515611b8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b53578082015181840152602081019050611b38565b50505050905090810190601f168015611b805780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611b97611062565b9250611ba283612ffe565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e5452414354000000000000815250901515611c80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c45578082015181840152602081019050611c2a565b50505050905090810190601f168015611c725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611d1c573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611d16573d6000803e3d6000fd5b50611e55565b839050611d48308273ffffffffffffffffffffffffffffffffffffffff1661305090919063ffffffff16565b9150611d7583838373ffffffffffffffffffffffffffffffffffffffff1661322a9092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c4544000000815250901515611e53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e18578082015181840152602081019050611dfd565b50505050905090810190601f168015611e455780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008060606000611ecf610e88565b1515611ede57600093506120bd565b611ee661227a565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f2657600093506120bd565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612030578082015181840152602081019050612015565b50505050905090810190601f16801561205d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561207f57600080fd5b505af1158015612093573d6000803e3d6000fd5b505050506040513d60208110156120a957600080fd5b810190808051906020019092919050505093505b5050509392505050565b6000806120d261227a565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b15801561219e57600080fd5b505af11580156121b2573d6000803e3d6000fd5b505050506040513d60208110156121c857600080fd5b810190808051906020019092919050505090508091505090565b600082826040518083805190602001908083835b60208310151561221b57805182526020820191506020810190506020830392506121f6565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040518091039020905092915050565b60018181548110151561226657fe5b906000526020600020016000915090505481565b60006122ac7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b6001026000191661330a565b905090565b60405180807f53544152545f444953545249425554494f4e0000000000000000000000000000815250601201905060405180910390206123223382600060405190808252806020026020018201604052801561231c5781602001602082028038833980820191505090505b50611ec0565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123c55780820151818401526020810190506123aa565b50505050905090810190601f1680156123f25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000151560026000846000191660001916815260200190815260200160002060000160009054906101000a900460ff161515146040805190810160405280601381526020017f444953545249425554494f4e5f45584953545300000000000000000000000000815250901515612512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124d75780820151818401526020810190506124bc565b50505050905090810190601f1680156125045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061251c82612f37565b5050565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010261254f83610eb3565b6040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156125ba5780518252602082019150602081019050602083039250612595565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6126446119ad565b14905090565b60008061268887878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611892565b9150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601381526020017f555345525f4e4f545f5245474953544552454400000000000000000000000000815250901515612799576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561275e578082015181840152602081019050612743565b50505050905090810190601f16801561278b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060011515600260008a6000191660001916815260200190815260200160002060000160009054906101000a900460ff161515146040805190810160405280601681526020017f4e4f5f4143544956455f444953545249425554494f4e000000000000000000008152509015156128ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612870578082015181840152602081019050612855565b50505050905090810190601f16801561289d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508686604051808383808284378201915050925050506040518091039020905060001515600260008a600019166000191681526020019081526020016000206001016000836000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280601281526020017f555345525f4841535f434f4c4c454354454400000000000000000000000000008152509015156129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156129ba57808201518184015260208101905061299f565b50505050905090810190601f1680156129e75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612a638888888080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508787878080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505061118f565b6040805190810160405280600781526020017f494e56414c494400000000000000000000000000000000000000000000000000815250901515612b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b06578082015181840152602081019050612aeb565b50505050905090810190601f168015612b335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260008a600019166000191681526020019081526020016000206001016000836000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612c5757600080fd5b505af1158015612c6b573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612d3457600080fd5b505af1158015612d48573d6000803e3d6000fd5b505050507f5db912b3a25f92fa3a44f8ac88539a801b2846e1b33f6734b91b58d438b516878888888860405180856000191660001916815260200180602001838152602001828103825285858281815260200192508082843782019150509550505050505060405180910390a15050505050505050565b600043905090565b6000612dd16119ad565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515612eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612e75578082015181840152602081019050612e5a565b50505050905090810190601f168015612ea25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612ef2612ebc612dbf565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e6001026000191661331590919063ffffffff16565b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006001829080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600260008360001916600019168152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055507ff6faee587b08bb9aaa7bd5c4a49531168d1ef9e3f510bf4d47586426baf76b488260405180826000191660001916815260200191505060405180910390a15050565b600081549050919050565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561303f576000915061304a565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050925061313a868461331c565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f52455645525445440000000081525090151561321d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e25780820151818401526020810190506131c7565b50505050905090810190601f16801561320f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506133008582613351565b9150509392505050565b600081549050919050565b8082555050565b6000806000806040516020818751602089018a5afa9250600083111561334157805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af16000811115613397573d60008114613384576020811461338d57613395565b60019350613395565b600183511493505b505b505080915050929150505600a165627a7a72305820a34f5780d9bdcd006842231d4650c86b8ee5570119de548a00ad609a0aef79bb0029`

// DeployDistribution deploys a new Ethereum contract, binding an instance of Distribution to it.
func DeployDistribution(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Distribution, error) {
	parsed, err := abi.JSON(strings.NewReader(DistributionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DistributionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Distribution{DistributionCaller: DistributionCaller{contract: contract}, DistributionTransactor: DistributionTransactor{contract: contract}, DistributionFilterer: DistributionFilterer{contract: contract}}, nil
}

// Distribution is an auto generated Go binding around an Ethereum contract.
type Distribution struct {
	DistributionCaller     // Read-only binding to the contract
	DistributionTransactor // Write-only binding to the contract
	DistributionFilterer   // Log filterer for contract events
}

// DistributionCaller is an auto generated read-only Go binding around an Ethereum contract.
type DistributionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DistributionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DistributionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DistributionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DistributionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DistributionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DistributionSession struct {
	Contract     *Distribution     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DistributionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DistributionCallerSession struct {
	Contract *DistributionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DistributionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DistributionTransactorSession struct {
	Contract     *DistributionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DistributionRaw is an auto generated low-level Go binding around an Ethereum contract.
type DistributionRaw struct {
	Contract *Distribution // Generic contract binding to access the raw methods on
}

// DistributionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DistributionCallerRaw struct {
	Contract *DistributionCaller // Generic read-only contract binding to access the raw methods on
}

// DistributionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DistributionTransactorRaw struct {
	Contract *DistributionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDistribution creates a new instance of Distribution, bound to a specific deployed contract.
func NewDistribution(address common.Address, backend bind.ContractBackend) (*Distribution, error) {
	contract, err := bindDistribution(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Distribution{DistributionCaller: DistributionCaller{contract: contract}, DistributionTransactor: DistributionTransactor{contract: contract}, DistributionFilterer: DistributionFilterer{contract: contract}}, nil
}

// NewDistributionCaller creates a new read-only instance of Distribution, bound to a specific deployed contract.
func NewDistributionCaller(address common.Address, caller bind.ContractCaller) (*DistributionCaller, error) {
	contract, err := bindDistribution(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DistributionCaller{contract: contract}, nil
}

// NewDistributionTransactor creates a new write-only instance of Distribution, bound to a specific deployed contract.
func NewDistributionTransactor(address common.Address, transactor bind.ContractTransactor) (*DistributionTransactor, error) {
	contract, err := bindDistribution(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DistributionTransactor{contract: contract}, nil
}

// NewDistributionFilterer creates a new log filterer instance of Distribution, bound to a specific deployed contract.
func NewDistributionFilterer(address common.Address, filterer bind.ContractFilterer) (*DistributionFilterer, error) {
	contract, err := bindDistribution(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DistributionFilterer{contract: contract}, nil
}

// bindDistribution binds a generic wrapper to an already deployed contract.
func bindDistribution(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DistributionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Distribution *DistributionRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Distribution.Contract.DistributionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Distribution *DistributionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Distribution.Contract.DistributionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Distribution *DistributionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Distribution.Contract.DistributionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Distribution *DistributionCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Distribution.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Distribution *DistributionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Distribution.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Distribution *DistributionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Distribution.Contract.contract.Transact(opts, method, params...)
}

// STARTDISTRIBUTION is a free data retrieval call binding the contract method 0x7148ce35.
//
// Solidity: function START_DISTRIBUTION() constant returns(bytes32)
func (_Distribution *DistributionCaller) STARTDISTRIBUTION(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "START_DISTRIBUTION")
	return *ret0, err
}

// STARTDISTRIBUTION is a free data retrieval call binding the contract method 0x7148ce35.
//
// Solidity: function START_DISTRIBUTION() constant returns(bytes32)
func (_Distribution *DistributionSession) STARTDISTRIBUTION() ([32]byte, error) {
	return _Distribution.Contract.STARTDISTRIBUTION(&_Distribution.CallOpts)
}

// STARTDISTRIBUTION is a free data retrieval call binding the contract method 0x7148ce35.
//
// Solidity: function START_DISTRIBUTION() constant returns(bytes32)
func (_Distribution *DistributionCallerSession) STARTDISTRIBUTION() ([32]byte, error) {
	return _Distribution.Contract.STARTDISTRIBUTION(&_Distribution.CallOpts)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Distribution *DistributionCaller) AddrNode(opts *bind.CallOpts, _addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "addrNode", _addr)
	return *ret0, err
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Distribution *DistributionSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Distribution.Contract.AddrNode(&_Distribution.CallOpts, _addr)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Distribution *DistributionCallerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Distribution.Contract.AddrNode(&_Distribution.CallOpts, _addr)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Distribution *DistributionCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Distribution *DistributionSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Distribution.Contract.AllowRecoverability(&_Distribution.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Distribution *DistributionCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Distribution.Contract.AllowRecoverability(&_Distribution.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Distribution *DistributionCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Distribution *DistributionSession) AppId() ([32]byte, error) {
	return _Distribution.Contract.AppId(&_Distribution.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Distribution *DistributionCallerSession) AppId() ([32]byte, error) {
	return _Distribution.Contract.AppId(&_Distribution.CallOpts)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Distribution *DistributionCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Distribution *DistributionSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Distribution.Contract.CanPerform(&_Distribution.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Distribution *DistributionCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Distribution.Contract.CanPerform(&_Distribution.CallOpts, _sender, _role, _params)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Distribution *DistributionCaller) CheckProof(opts *bind.CallOpts, root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "checkProof", root, proof, hash)
	return *ret0, err
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Distribution *DistributionSession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Distribution.Contract.CheckProof(&_Distribution.CallOpts, root, proof, hash)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Distribution *DistributionCallerSession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Distribution.Contract.CheckProof(&_Distribution.CallOpts, root, proof, hash)
}

// Claimed is a free data retrieval call binding the contract method 0x95989ed0.
//
// Solidity: function claimed(bytes32 _root, string _username) constant returns(bool)
func (_Distribution *DistributionCaller) Claimed(opts *bind.CallOpts, _root [32]byte, _username string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "claimed", _root, _username)
	return *ret0, err
}

// Claimed is a free data retrieval call binding the contract method 0x95989ed0.
//
// Solidity: function claimed(bytes32 _root, string _username) constant returns(bool)
func (_Distribution *DistributionSession) Claimed(_root [32]byte, _username string) (bool, error) {
	return _Distribution.Contract.Claimed(&_Distribution.CallOpts, _root, _username)
}

// Claimed is a free data retrieval call binding the contract method 0x95989ed0.
//
// Solidity: function claimed(bytes32 _root, string _username) constant returns(bool)
func (_Distribution *DistributionCallerSession) Claimed(_root [32]byte, _username string) (bool, error) {
	return _Distribution.Contract.Claimed(&_Distribution.CallOpts, _root, _username)
}

// Distributions is a free data retrieval call binding the contract method 0xdd0e6215.
//
// Solidity: function distributions(bytes32 ) constant returns(bool active)
func (_Distribution *DistributionCaller) Distributions(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "distributions", arg0)
	return *ret0, err
}

// Distributions is a free data retrieval call binding the contract method 0xdd0e6215.
//
// Solidity: function distributions(bytes32 ) constant returns(bool active)
func (_Distribution *DistributionSession) Distributions(arg0 [32]byte) (bool, error) {
	return _Distribution.Contract.Distributions(&_Distribution.CallOpts, arg0)
}

// Distributions is a free data retrieval call binding the contract method 0xdd0e6215.
//
// Solidity: function distributions(bytes32 ) constant returns(bool active)
func (_Distribution *DistributionCallerSession) Distributions(arg0 [32]byte) (bool, error) {
	return _Distribution.Contract.Distributions(&_Distribution.CallOpts, arg0)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Distribution *DistributionCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Distribution *DistributionSession) Ens() (common.Address, error) {
	return _Distribution.Contract.Ens(&_Distribution.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Distribution *DistributionCallerSession) Ens() (common.Address, error) {
	return _Distribution.Contract.Ens(&_Distribution.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Distribution *DistributionCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Distribution *DistributionSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Distribution.Contract.GetEVMScriptExecutor(&_Distribution.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Distribution *DistributionCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Distribution.Contract.GetEVMScriptExecutor(&_Distribution.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Distribution *DistributionCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Distribution *DistributionSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Distribution.Contract.GetEVMScriptRegistry(&_Distribution.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Distribution *DistributionCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Distribution.Contract.GetEVMScriptRegistry(&_Distribution.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Distribution *DistributionCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Distribution *DistributionSession) GetInitializationBlock() (*big.Int, error) {
	return _Distribution.Contract.GetInitializationBlock(&_Distribution.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Distribution *DistributionCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Distribution.Contract.GetInitializationBlock(&_Distribution.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Distribution *DistributionCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Distribution *DistributionSession) GetRecoveryVault() (common.Address, error) {
	return _Distribution.Contract.GetRecoveryVault(&_Distribution.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Distribution *DistributionCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Distribution.Contract.GetRecoveryVault(&_Distribution.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Distribution *DistributionCaller) GetRootsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "getRootsCount")
	return *ret0, err
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Distribution *DistributionSession) GetRootsCount() (*big.Int, error) {
	return _Distribution.Contract.GetRootsCount(&_Distribution.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Distribution *DistributionCallerSession) GetRootsCount() (*big.Int, error) {
	return _Distribution.Contract.GetRootsCount(&_Distribution.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Distribution *DistributionCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Distribution *DistributionSession) HasInitialized() (bool, error) {
	return _Distribution.Contract.HasInitialized(&_Distribution.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Distribution *DistributionCallerSession) HasInitialized() (bool, error) {
	return _Distribution.Contract.HasInitialized(&_Distribution.CallOpts)
}

// Hash is a free data retrieval call binding the contract method 0xbe25270f.
//
// Solidity: function hash(string _username, uint256 _award) constant returns(bytes32 hash)
func (_Distribution *DistributionCaller) Hash(opts *bind.CallOpts, _username string, _award *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "hash", _username, _award)
	return *ret0, err
}

// Hash is a free data retrieval call binding the contract method 0xbe25270f.
//
// Solidity: function hash(string _username, uint256 _award) constant returns(bytes32 hash)
func (_Distribution *DistributionSession) Hash(_username string, _award *big.Int) ([32]byte, error) {
	return _Distribution.Contract.Hash(&_Distribution.CallOpts, _username, _award)
}

// Hash is a free data retrieval call binding the contract method 0xbe25270f.
//
// Solidity: function hash(string _username, uint256 _award) constant returns(bytes32 hash)
func (_Distribution *DistributionCallerSession) Hash(_username string, _award *big.Int) ([32]byte, error) {
	return _Distribution.Contract.Hash(&_Distribution.CallOpts, _username, _award)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _address) constant returns(bytes32 hash)
func (_Distribution *DistributionCaller) HashAddress(opts *bind.CallOpts, _address common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "hashAddress", _address)
	return *ret0, err
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _address) constant returns(bytes32 hash)
func (_Distribution *DistributionSession) HashAddress(_address common.Address) ([32]byte, error) {
	return _Distribution.Contract.HashAddress(&_Distribution.CallOpts, _address)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _address) constant returns(bytes32 hash)
func (_Distribution *DistributionCallerSession) HashAddress(_address common.Address) ([32]byte, error) {
	return _Distribution.Contract.HashAddress(&_Distribution.CallOpts, _address)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Distribution *DistributionCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Distribution *DistributionSession) IsPetrified() (bool, error) {
	return _Distribution.Contract.IsPetrified(&_Distribution.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Distribution *DistributionCallerSession) IsPetrified() (bool, error) {
	return _Distribution.Contract.IsPetrified(&_Distribution.CallOpts)
}

// KarmaManager is a free data retrieval call binding the contract method 0x75e3d330.
//
// Solidity: function karmaManager() constant returns(address)
func (_Distribution *DistributionCaller) KarmaManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "karmaManager")
	return *ret0, err
}

// KarmaManager is a free data retrieval call binding the contract method 0x75e3d330.
//
// Solidity: function karmaManager() constant returns(address)
func (_Distribution *DistributionSession) KarmaManager() (common.Address, error) {
	return _Distribution.Contract.KarmaManager(&_Distribution.CallOpts)
}

// KarmaManager is a free data retrieval call binding the contract method 0x75e3d330.
//
// Solidity: function karmaManager() constant returns(address)
func (_Distribution *DistributionCallerSession) KarmaManager() (common.Address, error) {
	return _Distribution.Contract.KarmaManager(&_Distribution.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Distribution *DistributionCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Distribution *DistributionSession) Kernel() (common.Address, error) {
	return _Distribution.Contract.Kernel(&_Distribution.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Distribution *DistributionCallerSession) Kernel() (common.Address, error) {
	return _Distribution.Contract.Kernel(&_Distribution.CallOpts)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Distribution *DistributionCaller) NameNode(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "nameNode", _username)
	return *ret0, err
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Distribution *DistributionSession) NameNode(_username string) ([32]byte, error) {
	return _Distribution.Contract.NameNode(&_Distribution.CallOpts, _username)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Distribution *DistributionCallerSession) NameNode(_username string) ([32]byte, error) {
	return _Distribution.Contract.NameNode(&_Distribution.CallOpts, _username)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Distribution *DistributionCaller) NameOfOwner(opts *bind.CallOpts, _owner common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "nameOfOwner", _owner)
	return *ret0, err
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Distribution *DistributionSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Distribution.Contract.NameOfOwner(&_Distribution.CallOpts, _owner)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Distribution *DistributionCallerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Distribution.Contract.NameOfOwner(&_Distribution.CallOpts, _owner)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Distribution *DistributionCaller) OwnerOfName(opts *bind.CallOpts, _username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "ownerOfName", _username)
	return *ret0, err
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Distribution *DistributionSession) OwnerOfName(_username string) (common.Address, error) {
	return _Distribution.Contract.OwnerOfName(&_Distribution.CallOpts, _username)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Distribution *DistributionCallerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Distribution.Contract.OwnerOfName(&_Distribution.CallOpts, _username)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Distribution *DistributionCaller) Resolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "resolver")
	return *ret0, err
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Distribution *DistributionSession) Resolver() (common.Address, error) {
	return _Distribution.Contract.Resolver(&_Distribution.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Distribution *DistributionCallerSession) Resolver() (common.Address, error) {
	return _Distribution.Contract.Resolver(&_Distribution.CallOpts)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Distribution *DistributionCaller) Roots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "roots", arg0)
	return *ret0, err
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Distribution *DistributionSession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Distribution.Contract.Roots(&_Distribution.CallOpts, arg0)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Distribution *DistributionCallerSession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Distribution.Contract.Roots(&_Distribution.CallOpts, arg0)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Distribution *DistributionCaller) Sha3HexAddress(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "sha3HexAddress", addr)
	return *ret0, err
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Distribution *DistributionSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Distribution.Contract.Sha3HexAddress(&_Distribution.CallOpts, addr)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Distribution *DistributionCallerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Distribution.Contract.Sha3HexAddress(&_Distribution.CallOpts, addr)
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Distribution *DistributionCaller) TokenManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "tokenManager")
	return *ret0, err
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Distribution *DistributionSession) TokenManager() (common.Address, error) {
	return _Distribution.Contract.TokenManager(&_Distribution.CallOpts)
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Distribution *DistributionCallerSession) TokenManager() (common.Address, error) {
	return _Distribution.Contract.TokenManager(&_Distribution.CallOpts)
}

// Validate is a free data retrieval call binding the contract method 0x4ce41a21.
//
// Solidity: function validate(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) constant returns(bool)
func (_Distribution *DistributionCaller) Validate(opts *bind.CallOpts, _root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Distribution.contract.Call(opts, out, "validate", _root, _username, _award, _proof)
	return *ret0, err
}

// Validate is a free data retrieval call binding the contract method 0x4ce41a21.
//
// Solidity: function validate(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) constant returns(bool)
func (_Distribution *DistributionSession) Validate(_root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (bool, error) {
	return _Distribution.Contract.Validate(&_Distribution.CallOpts, _root, _username, _award, _proof)
}

// Validate is a free data retrieval call binding the contract method 0x4ce41a21.
//
// Solidity: function validate(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) constant returns(bool)
func (_Distribution *DistributionCallerSession) Validate(_root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (bool, error) {
	return _Distribution.Contract.Validate(&_Distribution.CallOpts, _root, _username, _award, _proof)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Distribution *DistributionTransactor) AddRoot(opts *bind.TransactOpts, _root [32]byte) (*types.Transaction, error) {
	return _Distribution.contract.Transact(opts, "addRoot", _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Distribution *DistributionSession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.AddRoot(&_Distribution.TransactOpts, _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Distribution *DistributionTransactorSession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.AddRoot(&_Distribution.TransactOpts, _root)
}

// Award is a paid mutator transaction binding the contract method 0xfa72203e.
//
// Solidity: function award(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) returns()
func (_Distribution *DistributionTransactor) Award(opts *bind.TransactOpts, _root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (*types.Transaction, error) {
	return _Distribution.contract.Transact(opts, "award", _root, _username, _award, _proof)
}

// Award is a paid mutator transaction binding the contract method 0xfa72203e.
//
// Solidity: function award(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) returns()
func (_Distribution *DistributionSession) Award(_root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.Award(&_Distribution.TransactOpts, _root, _username, _award, _proof)
}

// Award is a paid mutator transaction binding the contract method 0xfa72203e.
//
// Solidity: function award(bytes32 _root, string _username, uint256 _award, bytes32[] _proof) returns()
func (_Distribution *DistributionTransactorSession) Award(_root [32]byte, _username string, _award *big.Int, _proof [][32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.Award(&_Distribution.TransactOpts, _root, _username, _award, _proof)
}

// Initialize is a paid mutator transaction binding the contract method 0x63acc14d.
//
// Solidity: function initialize(address _ens, address _tokenManager, address _karmaManager, bytes32 _root) returns()
func (_Distribution *DistributionTransactor) Initialize(opts *bind.TransactOpts, _ens common.Address, _tokenManager common.Address, _karmaManager common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Distribution.contract.Transact(opts, "initialize", _ens, _tokenManager, _karmaManager, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x63acc14d.
//
// Solidity: function initialize(address _ens, address _tokenManager, address _karmaManager, bytes32 _root) returns()
func (_Distribution *DistributionSession) Initialize(_ens common.Address, _tokenManager common.Address, _karmaManager common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.Initialize(&_Distribution.TransactOpts, _ens, _tokenManager, _karmaManager, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x63acc14d.
//
// Solidity: function initialize(address _ens, address _tokenManager, address _karmaManager, bytes32 _root) returns()
func (_Distribution *DistributionTransactorSession) Initialize(_ens common.Address, _tokenManager common.Address, _karmaManager common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Distribution.Contract.Initialize(&_Distribution.TransactOpts, _ens, _tokenManager, _karmaManager, _root)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Distribution *DistributionTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Distribution.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Distribution *DistributionSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Distribution.Contract.TransferToVault(&_Distribution.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Distribution *DistributionTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Distribution.Contract.TransferToVault(&_Distribution.TransactOpts, _token)
}

// DistributionDistributionStartedIterator is returned from FilterDistributionStarted and is used to iterate over the raw logs and unpacked data for DistributionStarted events raised by the Distribution contract.
type DistributionDistributionStartedIterator struct {
	Event *DistributionDistributionStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DistributionDistributionStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DistributionDistributionStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DistributionDistributionStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DistributionDistributionStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DistributionDistributionStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DistributionDistributionStarted represents a DistributionStarted event raised by the Distribution contract.
type DistributionDistributionStarted struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDistributionStarted is a free log retrieval operation binding the contract event 0xf6faee587b08bb9aaa7bd5c4a49531168d1ef9e3f510bf4d47586426baf76b48.
//
// Solidity: event DistributionStarted(bytes32 root)
func (_Distribution *DistributionFilterer) FilterDistributionStarted(opts *bind.FilterOpts) (*DistributionDistributionStartedIterator, error) {

	logs, sub, err := _Distribution.contract.FilterLogs(opts, "DistributionStarted")
	if err != nil {
		return nil, err
	}
	return &DistributionDistributionStartedIterator{contract: _Distribution.contract, event: "DistributionStarted", logs: logs, sub: sub}, nil
}

// WatchDistributionStarted is a free log subscription operation binding the contract event 0xf6faee587b08bb9aaa7bd5c4a49531168d1ef9e3f510bf4d47586426baf76b48.
//
// Solidity: event DistributionStarted(bytes32 root)
func (_Distribution *DistributionFilterer) WatchDistributionStarted(opts *bind.WatchOpts, sink chan<- *DistributionDistributionStarted) (event.Subscription, error) {

	logs, sub, err := _Distribution.contract.WatchLogs(opts, "DistributionStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DistributionDistributionStarted)
				if err := _Distribution.contract.UnpackLog(event, "DistributionStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DistributionRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Distribution contract.
type DistributionRecoverToVaultIterator struct {
	Event *DistributionRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DistributionRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DistributionRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DistributionRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DistributionRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DistributionRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DistributionRecoverToVault represents a RecoverToVault event raised by the Distribution contract.
type DistributionRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Distribution *DistributionFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*DistributionRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Distribution.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &DistributionRecoverToVaultIterator{contract: _Distribution.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Distribution *DistributionFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *DistributionRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Distribution.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DistributionRecoverToVault)
				if err := _Distribution.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DistributionScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Distribution contract.
type DistributionScriptResultIterator struct {
	Event *DistributionScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DistributionScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DistributionScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DistributionScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DistributionScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DistributionScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DistributionScriptResult represents a ScriptResult event raised by the Distribution contract.
type DistributionScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Distribution *DistributionFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*DistributionScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Distribution.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &DistributionScriptResultIterator{contract: _Distribution.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Distribution *DistributionFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *DistributionScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Distribution.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DistributionScriptResult)
				if err := _Distribution.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DistributionUserAwardedIterator is returned from FilterUserAwarded and is used to iterate over the raw logs and unpacked data for UserAwarded events raised by the Distribution contract.
type DistributionUserAwardedIterator struct {
	Event *DistributionUserAwarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DistributionUserAwardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DistributionUserAwarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DistributionUserAwarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DistributionUserAwardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DistributionUserAwardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DistributionUserAwarded represents a UserAwarded event raised by the Distribution contract.
type DistributionUserAwarded struct {
	Root     [32]byte
	Username string
	Award    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUserAwarded is a free log retrieval operation binding the contract event 0x5db912b3a25f92fa3a44f8ac88539a801b2846e1b33f6734b91b58d438b51687.
//
// Solidity: event UserAwarded(bytes32 root, string username, uint256 award)
func (_Distribution *DistributionFilterer) FilterUserAwarded(opts *bind.FilterOpts) (*DistributionUserAwardedIterator, error) {

	logs, sub, err := _Distribution.contract.FilterLogs(opts, "UserAwarded")
	if err != nil {
		return nil, err
	}
	return &DistributionUserAwardedIterator{contract: _Distribution.contract, event: "UserAwarded", logs: logs, sub: sub}, nil
}

// WatchUserAwarded is a free log subscription operation binding the contract event 0x5db912b3a25f92fa3a44f8ac88539a801b2846e1b33f6734b91b58d438b51687.
//
// Solidity: event UserAwarded(bytes32 root, string username, uint256 award)
func (_Distribution *DistributionFilterer) WatchUserAwarded(opts *bind.WatchOpts, sink chan<- *DistributionUserAwarded) (event.Subscription, error) {

	logs, sub, err := _Distribution.contract.WatchLogs(opts, "UserAwarded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DistributionUserAwarded)
				if err := _Distribution.contract.UnpackLog(event, "UserAwarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
