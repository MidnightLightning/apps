// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"registerSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sha3HexAddress\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hashAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"hashString\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nameOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"nameNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"ownerOfName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRootsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_REGISTRATION_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferRootNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"activeRegPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNodeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"addRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deregisterSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_ROOT_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownsRootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RegistrationPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RootNodeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
const RegistryBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f7640100000000026200410f176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e6001026000191662000302640100000000026200546c179091906401000000009004565b50565b600081549050919050565b8082555050565b615b8380620003196000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec146101dd5780630803fac014610234578063108abc0d146102635780631ca910aa146102c457806327b752b8146103b65780632914b9bd1461041557806332f0a3b5146104be5780633aa5fe59146105155780633f15457f14610574578063611f5764146105cb578063766954b4146106655780637cb7acf7146106ea5780637cdd5edb146107a65780637e7db6e11461082b5780637f8737491461088657806380afdea81461092f5780638b3dd749146109625780639423fc6e1461098d578063958c18ac146109b85780639b2f7940146109eb5780639d4941d814610a2e578063a1658fad14610a71578063a3ace17714610b1d578063a479e50814610bc2578063a575e34914610c19578063af04b57a14610c62578063be13f47c14610cb9578063c0774df314610d0a578063c2b40ae414610dab578063d4aae0c414610df4578063d59e646114610e4b578063d948d46814610e7c578063d9f2b5f914610ee5578063de4796ed14610f44578063e17b8a2914610f73578063f38a7b4414610f8a578063f5f2831114610fbd578063fd64eccb14610fec575b600080fd5b3480156101e957600080fd5b506101f261101b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024057600080fd5b50610249611040565b604051808215151515815260200191505060405180910390f35b34801561026f57600080fd5b506102c2600480360381019080803560001916906020019092919080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939050505061106b565b005b3480156102d057600080fd5b5061039c6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061153e565b604051808215151515815260200191505060405180910390f35b3480156103c257600080fd5b506103f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ff565b60405180826000191660001916815260200191505060405180910390f35b34801561042157600080fd5b5061047c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611669565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ca57600080fd5b506104d3611788565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052157600080fd5b50610556600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611835565b60405180826000191660001916815260200191505060405180910390f35b34801561058057600080fd5b5061058961188f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d757600080fd5b5061064b60048036038101908080356000191690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080356000191690602001909291905050506118b5565b604051808215151515815260200191505060405180910390f35b34801561067157600080fd5b506106cc600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119a3565b60405180826000191660001916815260200191505060405180910390f35b3480156106f657600080fd5b5061072b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a0f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561076b578082015181840152602081019050610750565b50505050905090810190601f1680156107985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107b257600080fd5b5061080d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b49565b60405180826000191660001916815260200191505060405180910390f35b34801561083757600080fd5b5061086c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c71565b604051808215151515815260200191505060405180910390f35b34801561089257600080fd5b506108ed600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561093b57600080fd5b50610944611d60565b60405180826000191660001916815260200191505060405180910390f35b34801561096e57600080fd5b50610977611d97565b6040518082815260200191505060405180910390f35b34801561099957600080fd5b506109a2611dce565b6040518082815260200191505060405180910390f35b3480156109c457600080fd5b506109cd611ddb565b60405180826000191660001916815260200191505060405180910390f35b3480156109f757600080fd5b50610a2c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e02565b005b348015610a3a57600080fd5b50610a6f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120af565b005b348015610a7d57600080fd5b50610b03600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506124cd565b604051808215151515815260200191505060405180910390f35b348015610b2957600080fd5b50610ba4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506126d4565b60405180826000191660001916815260200191505060405180910390f35b348015610bce57600080fd5b50610bd7612784565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c2557600080fd5b50610c48600480360381019080803560001916906020019092919050505061289f565b604051808215151515815260200191505060405180910390f35b348015610c6e57600080fd5b50610c776128bf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cc557600080fd5b50610d08600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291905050506129bd565b005b348015610d1657600080fd5b50610d91600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612bfc565b604051808215151515815260200191505060405180910390f35b348015610db757600080fd5b50610dd660048036038101908080359060200190929190505050612d4c565b60405180826000191660001916815260200191505060405180910390f35b348015610e0057600080fd5b50610e09612d6f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e5757600080fd5b50610e7a6004803603810190808035600019169060200190929190505050612da6565b005b348015610e8857600080fd5b50610ee3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613000565b005b348015610ef157600080fd5b50610f26600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613134565b60405180826000191660001916815260200191505060405180910390f35b348015610f5057600080fd5b50610f59613202565b604051808215151515815260200191505060405180910390f35b348015610f7f57600080fd5b50610f88613233565b005b348015610f9657600080fd5b50610f9f613332565b60405180826000191660001916815260200191505060405180910390f35b348015610fc957600080fd5b50610fd2613359565b604051808215151515815260200191505060405180910390f35b348015610ff857600080fd5b50611001613485565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061104b611d97565b90506000811415801561106557508061106261348e565b10155b91505090565b6001151560036000876000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280601d81526020017f4e4f5f4143544956455f524547495354524154494f4e5f504552494f44000000815250901515611179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561113e578082015181840152602081019050611123565b50505050905090810190601f16801561116b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166111cd85858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611c7c565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601381526020017f524547495354524154494f4e5f455849535453000000000000000000000000008152509015156112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561128757808201518184015260208101905061126c565b50505050905090810190601f1680156112b45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006112ce33611a0f565b51146040805190810160405280601381526020017f524547495354524154494f4e5f455849535453000000000000000000000000008152509015156113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611373578082015181840152602081019050611358565b50505050905090810190601f1680156113a05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061141c853386868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505085858080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505061153e565b6040805190810160405280600781526020017f494e56414c4944000000000000000000000000000000000000000000000000008152509015156114fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114bf5780820151818401526020810190506114a4565b50505050905090810190601f1680156114ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506115373385858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613496565b5050505050565b6000808484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831015156115b95780518252602082019150602081019050602083039250611594565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051809103902090506115f48684836118b5565b915050949350505050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b600081111561165b5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350611625565b506028600020915050919050565b6000611673612784565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116fa5780820151818401526020810190506116df565b50505050905090810190601f1680156117275780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b505050506040513d602081101561177057600080fd5b81019080805190602001909291905050509050919050565b6000611792612d6f565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117f557600080fd5b505af1158015611809573d6000803e3d6000fd5b505050506040513d602081101561181f57600080fd5b8101908080519060200190929190505050905090565b600081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b835181101561198e5783818151811015156118d457fe5b906020019060200201516000191683600019161015611939578284828151811015156118fc57fe5b9060200190602002015160405180836000191660001916815260200182600019166000191681526020019250505060405180910390209250611981565b838181518110151561194757fe5b9060200190602002015183604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092505b80806001019150506118bd565b84600019168360001916149150509392505050565b6000816040518082805190602001908083835b6020831015156119db57805182526020820191506020810190506020830392506119b6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f3431611a5784613134565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611ab157600080fd5b505af1158015611ac5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611aef57600080fd5b810190808051640100000000811115611b0757600080fd5b82810190506020810184811115611b1d57600080fd5b8151856001820283011164010000000082111715611b3a57600080fd5b50509291905050509050919050565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102826040518082805190602001908083835b602083101515611ba55780518252602082019150602081019050602083039250611b80565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611c3d5780518252602082019150602081019050602083039250611c18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de611cc484611b49565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b505050506040513d6020811015611d4857600080fd5b81019080805190602001909291905050509050919050565b6000611d927fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b60010260001916614104565b905090565b6000611dc97febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e6001026000191661410f565b905090565b6000600280549050905090565b7fd31f4ba181fa04f6e556e75747124c08760a53dec98821ac56200ec037aa2bb760010281565b7f371d57b5d5e36ffacd760261ee1986c14c5a44484f6cd32d970413d31467313e600102611e6133826000604051908082528060200260200182016040528015611e5b5781602001602082028038833980820191505090505b506124cd565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515611f3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f04578082015181840152602081019050611ee9565b50505050905090810190601f168015611f315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c37fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561203057600080fd5b505af1158015612044573d6000803e3d6000fd5b505050507f7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060006120bd84611c71565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f574544000000000000000000000000000081525090151561219b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612160578082015181840152602081019050612145565b50505050905090810190601f16801561218d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506121a4611788565b92506121af8361411a565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000081525090151561228d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612252578082015181840152602081019050612237565b50505050905090810190601f16801561227f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612329573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612323573d6000803e3d6000fd5b50612462565b839050612355308273ffffffffffffffffffffffffffffffffffffffff1661416c90919063ffffffff16565b915061238283838373ffffffffffffffffffffffffffffffffffffffff166143469092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c4544000000815250901515612460576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561242557808201518184015260208101905061240a565b50505050905090810190601f1680156124525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080606060006124dc611040565b15156124eb57600093506126ca565b6124f3612d6f565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561253357600093506126ca565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561263d578082015181840152602081019050612622565b50505050905090810190601f16801561266a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561268c57600080fd5b505af11580156126a0573d6000803e3d6000fd5b505050506040513d60208110156126b657600080fd5b810190808051906020019092919050505093505b5050509392505050565b60008282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b60208310151561274e5780518252602082019150602081019050602083039250612729565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040518091039020905092915050565b60008061278f612d6f565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b15801561285b57600080fd5b505af115801561286f573d6000803e3d6000fd5b505050506040513d602081101561288557600080fd5b810190808051906020019092919050505090508091505090565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e6001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561297d57600080fd5b505af1158015612991573d6000803e3d6000fd5b505050506040513d60208110156129a757600080fd5b8101908080519060200190929190505050905090565b60006129c7611d97565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515612aa6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a6b578082015181840152602081019050612a50565b50505050905090810190601f168015612a985780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612aaf614426565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612bef600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf7ffdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f56001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612baf57600080fd5b505af1158015612bc3573d6000803e3d6000fd5b505050506040513d6020811015612bd957600080fd5b8101908080519060200190929190505050614553565b612bf881614596565b5050565b6000612c06611040565b8015612d44575060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f3431612c5586613134565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015612caf57600080fd5b505af1158015612cc3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612ced57600080fd5b810190808051640100000000811115612d0557600080fd5b82810190506020810184811115612d1b57600080fd5b8151856001820283011164010000000082111715612d3857600080fd5b50509291905050505114155b905092915050565b600281815481101515612d5b57fe5b906000526020600020016000915090505481565b6000612da17f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b6001026000191661463e565b905090565b7fd31f4ba181fa04f6e556e75747124c08760a53dec98821ac56200ec037aa2bb7600102612e0533826000604051908082528060200260200182016040528015612dff5781602001602082028038833980820191505090505b506124cd565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612ee3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ea8578082015181840152602081019050612e8d565b50505050905090810190601f168015612ed55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000151560036000846000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280601a81526020017f524547495354524154494f4e5f504552494f445f455849535453000000000000815250901515612ff2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fb7578082015181840152602081019050612f9c565b50505050905090810190601f168015612fe45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612ffc82614596565b5050565b60608061300d3384612bfc565b6040805190810160405280601881526020017f52454749535452595f43414e5f4e4f545f464f525741524400000000000000008152509015156130eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156130b0578082015181840152602081019050613095565b50505050905090810190601f1680156130dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006040519080825280601f01601f1916602001820160405280156131205781602001602082028038833980820191505090505b50915061312e838383614649565b50505050565b60007fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102613163836115ff565b6040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156131ce57805182526020820191506020810190506020830392506131a9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61322d611d97565b14905090565b606061323e33611a0f565b90506000815114156040805190810160405280601681526020017f524547495354524154494f4e5f4e4f545f464f554e4400000000000000000000815250901515613324576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156132e95780820151818401526020810190506132ce565b50505050905090810190601f1680156133165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061332f3382614f46565b50565b7f371d57b5d5e36ffacd760261ee1986c14c5a44484f6cd32d970413d31467313e60010281565b60003073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e6001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d602081101561345857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905090565b60006001905090565b600043905090565b6000806000806134a5866115ff565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010286306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b505050507fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102846040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561364f578051825260208201915060208101905060208303925061362a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221384876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561373657808201518184015260208101905061371b565b50505050905090810190601f1680156137635780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561378357600080fd5b505af1158015613797573d6000803e3d6000fd5b50505050846040516020018082805190602001908083835b6020831015156137d457805182526020820191506020810190506020830392506137af565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561383d5780518252602082019150602081019050602083039250613818565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561390657600080fd5b505af115801561391a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561394457600080fd5b81019080805164010000000081111561395c57600080fd5b8281019050602081018481111561397257600080fd5b815185600182028301116401000000008211171561398f57600080fd5b50509291905050506040516020018082805190602001908083835b6020831015156139cf57805182526020820191506020810190506020830392506139aa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515613a385780518252602082019150602081019050602083039250613a13565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916146040805190810160405280600c81526020017f4e414d455f4e4f545f5345540000000000000000000000000000000000000000815250901515613b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613b0d578082015181840152602081019050613af2565b50505050905090810190601f168015613b3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846040518082805190602001908083835b602083101515613b7f5780518252602082019150602081019050602083039250613b5a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010284306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015613cae57600080fd5b505af1158015613cc2573d6000803e3d6000fd5b505050507fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e600102826040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515613d565780518252602082019150602081019050602083039250613d31565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015613e5157600080fd5b505af1158015613e65573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015613f1857600080fd5b505af1158015613f2c573d6000803e3d6000fd5b505050506040513d6020811015613f4257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280600c81526020017f414444525f4e4f545f5345540000000000000000000000000000000000000000815250901515614048576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561400d578082015181840152602081019050613ff2565b50505050905090810190601f16801561403a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff167fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132866040518080602001828103825283818151815260200191508051906020019080838360005b838110156140c25780820151818401526020810190506140a7565b50505050905090810190601f1680156140ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390a2505050505050565b600081549050919050565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561415b5760009150614166565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050925061425686846153e5565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f524556455254454400000000815250901515614339576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156142fe5780820151818401526020810190506142e3565b50505050905090810190601f16801561432b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061441c858261541a565b9150509392505050565b6000614430611d97565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151561450f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156144d45780820151818401526020810190506144b9565b50505050905090810190601f1680156145015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061455161451b61348e565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e6001026000191661546c90919063ffffffff16565b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600160036000836000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba38160405180826000191660001916815260200191505060405180910390a150565b600081549050919050565b6060600080606080614659611040565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a4544000000000000000000000000815250901515614737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156146fc5780820151818401526020810190506146e1565b50505050905090810190601f1680156147295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080614743612d6f565b915061474d611d60565b90506147588a611669565b9550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000815250901515614869576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561482e578082015181840152602081019050614813565b50505050905090810190601f16801561485b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff1663279cea3590507c0100000000000000000000000000000000000000000000000000000000029450848a8a8a60405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156148f85780820151818401526020810190506148dd565b50505050905090810190601f1680156149255780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561495e578082015181840152602081019050614943565b50505050905090810190601f16801561498b5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b838110156149c75780820151818401526020810190506149ac565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093508573ffffffffffffffffffffffffffffffffffffffff168460405180828051906020019080838360005b83811015614a7a578082015181840152602081019050614a5f565b50505050905090810190601f168015614aa75780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150506040805190810160405280601981526020017f45564d52554e5f455845435554494f4e5f524556455254454400000000000000815250901515614b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b5d578082015181840152602081019050614b42565b50505050905090810190601f168015614b8a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50614ba1615473565b92508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015614c26578082015181840152602081019050614c0b565b50505050905090810190601f168015614c535780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015614c8c578082015181840152602081019050614c71565b50505050905090810190601f168015614cb95780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015614cf2578082015181840152602081019050614cd7565b50505050905090810190601f168015614d1f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16614d52612d6f565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614e47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614e0c578082015181840152602081019050614df1565b50505050905090810190601f168015614e395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060001916614e55611d60565b60001916146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614f38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614efd578082015181840152602081019050614ee2565b50505050905090810190601f168015614f2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050509392505050565b600080614f5284613134565b91503073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561500457600080fd5b505af1158015615018573d6000803e3d6000fd5b505050506040513d602081101561502e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561506657615065846154a3565b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377372213836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020018060200182810382526000815260200160200192505050600060405180830381600087803b15801561511257600080fd5b505af1158015615126573d6000803e3d6000fd5b5050505061513383611b49565b90503073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156151e557600080fd5b505af11580156151f9573d6000803e3d6000fd5b505050506040513d602081101561520f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561524757615246836157d0565b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b008260006040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561531457600080fd5b505af1158015615328573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1846040518080602001828103825283818151815260200191508051906020019080838360005b838110156153a557808201518184015260208101905061538a565b50505050905090810190601f1680156153d25780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050565b6000806000806040516020818751602089018a5afa9250600083111561540a57805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af16000811115615460573d6000811461544d57602081146154565761545e565b6001935061545e565b600183511493505b505b50508091505092915050565b8082555050565b60603d806000811461549a576040519250602082018301604052602082036020843e61549b565b5b505080905090565b60003073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e6001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561557857600080fd5b505af115801561558c573d6000803e3d6000fd5b505050506040513d60208110156155a257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601281526020017f52454749535452595f4e4f545f4f574e455200000000000000000000000000008152509015156156a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561566d578082015181840152602081019050615652565b50505050905090810190601f16801561569a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506156b2826115ff565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010283306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156157b457600080fd5b505af11580156157c8573d6000803e3d6000fd5b505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e6001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156158a557600080fd5b505af11580156158b9573d6000803e3d6000fd5b505050506040513d60208110156158cf57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601281526020017f52454749535452595f4e4f545f4f574e455200000000000000000000000000008152509015156159d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561599a57808201518184015260208101905061597f565b50505050905090810190601f1680156159c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50816040518082805190602001908083835b602083101515615a0c57805182526020820191506020810190506020830392506159e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237fbaa9d81065b9803396ee6ad9faedd650a35f2b9ba9849babde99d4cdbf705a2e60010283306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015615b3b57600080fd5b505af1158015615b4f573d6000803e3d6000fd5b5050505050505600a165627a7a72305820fc2f989a6e5c786d4b194ccf3222de2a3b787fedb25b12a667f95ccfdb1887140029`

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCaller) STARTREGISTRATIONPERIOD(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "START_REGISTRATION_PERIOD")
	return *ret0, err
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistrySession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCallerSession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistryCaller) TRANSFERROOTNODE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "TRANSFER_ROOT_NODE")
	return *ret0, err
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistrySession) TRANSFERROOTNODE() ([32]byte, error) {
	return _Registry.Contract.TRANSFERROOTNODE(&_Registry.CallOpts)
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistryCallerSession) TRANSFERROOTNODE() ([32]byte, error) {
	return _Registry.Contract.TRANSFERROOTNODE(&_Registry.CallOpts)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCaller) ActiveRegPeriod(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "activeRegPeriod", arg0)
	return *ret0, err
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistrySession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCallerSession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistryCaller) AddrNode(opts *bind.CallOpts, _addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "addrNode", _addr)
	return *ret0, err
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistrySession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Registry.Contract.AddrNode(&_Registry.CallOpts, _addr)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistryCallerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Registry.Contract.AddrNode(&_Registry.CallOpts, _addr)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistrySession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistrySession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCallerSession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistrySession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistrySession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCaller) CheckProof(opts *bind.CallOpts, root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "checkProof", root, proof, hash)
	return *ret0, err
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistrySession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCallerSession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistryCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistrySession) Ens() (common.Address, error) {
	return _Registry.Contract.Ens(&_Registry.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistryCallerSession) Ens() (common.Address, error) {
	return _Registry.Contract.Ens(&_Registry.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistrySession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistrySession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCaller) GetRootsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRootsCount")
	return *ret0, err
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistrySession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCallerSession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistrySession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCallerSession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// Hash is a free data retrieval call binding the contract method 0xa3ace177.
//
// Solidity: function hash(address _owner, string _username) constant returns(bytes32)
func (_Registry *RegistryCaller) Hash(opts *bind.CallOpts, _owner common.Address, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hash", _owner, _username)
	return *ret0, err
}

// Hash is a free data retrieval call binding the contract method 0xa3ace177.
//
// Solidity: function hash(address _owner, string _username) constant returns(bytes32)
func (_Registry *RegistrySession) Hash(_owner common.Address, _username string) ([32]byte, error) {
	return _Registry.Contract.Hash(&_Registry.CallOpts, _owner, _username)
}

// Hash is a free data retrieval call binding the contract method 0xa3ace177.
//
// Solidity: function hash(address _owner, string _username) constant returns(bytes32)
func (_Registry *RegistryCallerSession) Hash(_owner common.Address, _username string) ([32]byte, error) {
	return _Registry.Contract.Hash(&_Registry.CallOpts, _owner, _username)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32)
func (_Registry *RegistryCaller) HashAddress(opts *bind.CallOpts, _owner common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hashAddress", _owner)
	return *ret0, err
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32)
func (_Registry *RegistrySession) HashAddress(_owner common.Address) ([32]byte, error) {
	return _Registry.Contract.HashAddress(&_Registry.CallOpts, _owner)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32)
func (_Registry *RegistryCallerSession) HashAddress(_owner common.Address) ([32]byte, error) {
	return _Registry.Contract.HashAddress(&_Registry.CallOpts, _owner)
}

// HashString is a free data retrieval call binding the contract method 0x766954b4.
//
// Solidity: function hashString(string _username) constant returns(bytes32)
func (_Registry *RegistryCaller) HashString(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hashString", _username)
	return *ret0, err
}

// HashString is a free data retrieval call binding the contract method 0x766954b4.
//
// Solidity: function hashString(string _username) constant returns(bytes32)
func (_Registry *RegistrySession) HashString(_username string) ([32]byte, error) {
	return _Registry.Contract.HashString(&_Registry.CallOpts, _username)
}

// HashString is a free data retrieval call binding the contract method 0x766954b4.
//
// Solidity: function hashString(string _username) constant returns(bytes32)
func (_Registry *RegistryCallerSession) HashString(_username string) ([32]byte, error) {
	return _Registry.Contract.HashString(&_Registry.CallOpts, _username)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistrySession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCallerSession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistrySession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCallerSession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistrySession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCallerSession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistryCaller) NameNode(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "nameNode", _username)
	return *ret0, err
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistrySession) NameNode(_username string) ([32]byte, error) {
	return _Registry.Contract.NameNode(&_Registry.CallOpts, _username)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistryCallerSession) NameNode(_username string) ([32]byte, error) {
	return _Registry.Contract.NameNode(&_Registry.CallOpts, _username)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistryCaller) NameOfOwner(opts *bind.CallOpts, _owner common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "nameOfOwner", _owner)
	return *ret0, err
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistrySession) NameOfOwner(_owner common.Address) (string, error) {
	return _Registry.Contract.NameOfOwner(&_Registry.CallOpts, _owner)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistryCallerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Registry.Contract.NameOfOwner(&_Registry.CallOpts, _owner)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistryCaller) OwnerOfName(opts *bind.CallOpts, _username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ownerOfName", _username)
	return *ret0, err
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistrySession) OwnerOfName(_username string) (common.Address, error) {
	return _Registry.Contract.OwnerOfName(&_Registry.CallOpts, _username)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistryCallerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Registry.Contract.OwnerOfName(&_Registry.CallOpts, _username)
}

// OwnsRootNode is a free data retrieval call binding the contract method 0xf5f28311.
//
// Solidity: function ownsRootNode() constant returns(bool)
func (_Registry *RegistryCaller) OwnsRootNode(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ownsRootNode")
	return *ret0, err
}

// OwnsRootNode is a free data retrieval call binding the contract method 0xf5f28311.
//
// Solidity: function ownsRootNode() constant returns(bool)
func (_Registry *RegistrySession) OwnsRootNode() (bool, error) {
	return _Registry.Contract.OwnsRootNode(&_Registry.CallOpts)
}

// OwnsRootNode is a free data retrieval call binding the contract method 0xf5f28311.
//
// Solidity: function ownsRootNode() constant returns(bool)
func (_Registry *RegistryCallerSession) OwnsRootNode() (bool, error) {
	return _Registry.Contract.OwnsRootNode(&_Registry.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistryCaller) Resolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "resolver")
	return *ret0, err
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistrySession) Resolver() (common.Address, error) {
	return _Registry.Contract.Resolver(&_Registry.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistryCallerSession) Resolver() (common.Address, error) {
	return _Registry.Contract.Resolver(&_Registry.CallOpts)
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistryCaller) RootNodeOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "rootNodeOwner")
	return *ret0, err
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistrySession) RootNodeOwner() (common.Address, error) {
	return _Registry.Contract.RootNodeOwner(&_Registry.CallOpts)
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistryCallerSession) RootNodeOwner() (common.Address, error) {
	return _Registry.Contract.RootNodeOwner(&_Registry.CallOpts)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCaller) Roots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "roots", arg0)
	return *ret0, err
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistrySession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCallerSession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistryCaller) Sha3HexAddress(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "sha3HexAddress", addr)
	return *ret0, err
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistrySession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Registry.Contract.Sha3HexAddress(&_Registry.CallOpts, addr)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistryCallerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Registry.Contract.Sha3HexAddress(&_Registry.CallOpts, addr)
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCaller) Validate(opts *bind.CallOpts, _root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "validate", _root, _owner, _username, _proof)
	return *ret0, err
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistrySession) Validate(_root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCallerSession) Validate(_root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactor) AddRoot(opts *bind.TransactOpts, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addRoot", _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistrySession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactor) DeregisterSelf(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deregisterSelf")
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistrySession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactorSession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistrySession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0xbe13f47c.
//
// Solidity: function initialize(address _ens, bytes32 _root) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _ens common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _ens, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0xbe13f47c.
//
// Solidity: function initialize(address _ens, bytes32 _root) returns()
func (_Registry *RegistrySession) Initialize(_ens common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _ens, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0xbe13f47c.
//
// Solidity: function initialize(address _ens, bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) Initialize(_ens common.Address, _root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _ens, _root)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactor) RegisterSelf(opts *bind.TransactOpts, _root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerSelf", _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistrySession) RegisterSelf(_root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactorSession) RegisterSelf(_root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistryTransactor) TransferRootNode(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferRootNode", owner)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistrySession) TransferRootNode(owner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferRootNode(&_Registry.TransactOpts, owner)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistryTransactorSession) TransferRootNode(owner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferRootNode(&_Registry.TransactOpts, owner)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistrySession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// RegistryDeregisteredIterator is returned from FilterDeregistered and is used to iterate over the raw logs and unpacked data for Deregistered events raised by the Registry contract.
type RegistryDeregisteredIterator struct {
	Event *RegistryDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryDeregistered represents a Deregistered event raised by the Registry contract.
type RegistryDeregistered struct {
	Owner    common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeregistered is a free log retrieval operation binding the contract event 0xed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1.
//
// Solidity: event Deregistered(address indexed owner, string username)
func (_Registry *RegistryFilterer) FilterDeregistered(opts *bind.FilterOpts, owner []common.Address) (*RegistryDeregisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Deregistered", ownerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryDeregisteredIterator{contract: _Registry.contract, event: "Deregistered", logs: logs, sub: sub}, nil
}

// WatchDeregistered is a free log subscription operation binding the contract event 0xed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1.
//
// Solidity: event Deregistered(address indexed owner, string username)
func (_Registry *RegistryFilterer) WatchDeregistered(opts *bind.WatchOpts, sink chan<- *RegistryDeregistered, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Deregistered", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryDeregistered)
				if err := _Registry.contract.UnpackLog(event, "Deregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Registry contract.
type RegistryRecoverToVaultIterator struct {
	Event *RegistryRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRecoverToVault represents a RecoverToVault event raised by the Registry contract.
type RegistryRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Registry *RegistryFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*RegistryRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRecoverToVaultIterator{contract: _Registry.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Registry *RegistryFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *RegistryRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRecoverToVault)
				if err := _Registry.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Registry contract.
type RegistryRegisteredIterator struct {
	Event *RegistryRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistered represents a Registered event raised by the Registry contract.
type RegistryRegistered struct {
	Owner    common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132.
//
// Solidity: event Registered(address indexed owner, string username)
func (_Registry *RegistryFilterer) FilterRegistered(opts *bind.FilterOpts, owner []common.Address) (*RegistryRegisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Registered", ownerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredIterator{contract: _Registry.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132.
//
// Solidity: event Registered(address indexed owner, string username)
func (_Registry *RegistryFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *RegistryRegistered, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Registered", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistered)
				if err := _Registry.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegistrationPeriodStartedIterator is returned from FilterRegistrationPeriodStarted and is used to iterate over the raw logs and unpacked data for RegistrationPeriodStarted events raised by the Registry contract.
type RegistryRegistrationPeriodStartedIterator struct {
	Event *RegistryRegistrationPeriodStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegistrationPeriodStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistrationPeriodStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistrationPeriodStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegistrationPeriodStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegistrationPeriodStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistrationPeriodStarted represents a RegistrationPeriodStarted event raised by the Registry contract.
type RegistryRegistrationPeriodStarted struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRegistrationPeriodStarted is a free log retrieval operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) FilterRegistrationPeriodStarted(opts *bind.FilterOpts) (*RegistryRegistrationPeriodStartedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return &RegistryRegistrationPeriodStartedIterator{contract: _Registry.contract, event: "RegistrationPeriodStarted", logs: logs, sub: sub}, nil
}

// WatchRegistrationPeriodStarted is a free log subscription operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) WatchRegistrationPeriodStarted(opts *bind.WatchOpts, sink chan<- *RegistryRegistrationPeriodStarted) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistrationPeriodStarted)
				if err := _Registry.contract.UnpackLog(event, "RegistrationPeriodStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRootNodeTransferredIterator is returned from FilterRootNodeTransferred and is used to iterate over the raw logs and unpacked data for RootNodeTransferred events raised by the Registry contract.
type RegistryRootNodeTransferredIterator struct {
	Event *RegistryRootNodeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRootNodeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRootNodeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRootNodeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRootNodeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRootNodeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRootNodeTransferred represents a RootNodeTransferred event raised by the Registry contract.
type RegistryRootNodeTransferred struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRootNodeTransferred is a free log retrieval operation binding the contract event 0x7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a.
//
// Solidity: event RootNodeTransferred(address owner)
func (_Registry *RegistryFilterer) FilterRootNodeTransferred(opts *bind.FilterOpts) (*RegistryRootNodeTransferredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RootNodeTransferred")
	if err != nil {
		return nil, err
	}
	return &RegistryRootNodeTransferredIterator{contract: _Registry.contract, event: "RootNodeTransferred", logs: logs, sub: sub}, nil
}

// WatchRootNodeTransferred is a free log subscription operation binding the contract event 0x7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a.
//
// Solidity: event RootNodeTransferred(address owner)
func (_Registry *RegistryFilterer) WatchRootNodeTransferred(opts *bind.WatchOpts, sink chan<- *RegistryRootNodeTransferred) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RootNodeTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRootNodeTransferred)
				if err := _Registry.contract.UnpackLog(event, "RootNodeTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Registry contract.
type RegistryScriptResultIterator struct {
	Event *RegistryScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryScriptResult represents a ScriptResult event raised by the Registry contract.
type RegistryScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*RegistryScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &RegistryScriptResultIterator{contract: _Registry.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *RegistryScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryScriptResult)
				if err := _Registry.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
