// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"registerSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sha3HexAddress\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"self\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nameOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"nameNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"ownerOfName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_rootNode\",\"type\":\"bytes32\"},{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRootsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_REGISTRATION_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferRootNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"activeRegPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNodeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"addRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deregisterSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_ROOT_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RegistrationPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RootNodeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
const RegistryBin = `60806040523480156200001157600080fd5b506000806001026200003162000084640100000000026401000000009004565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001816000191690555050506200036a565b60006200009f620001bf640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000182576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200014657808201518184015260208101905062000129565b50505050905090810190601f168015620001745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620001bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6200020c640100000000026401000000009004565b565b6000620002077febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620003586401000000000262003e3d176401000000009004565b905090565b600062000227620001bf640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156200030a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002ce578082015181840152602081019050620002b1565b50505050905090810190601f168015620002fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5062000355817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620003636401000000000262004efb179091906401000000009004565b50565b600081549050919050565b8082555050565b615615806200037a6000396000f3006080604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304f3bcec146101c75780630803fac01461021e578063108abc0d1461024d5780631ca910aa146102ae57806327b752b8146103a05780632914b9bd146103ff57806332f0a3b5146104a85780633f15457f146104ff578063611f5764146105565780637104ddb2146105f05780637cb7acf7146106475780637cdd5edb146107035780637e7db6e1146107885780637f873749146107e357806380afdea81461088c57806385f812c3146108bf5780638b3dd7491461091e5780639423fc6e14610949578063958c18ac146109745780639b2f7940146109a75780639d4941d8146109ea578063a1658fad14610a2d578063a479e50814610ad9578063a575e34914610b30578063af04b57a14610b79578063c0774df314610bd0578063c2b40ae414610c71578063d4aae0c414610cba578063d59e646114610d11578063d948d46814610d42578063d9f2b5f914610dab578063de4796ed14610e0a578063e17b8a2914610e39578063f38a7b4414610e50578063faff50a814610e83578063fd64eccb14610eb6575b600080fd5b3480156101d357600080fd5b506101dc610ee5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022a57600080fd5b50610233610f0a565b604051808215151515815260200191505060405180910390f35b34801561025957600080fd5b506102ac6004803603810190808035600019169060200190929190803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610f35565b005b3480156102ba57600080fd5b506103866004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611408565b604051808215151515815260200191505060405180910390f35b3480156103ac57600080fd5b506103e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114c9565b60405180826000191660001916815260200191505060405180910390f35b34801561040b57600080fd5b50610466600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611533565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b457600080fd5b506104bd611652565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050b57600080fd5b506105146116ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056257600080fd5b506105d66004803603810190808035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035600019169060200190929190505050611725565b604051808215151515815260200191505060405180910390f35b3480156105fc57600080fd5b50610605611813565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065357600080fd5b50610688600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061181b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106c85780820151818401526020810190506106ad565b50505050905090810190601f1680156106f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561070f57600080fd5b5061076a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611955565b60405180826000191660001916815260200191505060405180910390f35b34801561079457600080fd5b506107c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a5c565b604051808215151515815260200191505060405180910390f35b3480156107ef57600080fd5b5061084a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a67565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089857600080fd5b506108a1611b4b565b60405180826000191660001916815260200191505060405180910390f35b3480156108cb57600080fd5b5061091c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291908035600019169060200190929190505050611b82565b005b34801561092a57600080fd5b50610933611f14565b6040518082815260200191505060405180910390f35b34801561095557600080fd5b5061095e611f4b565b6040518082815260200191505060405180910390f35b34801561098057600080fd5b50610989611f58565b60405180826000191660001916815260200191505060405180910390f35b3480156109b357600080fd5b506109e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f7f565b005b3480156109f657600080fd5b50610a2b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061220b565b005b348015610a3957600080fd5b50610abf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612629565b604051808215151515815260200191505060405180910390f35b348015610ae557600080fd5b50610aee612830565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b3c57600080fd5b50610b5f600480360381019080803560001916906020019092919050505061294b565b604051808215151515815260200191505060405180910390f35b348015610b8557600080fd5b50610b8e61296b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bdc57600080fd5b50610c57600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612a48565b604051808215151515815260200191505060405180910390f35b348015610c7d57600080fd5b50610c9c60048036038101908080359060200190929190505050612a70565b60405180826000191660001916815260200191505060405180910390f35b348015610cc657600080fd5b50610ccf612a93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d1d57600080fd5b50610d406004803603810190808035600019169060200190929190505050612aca565b005b348015610d4e57600080fd5b50610da9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612d24565b005b348015610db757600080fd5b50610dec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e58565b60405180826000191660001916815260200191505060405180910390f35b348015610e1657600080fd5b50610e1f612f05565b604051808215151515815260200191505060405180910390f35b348015610e4557600080fd5b50610e4e612f36565b005b348015610e5c57600080fd5b50610e65613035565b60405180826000191660001916815260200191505060405180910390f35b348015610e8f57600080fd5b50610e9861305c565b60405180826000191660001916815260200191505060405180910390f35b348015610ec257600080fd5b50610ecb613062565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610f15611f14565b905060008114158015610f2f575080610f2c61306b565b10155b91505090565b6001151560046000876000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280600981526020017f4e4f545f464f554e440000000000000000000000000000000000000000000000815250901515611043576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611008578082015181840152602081019050610fed565b50505050905090810190601f1680156110355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff1661109785858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611a67565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280600681526020017f455849535453000000000000000000000000000000000000000000000000000081525090151561118c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611151578082015181840152602081019050611136565b50505050905090810190601f16801561117e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006111983361181b565b51146040805190810160405280600681526020017f4558495354530000000000000000000000000000000000000000000000000000815250901515611278576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561123d578082015181840152602081019050611222565b50505050905090810190601f16801561126a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506112e6853386868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050611408565b6040805190810160405280600781526020017f494e56414c4944000000000000000000000000000000000000000000000000008152509015156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561138957808201518184015260208101905061136e565b50505050905090810190601f1680156113b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506114013385858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613073565b5050505050565b6000808484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b602083101515611483578051825260208201915060208101905060208303925061145e565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051809103902090506114be868483611725565b915050949350505050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b60008111156115255760018103905081600f85161a815360108404935060018103905081600f85161a81536010840493506114ef565b506028600020915050919050565b600061153d612830565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115c45780820151818401526020810190506115a9565b50505050905090810190601f1680156115f15780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561161057600080fd5b505af1158015611624573d6000803e3d6000fd5b505050506040513d602081101561163a57600080fd5b81019080805190602001909291905050509050919050565b600061165c612a93565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116bf57600080fd5b505af11580156116d3573d6000803e3d6000fd5b505050506040513d60208110156116e957600080fd5b8101908080519060200190929190505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b83518110156117fe57838181518110151561174457fe5b9060200190602002015160001916836000191610156117a95782848281518110151561176c57fe5b90602001906020020151604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092506117f1565b83818151811015156117b757fe5b9060200190602002015183604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092505b808060010191505061172d565b84600019168360001916149150509392505050565b600030905090565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f343161186384612e58565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156118bd57600080fd5b505af11580156118d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156118fb57600080fd5b81019080805164010000000081111561191357600080fd5b8281019050602081018481111561192957600080fd5b815185600182028301116401000000008211171561194657600080fd5b50509291905050509050919050565b6000600154826040518082805190602001908083835b602083101515611990578051825260208201915060208101905060208303925061196b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611a285780518252602082019150602081019050602083039250611a03565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de611aaf84611955565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611b0957600080fd5b505af1158015611b1d573d6000803e3d6000fd5b505050506040513d6020811015611b3357600080fd5b81019080805190602001909291905050509050919050565b6000611b7d7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b60010260001916613c5d565b905090565b6000611b8c611f14565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515611c6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c30578082015181840152602081019050611c15565b50505050905090810190601f168015611c5d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611c74613c68565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018160001916905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf6001546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611d5b57600080fd5b505af1158015611d6f573d6000803e3d6000fd5b505050506040513d6020811015611d8557600080fd5b81019080805190602001909291905050506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280600981526020017f4e4f545f464f554e440000000000000000000000000000000000000000000000815250901515611f05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611eca578082015181840152602081019050611eaf565b50505050905090810190601f168015611ef75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611f0f81613d95565b505050565b6000611f467febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916613e3d565b905090565b6000600380549050905090565b7fd31f4ba181fa04f6e556e75747124c08760a53dec98821ac56200ec037aa2bb760010281565b7f371d57b5d5e36ffacd760261ee1986c14c5a44484f6cd32d970413d31467313e600102611fde33826000604051908082528060200260200182016040528015611fd85781602001602082028038833980820191505090505b50612629565b6040805190810160405280600f81526020017f4150505f415554485f4641494c454400000000000000000000000000000000008152509015156120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612081578082015181840152602081019050612066565b50505050905090810190601f1680156120ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c3600154846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561218c57600080fd5b505af11580156121a0573d6000803e3d6000fd5b505050507f7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600061221984611a5c565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f57454400000000000000000000000000008152509015156122f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122bc5780820151818401526020810190506122a1565b50505050905090810190601f1680156122e95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612300611652565b925061230b83613e48565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000008152509015156123e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123ae578082015181840152602081019050612393565b50505050905090810190601f1680156123db5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612485573073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561247f573d6000803e3d6000fd5b506125be565b8390506124b1308273ffffffffffffffffffffffffffffffffffffffff16613e9a90919063ffffffff16565b91506124de83838373ffffffffffffffffffffffffffffffffffffffff166140749092919063ffffffff16565b6040805190810160405280601d81526020017f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000008152509015156125bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612581578082015181840152602081019050612566565b50505050905090810190601f1680156125ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008060606000612638610f0a565b15156126475760009350612826565b61264f612a93565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561268f5760009350612826565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561279957808201518184015260208101905061277e565b50505050905090810190601f1680156127c65780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156127e857600080fd5b505af11580156127fc573d6000803e3d6000fd5b505050506040513d602081101561281257600080fd5b810190808051906020019092919050505093505b5050509392505050565b60008061283b612a93565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b15801561290757600080fd5b505af115801561291b573d6000803e3d6000fd5b505050506040513d602081101561293157600080fd5b810190808051906020019092919050505090508091505090565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be36001546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612a0857600080fd5b505af1158015612a1c573d6000803e3d6000fd5b505050506040513d6020811015612a3257600080fd5b8101908080519060200190929190505050905090565b6000612a52610f0a565b8015612a6857506000612a648461181b565b5114155b905092915050565b600381815481101515612a7f57fe5b906000526020600020016000915090505481565b6000612ac57f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b60010260001916614154565b905090565b7fd31f4ba181fa04f6e556e75747124c08760a53dec98821ac56200ec037aa2bb7600102612b2933826000604051908082528060200260200182016040528015612b235781602001602082028038833980820191505090505b50612629565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515612c07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612bcc578082015181840152602081019050612bb1565b50505050905090810190601f168015612bf95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000151560046000846000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280600681526020017f4558495354530000000000000000000000000000000000000000000000000000815250901515612d16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cdb578082015181840152602081019050612cc0565b50505050905090810190601f168015612d085780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612d2082613d95565b5050565b606080612d313384612a48565b6040805190810160405280600b81526020017f4e4f545f414c4c4f574544000000000000000000000000000000000000000000815250901515612e0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dd4578082015181840152602081019050612db9565b50505050905090810190601f168015612e015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006040519080825280601f01601f191660200182016040528015612e445781602001602082028038833980820191505090505b509150612e5283838361415f565b50505050565b6000600154612e66836114c9565b6040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612ed15780518252602082019150602081019050602083039250612eac565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612f30611f14565b14905090565b6060612f413361181b565b90506000815114156040805190810160405280600981526020017f4e4f545f464f554e440000000000000000000000000000000000000000000000815250901515613027576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fec578082015181840152602081019050612fd1565b50505050905090810190601f1680156130195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506130323382614a5c565b50565b7f371d57b5d5e36ffacd760261ee1986c14c5a44484f6cd32d970413d31467313e60010281565b60015481565b60006001905090565b600043905090565b600080600080613082866114c9565b9350600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab592360015486306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b15801561316357600080fd5b505af1158015613177573d6000803e3d6000fd5b50505050600154846040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156131ea57805182526020820191506020810190506020830392506131c5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221384876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132d15780820151818401526020810190506132b6565b50505050905090810190601f1680156132fe5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561331e57600080fd5b505af1158015613332573d6000803e3d6000fd5b50505050846040516020018082805190602001908083835b60208310151561336f578051825260208201915060208101905060208303925061334a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156133d857805182526020820191506020810190506020830392506133b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156134a157600080fd5b505af11580156134b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156134df57600080fd5b8101908080516401000000008111156134f757600080fd5b8281019050602081018481111561350d57600080fd5b815185600182028301116401000000008211171561352a57600080fd5b50509291905050506040516020018082805190602001908083835b60208310151561356a5780518252602082019150602081019050602083039250613545565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156135d357805182526020820191506020810190506020830392506135ae565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916146040805190810160405280600c81526020017f4e414d455f4e4f545f53455400000000000000000000000000000000000000008152509015156136e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156136a857808201518184015260208101905061368d565b50505050905090810190601f1680156136d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846040518082805190602001908083835b60208310151561371a57805182526020820191506020810190506020830392506136f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab592360015484306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b15801561382857600080fd5b505af115801561383c573d6000803e3d6000fd5b50505050600154826040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156138af578051825260208201915060208101905060208303925061388a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b0082886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156139aa57600080fd5b505af11580156139be573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015613a7157600080fd5b505af1158015613a85573d6000803e3d6000fd5b505050506040513d6020811015613a9b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280600c81526020017f414444525f4e4f545f5345540000000000000000000000000000000000000000815250901515613ba1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613b66578082015181840152602081019050613b4b565b50505050905090810190601f168015613b935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff167fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132866040518080602001828103825283818151815260200191508051906020019080838360005b83811015613c1b578082015181840152602081019050613c00565b50505050905090810190601f168015613c485780820380516001836020036101000a031916815260200191505b509250505060405180910390a2505050505050565b600081549050919050565b6000613c72611f14565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515613d51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613d16578082015181840152602081019050613cfb565b50505050905090810190601f168015613d435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613d93613d5d61306b565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916614efb90919063ffffffff16565b565b6003819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600160046000836000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba38160405180826000191660001916815260200191505060405180910390a150565b600081549050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613e895760009150613e94565b823b90506000811191505b50919050565b600060606000808573ffffffffffffffffffffffffffffffffffffffff166370a0823190507c01000000000000000000000000000000000000000000000000000000000285604051602401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509250613f848684614f02565b91509150816040805190810160405280601c81526020017f534146455f4552435f32305f42414c414e43455f524556455254454400000000815250901515614067576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561402c578082015181840152602081019050614011565b50505050905090810190601f1680156140595780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080935050505092915050565b6000606063a9059cbb7c0100000000000000000000000000000000000000000000000000000000028484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061414a8582614f37565b9150509392505050565b600081549050919050565b606060008060608061416f610f0a565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a454400000000000000000000000081525090151561424d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156142125780820151818401526020810190506141f7565b50505050905090810190601f16801561423f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080614259612a93565b9150614263611b4b565b905061426e8a611533565b9550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f45564d52554e5f4558454355544f525f554e415641494c41424c45000000000081525090151561437f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614344578082015181840152602081019050614329565b50505050905090810190601f1680156143715780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff1663279cea3590507c0100000000000000000000000000000000000000000000000000000000029450848a8a8a60405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561440e5780820151818401526020810190506143f3565b50505050905090810190601f16801561443b5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015614474578082015181840152602081019050614459565b50505050905090810190601f1680156144a15780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b838110156144dd5780820151818401526020810190506144c2565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093508573ffffffffffffffffffffffffffffffffffffffff168460405180828051906020019080838360005b83811015614590578082015181840152602081019050614575565b50505050905090810190601f1680156145bd5780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150506040805190810160405280601981526020017f45564d52554e5f455845435554494f4e5f5245564552544544000000000000008152509015156146ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614673578082015181840152602081019050614658565b50505050905090810190601f1680156146a05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506146b7614f89565b92508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561473c578082015181840152602081019050614721565b50505050905090810190601f1680156147695780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156147a2578082015181840152602081019050614787565b50505050905090810190601f1680156147cf5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156148085780820151818401526020810190506147ed565b50505050905090810190601f1680156148355780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16614868612a93565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f4449464945440081525090151561495d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614922578082015181840152602081019050614907565b50505050905090810190601f16801561494f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50806000191661496b611b4b565b60001916146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614a4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614a135780820151818401526020810190506149f8565b50505050905090810190601f168015614a405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050509392505050565b600080614a6884612e58565b91503073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015614b1a57600080fd5b505af1158015614b2e573d6000803e3d6000fd5b505050506040513d6020811015614b4457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515614b7c57614b7b84614fb9565b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377372213836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020018060200182810382526000815260200160200192505050600060405180830381600087803b158015614c2857600080fd5b505af1158015614c3c573d6000803e3d6000fd5b50505050614c4983611955565b90503073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015614cfb57600080fd5b505af1158015614d0f573d6000803e3d6000fd5b505050506040513d6020811015614d2557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515614d5d57614d5c836152a4565b5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5fa2b008260006040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015614e2a57600080fd5b505af1158015614e3e573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1846040518080602001828103825283818151815260200191508051906020019080838360005b83811015614ebb578082015181840152602081019050614ea0565b50505050905090810190601f168015614ee85780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050565b8082555050565b6000806000806040516020818751602089018a5afa92506000831115614f2757805191505b5081819350935050509250929050565b6000806040516020818551602087016000895af16000811115614f7d573d60008114614f6a5760208114614f7357614f7b565b60019350614f7b565b600183511493505b505b50508091505092915050565b60603d8060008114614fb0576040519250602082018301604052602082036020843e614fb1565b5b505080905090565b60003073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be36001546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561506d57600080fd5b505af1158015615081573d6000803e3d6000fd5b505050506040513d602081101561509757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280600b81526020017f4e4f545f414c4c4f57454400000000000000000000000000000000000000000081525090151561519d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615162578082015181840152602081019050615147565b50505050905090810190601f16801561518f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506151a7826114c9565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab592360015483306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b15801561528857600080fd5b505af115801561529c573d6000803e3d6000fd5b505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be36001546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561535857600080fd5b505af115801561536c573d6000803e3d6000fd5b505050506040513d602081101561538257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280600b81526020017f4e4f545f414c4c4f574544000000000000000000000000000000000000000000815250901515615488576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561544d578082015181840152602081019050615432565b50505050905090810190601f16801561547a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50816040518082805190602001908083835b6020831015156154bf578051825260208201915060208101905060208303925061549a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab592360015483306040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156155cd57600080fd5b505af11580156155e1573d6000803e3d6000fd5b5050505050505600a165627a7a72305820800ea2a9264e0251b50c16e9ebb2aa27335f9c0b71d82ac2db5ee79e9492a6cd0029`

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCaller) STARTREGISTRATIONPERIOD(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "START_REGISTRATION_PERIOD")
	return *ret0, err
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistrySession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCallerSession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistryCaller) TRANSFERROOTNODE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "TRANSFER_ROOT_NODE")
	return *ret0, err
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistrySession) TRANSFERROOTNODE() ([32]byte, error) {
	return _Registry.Contract.TRANSFERROOTNODE(&_Registry.CallOpts)
}

// TRANSFERROOTNODE is a free data retrieval call binding the contract method 0xf38a7b44.
//
// Solidity: function TRANSFER_ROOT_NODE() constant returns(bytes32)
func (_Registry *RegistryCallerSession) TRANSFERROOTNODE() ([32]byte, error) {
	return _Registry.Contract.TRANSFERROOTNODE(&_Registry.CallOpts)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCaller) ActiveRegPeriod(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "activeRegPeriod", arg0)
	return *ret0, err
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistrySession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCallerSession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistryCaller) AddrNode(opts *bind.CallOpts, _addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "addrNode", _addr)
	return *ret0, err
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistrySession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Registry.Contract.AddrNode(&_Registry.CallOpts, _addr)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Registry *RegistryCallerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Registry.Contract.AddrNode(&_Registry.CallOpts, _addr)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistrySession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistrySession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCallerSession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistrySession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistrySession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCaller) CheckProof(opts *bind.CallOpts, root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "checkProof", root, proof, hash)
	return *ret0, err
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistrySession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCallerSession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistryCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistrySession) Ens() (common.Address, error) {
	return _Registry.Contract.Ens(&_Registry.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Registry *RegistryCallerSession) Ens() (common.Address, error) {
	return _Registry.Contract.Ens(&_Registry.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistrySession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistrySession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCaller) GetRootsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRootsCount")
	return *ret0, err
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistrySession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCallerSession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistrySession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCallerSession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistrySession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCallerSession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistrySession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCallerSession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistrySession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCallerSession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistryCaller) NameNode(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "nameNode", _username)
	return *ret0, err
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistrySession) NameNode(_username string) ([32]byte, error) {
	return _Registry.Contract.NameNode(&_Registry.CallOpts, _username)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Registry *RegistryCallerSession) NameNode(_username string) ([32]byte, error) {
	return _Registry.Contract.NameNode(&_Registry.CallOpts, _username)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistryCaller) NameOfOwner(opts *bind.CallOpts, _owner common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "nameOfOwner", _owner)
	return *ret0, err
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistrySession) NameOfOwner(_owner common.Address) (string, error) {
	return _Registry.Contract.NameOfOwner(&_Registry.CallOpts, _owner)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Registry *RegistryCallerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Registry.Contract.NameOfOwner(&_Registry.CallOpts, _owner)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistryCaller) OwnerOfName(opts *bind.CallOpts, _username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ownerOfName", _username)
	return *ret0, err
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistrySession) OwnerOfName(_username string) (common.Address, error) {
	return _Registry.Contract.OwnerOfName(&_Registry.CallOpts, _username)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Registry *RegistryCallerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Registry.Contract.OwnerOfName(&_Registry.CallOpts, _username)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistryCaller) Resolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "resolver")
	return *ret0, err
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistrySession) Resolver() (common.Address, error) {
	return _Registry.Contract.Resolver(&_Registry.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Registry *RegistryCallerSession) Resolver() (common.Address, error) {
	return _Registry.Contract.Resolver(&_Registry.CallOpts)
}

// RootNode is a free data retrieval call binding the contract method 0xfaff50a8.
//
// Solidity: function rootNode() constant returns(bytes32)
func (_Registry *RegistryCaller) RootNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "rootNode")
	return *ret0, err
}

// RootNode is a free data retrieval call binding the contract method 0xfaff50a8.
//
// Solidity: function rootNode() constant returns(bytes32)
func (_Registry *RegistrySession) RootNode() ([32]byte, error) {
	return _Registry.Contract.RootNode(&_Registry.CallOpts)
}

// RootNode is a free data retrieval call binding the contract method 0xfaff50a8.
//
// Solidity: function rootNode() constant returns(bytes32)
func (_Registry *RegistryCallerSession) RootNode() ([32]byte, error) {
	return _Registry.Contract.RootNode(&_Registry.CallOpts)
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistryCaller) RootNodeOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "rootNodeOwner")
	return *ret0, err
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistrySession) RootNodeOwner() (common.Address, error) {
	return _Registry.Contract.RootNodeOwner(&_Registry.CallOpts)
}

// RootNodeOwner is a free data retrieval call binding the contract method 0xaf04b57a.
//
// Solidity: function rootNodeOwner() constant returns(address)
func (_Registry *RegistryCallerSession) RootNodeOwner() (common.Address, error) {
	return _Registry.Contract.RootNodeOwner(&_Registry.CallOpts)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCaller) Roots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "roots", arg0)
	return *ret0, err
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistrySession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCallerSession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() constant returns(address)
func (_Registry *RegistryCaller) Self(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "self")
	return *ret0, err
}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() constant returns(address)
func (_Registry *RegistrySession) Self() (common.Address, error) {
	return _Registry.Contract.Self(&_Registry.CallOpts)
}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() constant returns(address)
func (_Registry *RegistryCallerSession) Self() (common.Address, error) {
	return _Registry.Contract.Self(&_Registry.CallOpts)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistryCaller) Sha3HexAddress(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "sha3HexAddress", addr)
	return *ret0, err
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistrySession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Registry.Contract.Sha3HexAddress(&_Registry.CallOpts, addr)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Registry *RegistryCallerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Registry.Contract.Sha3HexAddress(&_Registry.CallOpts, addr)
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCaller) Validate(opts *bind.CallOpts, _root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "validate", _root, _owner, _username, _proof)
	return *ret0, err
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistrySession) Validate(_root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// Validate is a free data retrieval call binding the contract method 0x1ca910aa.
//
// Solidity: function validate(bytes32 _root, address _owner, string _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCallerSession) Validate(_root [32]byte, _owner common.Address, _username string, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactor) AddRoot(opts *bind.TransactOpts, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addRoot", _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistrySession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactor) DeregisterSelf(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deregisterSelf")
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistrySession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactorSession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistrySession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0x85f812c3.
//
// Solidity: function initialize(address _ens, bytes32 _rootNode, bytes32 _root) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _ens common.Address, _rootNode [32]byte, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _ens, _rootNode, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x85f812c3.
//
// Solidity: function initialize(address _ens, bytes32 _rootNode, bytes32 _root) returns()
func (_Registry *RegistrySession) Initialize(_ens common.Address, _rootNode [32]byte, _root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _ens, _rootNode, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x85f812c3.
//
// Solidity: function initialize(address _ens, bytes32 _rootNode, bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) Initialize(_ens common.Address, _rootNode [32]byte, _root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _ens, _rootNode, _root)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactor) RegisterSelf(opts *bind.TransactOpts, _root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerSelf", _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistrySession) RegisterSelf(_root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x108abc0d.
//
// Solidity: function registerSelf(bytes32 _root, string _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactorSession) RegisterSelf(_root [32]byte, _username string, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistryTransactor) TransferRootNode(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferRootNode", owner)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistrySession) TransferRootNode(owner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferRootNode(&_Registry.TransactOpts, owner)
}

// TransferRootNode is a paid mutator transaction binding the contract method 0x9b2f7940.
//
// Solidity: function transferRootNode(address owner) returns()
func (_Registry *RegistryTransactorSession) TransferRootNode(owner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferRootNode(&_Registry.TransactOpts, owner)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistrySession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// RegistryDeregisteredIterator is returned from FilterDeregistered and is used to iterate over the raw logs and unpacked data for Deregistered events raised by the Registry contract.
type RegistryDeregisteredIterator struct {
	Event *RegistryDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryDeregistered represents a Deregistered event raised by the Registry contract.
type RegistryDeregistered struct {
	Owner    common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeregistered is a free log retrieval operation binding the contract event 0xed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1.
//
// Solidity: event Deregistered(address indexed owner, string username)
func (_Registry *RegistryFilterer) FilterDeregistered(opts *bind.FilterOpts, owner []common.Address) (*RegistryDeregisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Deregistered", ownerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryDeregisteredIterator{contract: _Registry.contract, event: "Deregistered", logs: logs, sub: sub}, nil
}

// WatchDeregistered is a free log subscription operation binding the contract event 0xed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1.
//
// Solidity: event Deregistered(address indexed owner, string username)
func (_Registry *RegistryFilterer) WatchDeregistered(opts *bind.WatchOpts, sink chan<- *RegistryDeregistered, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Deregistered", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryDeregistered)
				if err := _Registry.contract.UnpackLog(event, "Deregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Registry contract.
type RegistryRecoverToVaultIterator struct {
	Event *RegistryRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRecoverToVault represents a RecoverToVault event raised by the Registry contract.
type RegistryRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Registry *RegistryFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*RegistryRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRecoverToVaultIterator{contract: _Registry.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Registry *RegistryFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *RegistryRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRecoverToVault)
				if err := _Registry.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Registry contract.
type RegistryRegisteredIterator struct {
	Event *RegistryRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistered represents a Registered event raised by the Registry contract.
type RegistryRegistered struct {
	Owner    common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132.
//
// Solidity: event Registered(address indexed owner, string username)
func (_Registry *RegistryFilterer) FilterRegistered(opts *bind.FilterOpts, owner []common.Address) (*RegistryRegisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Registered", ownerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredIterator{contract: _Registry.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132.
//
// Solidity: event Registered(address indexed owner, string username)
func (_Registry *RegistryFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *RegistryRegistered, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Registered", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistered)
				if err := _Registry.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegistrationPeriodStartedIterator is returned from FilterRegistrationPeriodStarted and is used to iterate over the raw logs and unpacked data for RegistrationPeriodStarted events raised by the Registry contract.
type RegistryRegistrationPeriodStartedIterator struct {
	Event *RegistryRegistrationPeriodStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegistrationPeriodStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistrationPeriodStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistrationPeriodStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegistrationPeriodStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegistrationPeriodStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistrationPeriodStarted represents a RegistrationPeriodStarted event raised by the Registry contract.
type RegistryRegistrationPeriodStarted struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRegistrationPeriodStarted is a free log retrieval operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) FilterRegistrationPeriodStarted(opts *bind.FilterOpts) (*RegistryRegistrationPeriodStartedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return &RegistryRegistrationPeriodStartedIterator{contract: _Registry.contract, event: "RegistrationPeriodStarted", logs: logs, sub: sub}, nil
}

// WatchRegistrationPeriodStarted is a free log subscription operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) WatchRegistrationPeriodStarted(opts *bind.WatchOpts, sink chan<- *RegistryRegistrationPeriodStarted) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistrationPeriodStarted)
				if err := _Registry.contract.UnpackLog(event, "RegistrationPeriodStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRootNodeTransferredIterator is returned from FilterRootNodeTransferred and is used to iterate over the raw logs and unpacked data for RootNodeTransferred events raised by the Registry contract.
type RegistryRootNodeTransferredIterator struct {
	Event *RegistryRootNodeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRootNodeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRootNodeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRootNodeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRootNodeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRootNodeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRootNodeTransferred represents a RootNodeTransferred event raised by the Registry contract.
type RegistryRootNodeTransferred struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRootNodeTransferred is a free log retrieval operation binding the contract event 0x7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a.
//
// Solidity: event RootNodeTransferred(address owner)
func (_Registry *RegistryFilterer) FilterRootNodeTransferred(opts *bind.FilterOpts) (*RegistryRootNodeTransferredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RootNodeTransferred")
	if err != nil {
		return nil, err
	}
	return &RegistryRootNodeTransferredIterator{contract: _Registry.contract, event: "RootNodeTransferred", logs: logs, sub: sub}, nil
}

// WatchRootNodeTransferred is a free log subscription operation binding the contract event 0x7444ce26d7ad7a8474b93ea7149beb2bf495c38a0b493fca1298701a7796d09a.
//
// Solidity: event RootNodeTransferred(address owner)
func (_Registry *RegistryFilterer) WatchRootNodeTransferred(opts *bind.WatchOpts, sink chan<- *RegistryRootNodeTransferred) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RootNodeTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRootNodeTransferred)
				if err := _Registry.contract.UnpackLog(event, "RootNodeTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Registry contract.
type RegistryScriptResultIterator struct {
	Event *RegistryScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryScriptResult represents a ScriptResult event raised by the Registry contract.
type RegistryScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*RegistryScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &RegistryScriptResultIterator{contract: _Registry.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *RegistryScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryScriptResult)
				if err := _Registry.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
