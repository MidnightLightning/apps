// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_username\",\"type\":\"bytes32\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"registerSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hashAddress\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usernameToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes32\"}],\"name\":\"hashBytes32\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"bytes32\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRootsCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_REGISTRATION_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"activeRegPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"addRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deregisterSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"bytes32\"}],\"name\":\"hash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RegistrationPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
const RegistryBin = `60806040526200001d62000023640100000000026401000000009004565b62000309565b60006200003e6200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a4544000000000000000081525090151562000121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000e5578082015181840152602081019050620000c8565b50505050905090810190601f168015620001135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200015c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff620001ab640100000000026401000000009004565b565b6000620001a67febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620002f764010000000002620023c1176401000000009004565b905090565b6000620001c66200015e640100000000026401000000009004565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a45440000000000000000815250901515620002a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200026d57808201518184015260208101905062000250565b50505050905090810190601f1680156200029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620002f4817febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916620003026401000000000262002fc8179091906401000000009004565b50565b600081549050919050565b8082555050565b61302b80620003196000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630803fac01461017a5780632914b9bd146101a95780632a14fb3d1461025257806332f0a3b5146102a95780633aa5fe5914610300578063470798921461035f5780634d7e4ffd146103d057806357e93bd21461041d578063611f5764146104d7578063730ecf34146105715780637e7db6e1146105d057806380afdea81461062b5780638b3dd7491461065e5780639423fc6e146106895780639498bd71146106b4578063958c18ac146106e55780639d4941d814610718578063a1658fad1461075b578063a479e50814610807578063a575e3491461085e578063c0774df3146108a7578063c2b40ae414610948578063d4aae0c414610991578063d59e6461146109e8578063d948d46814610a19578063de4796ed14610a82578063e17b8a2914610ab1578063e68dd36914610ac8578063fd64eccb14610b35575b600080fd5b34801561018657600080fd5b5061018f610b64565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b50610210600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b8f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025e57600080fd5b506102a760048036038101908080356000191690602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390505050610cae565b005b3480156102b557600080fd5b506102be61106d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030c57600080fd5b50610341600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111a565b60405180826000191660001916815260200191505060405180910390f35b34801561036b57600080fd5b5061038e6004803603810190808035600019169060200190929190505050611174565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103dc57600080fd5b506103ff60048036038101908080356000191690602001909291905050506111a7565b60405180826000191660001916815260200191505060405180910390f35b34801561042957600080fd5b506104bd6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506111ce565b604051808215151515815260200191505060405180910390f35b3480156104e357600080fd5b50610557600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803560001916906020019092919050505061124a565b604051808215151515815260200191505060405180910390f35b34801561057d57600080fd5b506105b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611338565b60405180826000191660001916815260200191505060405180910390f35b3480156105dc57600080fd5b50610611600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611350565b604051808215151515815260200191505060405180910390f35b34801561063757600080fd5b5061064061135b565b60405180826000191660001916815260200191505060405180910390f35b34801561066a57600080fd5b50610673611392565b6040518082815260200191505060405180910390f35b34801561069557600080fd5b5061069e6113c9565b6040518082815260200191505060405180910390f35b3480156106c057600080fd5b506106e360048036038101908080356000191690602001909291905050506113d5565b005b3480156106f157600080fd5b506106fa6114d3565b60405180826000191660001916815260200191505060405180910390f35b34801561072457600080fd5b50610759600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061150c565b005b34801561076757600080fd5b506107ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061193e565b604051808215151515815260200191505060405180910390f35b34801561081357600080fd5b5061081c611b45565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561086a57600080fd5b5061088d6004803603810190808035600019169060200190929190505050611c60565b604051808215151515815260200191505060405180910390f35b3480156108b357600080fd5b5061092e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c80565b604051808215151515815260200191505060405180910390f35b34801561095457600080fd5b5061097360048036038101908080359060200190929190505050611ce5565b60405180826000191660001916815260200191505060405180910390f35b34801561099d57600080fd5b506109a6611d08565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109f457600080fd5b50610a176004803603810190808035600019169060200190929190505050611d3f565b005b348015610a2557600080fd5b50610a80600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611fab565b005b348015610a8e57600080fd5b50610a976120df565b604051808215151515815260200191505060405180910390f35b348015610abd57600080fd5b50610ac6612110565b005b348015610ad457600080fd5b50610b17600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919050505061224c565b60405180826000191660001916815260200191505060405180910390f35b348015610b4157600080fd5b50610b4a6122b7565b604051808215151515815260200191505060405180910390f35b600080610b6f611392565b905060008114158015610b89575080610b866122c0565b10155b91505090565b6000610b99611b45565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c20578082015181840152602081019050610c05565b50505050905090810190601f168015610c4d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b81019080805190602001909291905050509050919050565b6001151560036000866000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280601d81526020017f4e4f5f4143544956455f524547495354524154494f4e5f504552494f44000000815250901515610dbc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d81578082015181840152602081019050610d66565b50505050905090810190601f168015610dae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000600102600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460001916148015610e645750600060026000856000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6040805190810160405280601381526020017f524547495354524154494f4e5f45584953545300000000000000000000000000815250901515610f42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f07578082015181840152602081019050610eec565b50505050905090810190601f168015610f345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610f7e8433858585808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050506111ce565b6040805190810160405280600781526020017f494e56414c49440000000000000000000000000000000000000000000000000081525090151561105c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611021578082015181840152602081019050611006565b50505050905090810190601f16801561104e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061106733846122c8565b50505050565b6000611077611d08565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110da57600080fd5b505af11580156110ee573d6000803e3d6000fd5b505050506040513d602081101561110457600080fd5b8101908080519060200190929190505050905090565b600081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050919050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405180826000191660001916815260200191505060405180910390209050919050565b6000808484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001925050506040518091039020905061123f86848361124a565b915050949350505050565b600080600090505b835181101561132357838181518110151561126957fe5b9060200190602002015160001916836000191610156112ce5782848281518110151561129157fe5b9060200190602002015160405180836000191660001916815260200182600019166000191681526020019250505060405180910390209250611316565b83818151811015156112dc57fe5b9060200190602002015183604051808360001916600019168152602001826000191660001916815260200192505050604051809103902092505b8080600101915050611252565b84600019168360001916149150509392505050565b60016020528060005260406000206000915090505481565b600060019050919050565b600061138d7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b600102600019166123b6565b905090565b60006113c47febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e600102600019166123c1565b905090565b60008080549050905090565b60006113df611392565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156114be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611483578082015181840152602081019050611468565b50505050905090810190601f1680156114b05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506114c76123cc565b6114d0816124f9565b50565b60405180807f53544152545f524547495354524154494f4e5f504552494f44000000000000008152506019019050604051809103902081565b60008061151883611350565b6040805190810160405280601281526020017f5245434f5645525f444953414c4c4f57454400000000000000000000000000008152509015156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115bb5780820151818401526020810190506115a0565b50505050905090810190601f1680156115e85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506115ff61106d565b915061160a826125a1565b6040805190810160405280601a81526020017f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000008152509015156116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116ad578082015181840152602081019050611692565b50505050905090810190601f1680156116da5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611781578173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561177b573d6000803e3d6000fd5b50611939565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561181c57600080fd5b505af1158015611830573d6000803e3d6000fd5b505050506040513d602081101561184657600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156118fc57600080fd5b505af1158015611910573d6000803e3d6000fd5b505050506040513d602081101561192657600080fd5b8101908080519060200190929190505050505b505050565b6000806060600061194d610b64565b151561195c5760009350611b3b565b611964611d08565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119a45760009350611b3b565b602085510290508491508082528273ffffffffffffffffffffffffffffffffffffffff1663fdef9106883089866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611aae578082015181840152602081019050611a93565b50505050905090810190601f168015611adb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611afd57600080fd5b505af1158015611b11573d6000803e3d6000fd5b505050506040513d6020811015611b2757600080fd5b810190808051906020019092919050505093505b5050509392505050565b600080611b50611d08565b73ffffffffffffffffffffffffffffffffffffffff1663be00bbd87fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6001027fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616001026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050602060405180830381600087803b158015611c1c57600080fd5b505af1158015611c30573d6000803e3d6000fd5b505050506040513d6020811015611c4657600080fd5b810190808051906020019092919050505090508091505090565b60036020528060005260406000206000915054906101000a900460ff1681565b6000611c8a610b64565b8015611cdd57506000600102600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191614155b905092915050565b600081815481101515611cf457fe5b906000526020600020016000915090505481565b6000611d3a7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b600102600019166125f3565b905090565b60405180807f53544152545f524547495354524154494f4e5f504552494f440000000000000081525060190190506040518091039020611db033826000604051908082528060200260200182016040528015611daa5781602001602082028038833980820191505090505b5061193e565b6040805190810160405280600f81526020017f4150505f415554485f4641494c45440000000000000000000000000000000000815250901515611e8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e53578082015181840152602081019050611e38565b50505050905090810190601f168015611e805780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000151560036000846000191660001916815260200190815260200160002060009054906101000a900460ff161515146040805190810160405280601a81526020017f524547495354524154494f4e5f504552494f445f455849535453000000000000815250901515611f9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f62578082015181840152602081019050611f47565b50505050905090810190601f168015611f8f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611fa7826124f9565b5050565b606080611fb83384611c80565b6040805190810160405280601881526020017f52454749535452595f43414e5f4e4f545f464f52574152440000000000000000815250901515612096576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561205b578082015181840152602081019050612040565b50505050905090810190601f1680156120885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006040519080825280601f01601f1916602001820160405280156120cb5781602001602082028038833980820191505090505b5091506120d98383836125fe565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61210a611392565b14905090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600102816000191614156040805190810160405280601681526020017f524547495354524154494f4e5f4e4f545f464f554e440000000000000000000081525090151561223e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122035780820151818401526020810190506121e8565b50505050905090810190601f1680156122305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506122493382612efb565b50565b60008282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001925050506040518091039020905092915050565b60006001905090565b600043905090565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600019169055508160026000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600019168273ffffffffffffffffffffffffffffffffffffffff167fb8142d42f05d95abf0a6570799774d59276e49ea32a04d9a4ec316ea4a6886bc60405160405180910390a35050565b600081549050919050565b600081549050919050565b60006123d6611392565b146040805190810160405280601881526020017f494e49545f414c52454144595f494e495449414c495a454400000000000000008152509015156124b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561247a57808201518184015260208101905061245f565b50505050905090810190601f1680156124a75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506124f76124c16122c0565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e60010260001916612fc890919063ffffffff16565b565b6000819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600160036000836000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba38160405180826000191660001916815260200191505060405180910390a150565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125e257600091506125ed565b823b90506000811191505b50919050565b600081549050919050565b606060008060608061260e610b64565b6040805190810160405280601481526020017f494e49545f4e4f545f494e495449414c495a45440000000000000000000000008152509015156126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126b1578082015181840152602081019050612696565b50505050905090810190601f1680156126de5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000806126f8611d08565b915061270261135b565b905061270d8a610b8f565b9550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f45564d52554e5f4558454355544f525f554e415641494c41424c45000000000081525090151561281e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127e35780820151818401526020810190506127c8565b50505050905090810190601f1680156128105780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff1663279cea3590507c0100000000000000000000000000000000000000000000000000000000029450848a8a8a60405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156128ad578082015181840152602081019050612892565b50505050905090810190601f1680156128da5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156129135780820151818401526020810190506128f8565b50505050905090810190601f1680156129405780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b8381101561297c578082015181840152602081019050612961565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093508573ffffffffffffffffffffffffffffffffffffffff168460405180828051906020019080838360005b83811015612a2f578082015181840152602081019050612a14565b50505050905090810190601f168015612a5c5780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150506040805190810160405280601981526020017f45564d52554e5f455845435554494f4e5f524556455254454400000000000000815250901515612b4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b12578082015181840152602081019050612af7565b50505050905090810190601f168015612b3f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612b56612fcf565b92508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015612bdb578082015181840152602081019050612bc0565b50505050905090810190601f168015612c085780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015612c41578082015181840152602081019050612c26565b50505050905090810190601f168015612c6e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015612ca7578082015181840152602081019050612c8c565b50505050905090810190601f168015612cd45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16612d07611d08565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515612dfc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dc1578082015181840152602081019050612da6565b50505050905090810190601f168015612dee5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060001916612e0a61135b565b60001916146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515612eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612eb2578082015181840152602081019050612e97565b50505050905090810190601f168015612edf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050505050509392505050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560026000826000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905580600019168273ffffffffffffffffffffffffffffffffffffffff167fcc0d8d49cb9a5a3eebc1e1f0b607b8aad83fbe9618e448df79b8a0cc3331947260405160405180910390a35050565b8082555050565b60603d8060008114612ff6576040519250602082018301604052602082036020843e612ff7565b5b5050809050905600a165627a7a72305820b5933614cb2ed8e48c0936f5ac779e31a62b752266a9c821771d11868533ed9d0029`

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCaller) STARTREGISTRATIONPERIOD(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "START_REGISTRATION_PERIOD")
	return *ret0, err
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistrySession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// STARTREGISTRATIONPERIOD is a free data retrieval call binding the contract method 0x958c18ac.
//
// Solidity: function START_REGISTRATION_PERIOD() constant returns(bytes32)
func (_Registry *RegistryCallerSession) STARTREGISTRATIONPERIOD() ([32]byte, error) {
	return _Registry.Contract.STARTREGISTRATIONPERIOD(&_Registry.CallOpts)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCaller) ActiveRegPeriod(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "activeRegPeriod", arg0)
	return *ret0, err
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistrySession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// ActiveRegPeriod is a free data retrieval call binding the contract method 0xa575e349.
//
// Solidity: function activeRegPeriod(bytes32 ) constant returns(bool)
func (_Registry *RegistryCallerSession) ActiveRegPeriod(arg0 [32]byte) (bool, error) {
	return _Registry.Contract.ActiveRegPeriod(&_Registry.CallOpts, arg0)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistrySession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Registry *RegistryCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Registry.Contract.AllowRecoverability(&_Registry.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistrySession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Registry *RegistryCallerSession) AppId() ([32]byte, error) {
	return _Registry.Contract.AppId(&_Registry.CallOpts)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistrySession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Registry *RegistryCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Registry.Contract.CanForward(&_Registry.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistrySession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Registry *RegistryCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Registry.Contract.CanPerform(&_Registry.CallOpts, _sender, _role, _params)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCaller) CheckProof(opts *bind.CallOpts, root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "checkProof", root, proof, hash)
	return *ret0, err
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistrySession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// CheckProof is a free data retrieval call binding the contract method 0x611f5764.
//
// Solidity: function checkProof(bytes32 root, bytes32[] proof, bytes32 hash) constant returns(bool)
func (_Registry *RegistryCallerSession) CheckProof(root [32]byte, proof [][32]byte, hash [32]byte) (bool, error) {
	return _Registry.Contract.CheckProof(&_Registry.CallOpts, root, proof, hash)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Registry.Contract.GetEVMScriptExecutor(&_Registry.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistrySession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Registry *RegistryCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Registry.Contract.GetEVMScriptRegistry(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistrySession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Registry *RegistryCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Registry.Contract.GetInitializationBlock(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistrySession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Registry *RegistryCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Registry.Contract.GetRecoveryVault(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCaller) GetRootsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getRootsCount")
	return *ret0, err
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistrySession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// GetRootsCount is a free data retrieval call binding the contract method 0x9423fc6e.
//
// Solidity: function getRootsCount() constant returns(uint256 count)
func (_Registry *RegistryCallerSession) GetRootsCount() (*big.Int, error) {
	return _Registry.Contract.GetRootsCount(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistrySession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Registry *RegistryCallerSession) HasInitialized() (bool, error) {
	return _Registry.Contract.HasInitialized(&_Registry.CallOpts)
}

// Hash is a free data retrieval call binding the contract method 0xe68dd369.
//
// Solidity: function hash(address _owner, bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistryCaller) Hash(opts *bind.CallOpts, _owner common.Address, _username [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hash", _owner, _username)
	return *ret0, err
}

// Hash is a free data retrieval call binding the contract method 0xe68dd369.
//
// Solidity: function hash(address _owner, bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistrySession) Hash(_owner common.Address, _username [32]byte) ([32]byte, error) {
	return _Registry.Contract.Hash(&_Registry.CallOpts, _owner, _username)
}

// Hash is a free data retrieval call binding the contract method 0xe68dd369.
//
// Solidity: function hash(address _owner, bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistryCallerSession) Hash(_owner common.Address, _username [32]byte) ([32]byte, error) {
	return _Registry.Contract.Hash(&_Registry.CallOpts, _owner, _username)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32 hash)
func (_Registry *RegistryCaller) HashAddress(opts *bind.CallOpts, _owner common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hashAddress", _owner)
	return *ret0, err
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32 hash)
func (_Registry *RegistrySession) HashAddress(_owner common.Address) ([32]byte, error) {
	return _Registry.Contract.HashAddress(&_Registry.CallOpts, _owner)
}

// HashAddress is a free data retrieval call binding the contract method 0x3aa5fe59.
//
// Solidity: function hashAddress(address _owner) constant returns(bytes32 hash)
func (_Registry *RegistryCallerSession) HashAddress(_owner common.Address) ([32]byte, error) {
	return _Registry.Contract.HashAddress(&_Registry.CallOpts, _owner)
}

// HashBytes32 is a free data retrieval call binding the contract method 0x4d7e4ffd.
//
// Solidity: function hashBytes32(bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistryCaller) HashBytes32(opts *bind.CallOpts, _username [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "hashBytes32", _username)
	return *ret0, err
}

// HashBytes32 is a free data retrieval call binding the contract method 0x4d7e4ffd.
//
// Solidity: function hashBytes32(bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistrySession) HashBytes32(_username [32]byte) ([32]byte, error) {
	return _Registry.Contract.HashBytes32(&_Registry.CallOpts, _username)
}

// HashBytes32 is a free data retrieval call binding the contract method 0x4d7e4ffd.
//
// Solidity: function hashBytes32(bytes32 _username) constant returns(bytes32 hash)
func (_Registry *RegistryCallerSession) HashBytes32(_username [32]byte) ([32]byte, error) {
	return _Registry.Contract.HashBytes32(&_Registry.CallOpts, _username)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistrySession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Registry *RegistryCallerSession) IsForwarder() (bool, error) {
	return _Registry.Contract.IsForwarder(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistrySession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Registry *RegistryCallerSession) IsPetrified() (bool, error) {
	return _Registry.Contract.IsPetrified(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistrySession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Registry *RegistryCallerSession) Kernel() (common.Address, error) {
	return _Registry.Contract.Kernel(&_Registry.CallOpts)
}

// OwnerToUsername is a free data retrieval call binding the contract method 0x730ecf34.
//
// Solidity: function ownerToUsername(address ) constant returns(bytes32)
func (_Registry *RegistryCaller) OwnerToUsername(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "ownerToUsername", arg0)
	return *ret0, err
}

// OwnerToUsername is a free data retrieval call binding the contract method 0x730ecf34.
//
// Solidity: function ownerToUsername(address ) constant returns(bytes32)
func (_Registry *RegistrySession) OwnerToUsername(arg0 common.Address) ([32]byte, error) {
	return _Registry.Contract.OwnerToUsername(&_Registry.CallOpts, arg0)
}

// OwnerToUsername is a free data retrieval call binding the contract method 0x730ecf34.
//
// Solidity: function ownerToUsername(address ) constant returns(bytes32)
func (_Registry *RegistryCallerSession) OwnerToUsername(arg0 common.Address) ([32]byte, error) {
	return _Registry.Contract.OwnerToUsername(&_Registry.CallOpts, arg0)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCaller) Roots(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "roots", arg0)
	return *ret0, err
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistrySession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// Roots is a free data retrieval call binding the contract method 0xc2b40ae4.
//
// Solidity: function roots(uint256 ) constant returns(bytes32)
func (_Registry *RegistryCallerSession) Roots(arg0 *big.Int) ([32]byte, error) {
	return _Registry.Contract.Roots(&_Registry.CallOpts, arg0)
}

// UsernameToOwner is a free data retrieval call binding the contract method 0x47079892.
//
// Solidity: function usernameToOwner(bytes32 ) constant returns(address)
func (_Registry *RegistryCaller) UsernameToOwner(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "usernameToOwner", arg0)
	return *ret0, err
}

// UsernameToOwner is a free data retrieval call binding the contract method 0x47079892.
//
// Solidity: function usernameToOwner(bytes32 ) constant returns(address)
func (_Registry *RegistrySession) UsernameToOwner(arg0 [32]byte) (common.Address, error) {
	return _Registry.Contract.UsernameToOwner(&_Registry.CallOpts, arg0)
}

// UsernameToOwner is a free data retrieval call binding the contract method 0x47079892.
//
// Solidity: function usernameToOwner(bytes32 ) constant returns(address)
func (_Registry *RegistryCallerSession) UsernameToOwner(arg0 [32]byte) (common.Address, error) {
	return _Registry.Contract.UsernameToOwner(&_Registry.CallOpts, arg0)
}

// Validate is a free data retrieval call binding the contract method 0x57e93bd2.
//
// Solidity: function validate(bytes32 _root, address _owner, bytes32 _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCaller) Validate(opts *bind.CallOpts, _root [32]byte, _owner common.Address, _username [32]byte, _proof [][32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "validate", _root, _owner, _username, _proof)
	return *ret0, err
}

// Validate is a free data retrieval call binding the contract method 0x57e93bd2.
//
// Solidity: function validate(bytes32 _root, address _owner, bytes32 _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistrySession) Validate(_root [32]byte, _owner common.Address, _username [32]byte, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// Validate is a free data retrieval call binding the contract method 0x57e93bd2.
//
// Solidity: function validate(bytes32 _root, address _owner, bytes32 _username, bytes32[] _proof) constant returns(bool)
func (_Registry *RegistryCallerSession) Validate(_root [32]byte, _owner common.Address, _username [32]byte, _proof [][32]byte) (bool, error) {
	return _Registry.Contract.Validate(&_Registry.CallOpts, _root, _owner, _username, _proof)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactor) AddRoot(opts *bind.TransactOpts, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addRoot", _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistrySession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// AddRoot is a paid mutator transaction binding the contract method 0xd59e6461.
//
// Solidity: function addRoot(bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) AddRoot(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddRoot(&_Registry.TransactOpts, _root)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactor) DeregisterSelf(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deregisterSelf")
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistrySession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// DeregisterSelf is a paid mutator transaction binding the contract method 0xe17b8a29.
//
// Solidity: function deregisterSelf() returns()
func (_Registry *RegistryTransactorSession) DeregisterSelf() (*types.Transaction, error) {
	return _Registry.Contract.DeregisterSelf(&_Registry.TransactOpts)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistrySession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Registry *RegistryTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Registry.Contract.Forward(&_Registry.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0x9498bd71.
//
// Solidity: function initialize(bytes32 _root) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _root [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x9498bd71.
//
// Solidity: function initialize(bytes32 _root) returns()
func (_Registry *RegistrySession) Initialize(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _root)
}

// Initialize is a paid mutator transaction binding the contract method 0x9498bd71.
//
// Solidity: function initialize(bytes32 _root) returns()
func (_Registry *RegistryTransactorSession) Initialize(_root [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _root)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x2a14fb3d.
//
// Solidity: function registerSelf(bytes32 _root, bytes32 _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactor) RegisterSelf(opts *bind.TransactOpts, _root [32]byte, _username [32]byte, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerSelf", _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x2a14fb3d.
//
// Solidity: function registerSelf(bytes32 _root, bytes32 _username, bytes32[] _proof) returns()
func (_Registry *RegistrySession) RegisterSelf(_root [32]byte, _username [32]byte, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// RegisterSelf is a paid mutator transaction binding the contract method 0x2a14fb3d.
//
// Solidity: function registerSelf(bytes32 _root, bytes32 _username, bytes32[] _proof) returns()
func (_Registry *RegistryTransactorSession) RegisterSelf(_root [32]byte, _username [32]byte, _proof [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterSelf(&_Registry.TransactOpts, _root, _username, _proof)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistrySession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Registry *RegistryTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferToVault(&_Registry.TransactOpts, _token)
}

// RegistryDeregisteredIterator is returned from FilterDeregistered and is used to iterate over the raw logs and unpacked data for Deregistered events raised by the Registry contract.
type RegistryDeregisteredIterator struct {
	Event *RegistryDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryDeregistered represents a Deregistered event raised by the Registry contract.
type RegistryDeregistered struct {
	Owner    common.Address
	Username [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeregistered is a free log retrieval operation binding the contract event 0xcc0d8d49cb9a5a3eebc1e1f0b607b8aad83fbe9618e448df79b8a0cc33319472.
//
// Solidity: event Deregistered(address indexed owner, bytes32 indexed username)
func (_Registry *RegistryFilterer) FilterDeregistered(opts *bind.FilterOpts, owner []common.Address, username [][32]byte) (*RegistryDeregisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Deregistered", ownerRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryDeregisteredIterator{contract: _Registry.contract, event: "Deregistered", logs: logs, sub: sub}, nil
}

// WatchDeregistered is a free log subscription operation binding the contract event 0xcc0d8d49cb9a5a3eebc1e1f0b607b8aad83fbe9618e448df79b8a0cc33319472.
//
// Solidity: event Deregistered(address indexed owner, bytes32 indexed username)
func (_Registry *RegistryFilterer) WatchDeregistered(opts *bind.WatchOpts, sink chan<- *RegistryDeregistered, owner []common.Address, username [][32]byte) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Deregistered", ownerRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryDeregistered)
				if err := _Registry.contract.UnpackLog(event, "Deregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Registry contract.
type RegistryRegisteredIterator struct {
	Event *RegistryRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistered represents a Registered event raised by the Registry contract.
type RegistryRegistered struct {
	Owner    common.Address
	Username [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb8142d42f05d95abf0a6570799774d59276e49ea32a04d9a4ec316ea4a6886bc.
//
// Solidity: event Registered(address indexed owner, bytes32 indexed username)
func (_Registry *RegistryFilterer) FilterRegistered(opts *bind.FilterOpts, owner []common.Address, username [][32]byte) (*RegistryRegisteredIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Registered", ownerRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredIterator{contract: _Registry.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb8142d42f05d95abf0a6570799774d59276e49ea32a04d9a4ec316ea4a6886bc.
//
// Solidity: event Registered(address indexed owner, bytes32 indexed username)
func (_Registry *RegistryFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *RegistryRegistered, owner []common.Address, username [][32]byte) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Registered", ownerRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistered)
				if err := _Registry.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRegistrationPeriodStartedIterator is returned from FilterRegistrationPeriodStarted and is used to iterate over the raw logs and unpacked data for RegistrationPeriodStarted events raised by the Registry contract.
type RegistryRegistrationPeriodStartedIterator struct {
	Event *RegistryRegistrationPeriodStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegistrationPeriodStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegistrationPeriodStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegistrationPeriodStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegistrationPeriodStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegistrationPeriodStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegistrationPeriodStarted represents a RegistrationPeriodStarted event raised by the Registry contract.
type RegistryRegistrationPeriodStarted struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRegistrationPeriodStarted is a free log retrieval operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) FilterRegistrationPeriodStarted(opts *bind.FilterOpts) (*RegistryRegistrationPeriodStartedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return &RegistryRegistrationPeriodStartedIterator{contract: _Registry.contract, event: "RegistrationPeriodStarted", logs: logs, sub: sub}, nil
}

// WatchRegistrationPeriodStarted is a free log subscription operation binding the contract event 0x5ab9660809ffb7690c0fd8f851478bf82d3a35d172540148cd5e729275decba3.
//
// Solidity: event RegistrationPeriodStarted(bytes32 root)
func (_Registry *RegistryFilterer) WatchRegistrationPeriodStarted(opts *bind.WatchOpts, sink chan<- *RegistryRegistrationPeriodStarted) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegistrationPeriodStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegistrationPeriodStarted)
				if err := _Registry.contract.UnpackLog(event, "RegistrationPeriodStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Registry contract.
type RegistryScriptResultIterator struct {
	Event *RegistryScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryScriptResult represents a ScriptResult event raised by the Registry contract.
type RegistryScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*RegistryScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &RegistryScriptResultIterator{contract: _Registry.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Registry *RegistryFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *RegistryScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryScriptResult)
				if err := _Registry.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
