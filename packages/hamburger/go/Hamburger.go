// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package hamburger

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HamburgerABI is the input ABI used to generate the binding from.
const HamburgerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sha3HexAddress\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMONS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nameOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"nameNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"ownerOfName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PURCHASE_ASSET_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_onlyIfSelfOwned\",\"type\":\"bool\"}],\"name\":\"credit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasSurplusBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"taxDue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"requireReg\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tax\",\"type\":\"uint8\"},{\"name\":\"lastPaymentDate\",\"type\":\"uint64\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tax\",\"type\":\"uint8\"}],\"name\":\"setTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_tax\",\"type\":\"uint8\"},{\"name\":\"requireReg\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"Data\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tax\",\"type\":\"uint8\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// HamburgerBin is the compiled bytecode used for deploying new contracts.
const HamburgerBin = ``

// DeployHamburger deploys a new Ethereum contract, binding an instance of Hamburger to it.
func DeployHamburger(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Hamburger, error) {
	parsed, err := abi.JSON(strings.NewReader(HamburgerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HamburgerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Hamburger{HamburgerCaller: HamburgerCaller{contract: contract}, HamburgerTransactor: HamburgerTransactor{contract: contract}, HamburgerFilterer: HamburgerFilterer{contract: contract}}, nil
}

// Hamburger is an auto generated Go binding around an Ethereum contract.
type Hamburger struct {
	HamburgerCaller     // Read-only binding to the contract
	HamburgerTransactor // Write-only binding to the contract
	HamburgerFilterer   // Log filterer for contract events
}

// HamburgerCaller is an auto generated read-only Go binding around an Ethereum contract.
type HamburgerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HamburgerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HamburgerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HamburgerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HamburgerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HamburgerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HamburgerSession struct {
	Contract     *Hamburger        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HamburgerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HamburgerCallerSession struct {
	Contract *HamburgerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// HamburgerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HamburgerTransactorSession struct {
	Contract     *HamburgerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// HamburgerRaw is an auto generated low-level Go binding around an Ethereum contract.
type HamburgerRaw struct {
	Contract *Hamburger // Generic contract binding to access the raw methods on
}

// HamburgerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HamburgerCallerRaw struct {
	Contract *HamburgerCaller // Generic read-only contract binding to access the raw methods on
}

// HamburgerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HamburgerTransactorRaw struct {
	Contract *HamburgerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHamburger creates a new instance of Hamburger, bound to a specific deployed contract.
func NewHamburger(address common.Address, backend bind.ContractBackend) (*Hamburger, error) {
	contract, err := bindHamburger(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Hamburger{HamburgerCaller: HamburgerCaller{contract: contract}, HamburgerTransactor: HamburgerTransactor{contract: contract}, HamburgerFilterer: HamburgerFilterer{contract: contract}}, nil
}

// NewHamburgerCaller creates a new read-only instance of Hamburger, bound to a specific deployed contract.
func NewHamburgerCaller(address common.Address, caller bind.ContractCaller) (*HamburgerCaller, error) {
	contract, err := bindHamburger(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HamburgerCaller{contract: contract}, nil
}

// NewHamburgerTransactor creates a new write-only instance of Hamburger, bound to a specific deployed contract.
func NewHamburgerTransactor(address common.Address, transactor bind.ContractTransactor) (*HamburgerTransactor, error) {
	contract, err := bindHamburger(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HamburgerTransactor{contract: contract}, nil
}

// NewHamburgerFilterer creates a new log filterer instance of Hamburger, bound to a specific deployed contract.
func NewHamburgerFilterer(address common.Address, filterer bind.ContractFilterer) (*HamburgerFilterer, error) {
	contract, err := bindHamburger(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HamburgerFilterer{contract: contract}, nil
}

// bindHamburger binds a generic wrapper to an already deployed contract.
func bindHamburger(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HamburgerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Hamburger *HamburgerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Hamburger.Contract.HamburgerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Hamburger *HamburgerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Hamburger.Contract.HamburgerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Hamburger *HamburgerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Hamburger.Contract.HamburgerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Hamburger *HamburgerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Hamburger.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Hamburger *HamburgerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Hamburger.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Hamburger *HamburgerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Hamburger.Contract.contract.Transact(opts, method, params...)
}

// COMMONSROLE is a free data retrieval call binding the contract method 0x2f4dff99.
//
// Solidity: function COMMONS_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerCaller) COMMONSROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "COMMONS_ROLE")
	return *ret0, err
}

// COMMONSROLE is a free data retrieval call binding the contract method 0x2f4dff99.
//
// Solidity: function COMMONS_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerSession) COMMONSROLE() ([32]byte, error) {
	return _Hamburger.Contract.COMMONSROLE(&_Hamburger.CallOpts)
}

// COMMONSROLE is a free data retrieval call binding the contract method 0x2f4dff99.
//
// Solidity: function COMMONS_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerCallerSession) COMMONSROLE() ([32]byte, error) {
	return _Hamburger.Contract.COMMONSROLE(&_Hamburger.CallOpts)
}

// PURCHASEASSETROLE is a free data retrieval call binding the contract method 0x8cb25283.
//
// Solidity: function PURCHASE_ASSET_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerCaller) PURCHASEASSETROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "PURCHASE_ASSET_ROLE")
	return *ret0, err
}

// PURCHASEASSETROLE is a free data retrieval call binding the contract method 0x8cb25283.
//
// Solidity: function PURCHASE_ASSET_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerSession) PURCHASEASSETROLE() ([32]byte, error) {
	return _Hamburger.Contract.PURCHASEASSETROLE(&_Hamburger.CallOpts)
}

// PURCHASEASSETROLE is a free data retrieval call binding the contract method 0x8cb25283.
//
// Solidity: function PURCHASE_ASSET_ROLE() constant returns(bytes32)
func (_Hamburger *HamburgerCallerSession) PURCHASEASSETROLE() ([32]byte, error) {
	return _Hamburger.Contract.PURCHASEASSETROLE(&_Hamburger.CallOpts)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Hamburger *HamburgerCaller) AddrNode(opts *bind.CallOpts, _addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "addrNode", _addr)
	return *ret0, err
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Hamburger *HamburgerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Hamburger.Contract.AddrNode(&_Hamburger.CallOpts, _addr)
}

// AddrNode is a free data retrieval call binding the contract method 0xd9f2b5f9.
//
// Solidity: function addrNode(address _addr) constant returns(bytes32)
func (_Hamburger *HamburgerCallerSession) AddrNode(_addr common.Address) ([32]byte, error) {
	return _Hamburger.Contract.AddrNode(&_Hamburger.CallOpts, _addr)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Hamburger *HamburgerCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Hamburger *HamburgerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Hamburger.Contract.AllowRecoverability(&_Hamburger.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Hamburger *HamburgerCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Hamburger.Contract.AllowRecoverability(&_Hamburger.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Hamburger *HamburgerCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Hamburger *HamburgerSession) AppId() ([32]byte, error) {
	return _Hamburger.Contract.AppId(&_Hamburger.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Hamburger *HamburgerCallerSession) AppId() ([32]byte, error) {
	return _Hamburger.Contract.AppId(&_Hamburger.CallOpts)
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, bool requireReg, address owner, uint8 tax, uint64 lastPaymentDate, uint256 price, uint256 balance, string name, string data)
func (_Hamburger *HamburgerCaller) Assets(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Active          bool
	RequireReg      bool
	Owner           common.Address
	Tax             uint8
	LastPaymentDate uint64
	Price           *big.Int
	Balance         *big.Int
	Name            string
	Data            string
}, error) {
	ret := new(struct {
		Active          bool
		RequireReg      bool
		Owner           common.Address
		Tax             uint8
		LastPaymentDate uint64
		Price           *big.Int
		Balance         *big.Int
		Name            string
		Data            string
	})
	out := ret
	err := _Hamburger.contract.Call(opts, out, "assets", arg0)
	return *ret, err
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, bool requireReg, address owner, uint8 tax, uint64 lastPaymentDate, uint256 price, uint256 balance, string name, string data)
func (_Hamburger *HamburgerSession) Assets(arg0 *big.Int) (struct {
	Active          bool
	RequireReg      bool
	Owner           common.Address
	Tax             uint8
	LastPaymentDate uint64
	Price           *big.Int
	Balance         *big.Int
	Name            string
	Data            string
}, error) {
	return _Hamburger.Contract.Assets(&_Hamburger.CallOpts, arg0)
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, bool requireReg, address owner, uint8 tax, uint64 lastPaymentDate, uint256 price, uint256 balance, string name, string data)
func (_Hamburger *HamburgerCallerSession) Assets(arg0 *big.Int) (struct {
	Active          bool
	RequireReg      bool
	Owner           common.Address
	Tax             uint8
	LastPaymentDate uint64
	Price           *big.Int
	Balance         *big.Int
	Name            string
	Data            string
}, error) {
	return _Hamburger.Contract.Assets(&_Hamburger.CallOpts, arg0)
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Hamburger *HamburgerCaller) AssetsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "assetsCount")
	return *ret0, err
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Hamburger *HamburgerSession) AssetsCount() (*big.Int, error) {
	return _Hamburger.Contract.AssetsCount(&_Hamburger.CallOpts)
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Hamburger *HamburgerCallerSession) AssetsCount() (*big.Int, error) {
	return _Hamburger.Contract.AssetsCount(&_Hamburger.CallOpts)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Hamburger *HamburgerCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Hamburger *HamburgerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Hamburger.Contract.CanPerform(&_Hamburger.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Hamburger *HamburgerCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Hamburger.Contract.CanPerform(&_Hamburger.CallOpts, _sender, _role, _params)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Hamburger *HamburgerCaller) Currency(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "currency")
	return *ret0, err
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Hamburger *HamburgerSession) Currency() (common.Address, error) {
	return _Hamburger.Contract.Currency(&_Hamburger.CallOpts)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Hamburger *HamburgerCallerSession) Currency() (common.Address, error) {
	return _Hamburger.Contract.Currency(&_Hamburger.CallOpts)
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Hamburger *HamburgerCaller) CurrencyManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "currencyManager")
	return *ret0, err
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Hamburger *HamburgerSession) CurrencyManager() (common.Address, error) {
	return _Hamburger.Contract.CurrencyManager(&_Hamburger.CallOpts)
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Hamburger *HamburgerCallerSession) CurrencyManager() (common.Address, error) {
	return _Hamburger.Contract.CurrencyManager(&_Hamburger.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Hamburger *HamburgerCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Hamburger *HamburgerSession) Ens() (common.Address, error) {
	return _Hamburger.Contract.Ens(&_Hamburger.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_Hamburger *HamburgerCallerSession) Ens() (common.Address, error) {
	return _Hamburger.Contract.Ens(&_Hamburger.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Hamburger *HamburgerCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Hamburger *HamburgerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Hamburger.Contract.GetEVMScriptExecutor(&_Hamburger.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Hamburger *HamburgerCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Hamburger.Contract.GetEVMScriptExecutor(&_Hamburger.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Hamburger *HamburgerCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Hamburger *HamburgerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Hamburger.Contract.GetEVMScriptRegistry(&_Hamburger.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Hamburger *HamburgerCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Hamburger.Contract.GetEVMScriptRegistry(&_Hamburger.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Hamburger *HamburgerCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Hamburger *HamburgerSession) GetInitializationBlock() (*big.Int, error) {
	return _Hamburger.Contract.GetInitializationBlock(&_Hamburger.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Hamburger *HamburgerCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Hamburger.Contract.GetInitializationBlock(&_Hamburger.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Hamburger *HamburgerCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Hamburger *HamburgerSession) GetRecoveryVault() (common.Address, error) {
	return _Hamburger.Contract.GetRecoveryVault(&_Hamburger.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Hamburger *HamburgerCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Hamburger.Contract.GetRecoveryVault(&_Hamburger.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Hamburger *HamburgerCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Hamburger *HamburgerSession) HasInitialized() (bool, error) {
	return _Hamburger.Contract.HasInitialized(&_Hamburger.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Hamburger *HamburgerCallerSession) HasInitialized() (bool, error) {
	return _Hamburger.Contract.HasInitialized(&_Hamburger.CallOpts)
}

// HasSurplusBalance is a free data retrieval call binding the contract method 0x9ed9020c.
//
// Solidity: function hasSurplusBalance(uint256 _tokenId) constant returns(bool)
func (_Hamburger *HamburgerCaller) HasSurplusBalance(opts *bind.CallOpts, _tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "hasSurplusBalance", _tokenId)
	return *ret0, err
}

// HasSurplusBalance is a free data retrieval call binding the contract method 0x9ed9020c.
//
// Solidity: function hasSurplusBalance(uint256 _tokenId) constant returns(bool)
func (_Hamburger *HamburgerSession) HasSurplusBalance(_tokenId *big.Int) (bool, error) {
	return _Hamburger.Contract.HasSurplusBalance(&_Hamburger.CallOpts, _tokenId)
}

// HasSurplusBalance is a free data retrieval call binding the contract method 0x9ed9020c.
//
// Solidity: function hasSurplusBalance(uint256 _tokenId) constant returns(bool)
func (_Hamburger *HamburgerCallerSession) HasSurplusBalance(_tokenId *big.Int) (bool, error) {
	return _Hamburger.Contract.HasSurplusBalance(&_Hamburger.CallOpts, _tokenId)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Hamburger *HamburgerCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Hamburger *HamburgerSession) IsPetrified() (bool, error) {
	return _Hamburger.Contract.IsPetrified(&_Hamburger.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Hamburger *HamburgerCallerSession) IsPetrified() (bool, error) {
	return _Hamburger.Contract.IsPetrified(&_Hamburger.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Hamburger *HamburgerCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Hamburger *HamburgerSession) Kernel() (common.Address, error) {
	return _Hamburger.Contract.Kernel(&_Hamburger.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Hamburger *HamburgerCallerSession) Kernel() (common.Address, error) {
	return _Hamburger.Contract.Kernel(&_Hamburger.CallOpts)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Hamburger *HamburgerCaller) NameNode(opts *bind.CallOpts, _username string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "nameNode", _username)
	return *ret0, err
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Hamburger *HamburgerSession) NameNode(_username string) ([32]byte, error) {
	return _Hamburger.Contract.NameNode(&_Hamburger.CallOpts, _username)
}

// NameNode is a free data retrieval call binding the contract method 0x7cdd5edb.
//
// Solidity: function nameNode(string _username) constant returns(bytes32)
func (_Hamburger *HamburgerCallerSession) NameNode(_username string) ([32]byte, error) {
	return _Hamburger.Contract.NameNode(&_Hamburger.CallOpts, _username)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Hamburger *HamburgerCaller) NameOfOwner(opts *bind.CallOpts, _owner common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "nameOfOwner", _owner)
	return *ret0, err
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Hamburger *HamburgerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Hamburger.Contract.NameOfOwner(&_Hamburger.CallOpts, _owner)
}

// NameOfOwner is a free data retrieval call binding the contract method 0x7cb7acf7.
//
// Solidity: function nameOfOwner(address _owner) constant returns(string)
func (_Hamburger *HamburgerCallerSession) NameOfOwner(_owner common.Address) (string, error) {
	return _Hamburger.Contract.NameOfOwner(&_Hamburger.CallOpts, _owner)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Hamburger *HamburgerCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Hamburger *HamburgerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Hamburger.Contract.OwnerOf(&_Hamburger.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Hamburger *HamburgerCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Hamburger.Contract.OwnerOf(&_Hamburger.CallOpts, _tokenId)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Hamburger *HamburgerCaller) OwnerOfName(opts *bind.CallOpts, _username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "ownerOfName", _username)
	return *ret0, err
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Hamburger *HamburgerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Hamburger.Contract.OwnerOfName(&_Hamburger.CallOpts, _username)
}

// OwnerOfName is a free data retrieval call binding the contract method 0x7f873749.
//
// Solidity: function ownerOfName(string _username) constant returns(address)
func (_Hamburger *HamburgerCallerSession) OwnerOfName(_username string) (common.Address, error) {
	return _Hamburger.Contract.OwnerOfName(&_Hamburger.CallOpts, _username)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Hamburger *HamburgerCaller) Resolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "resolver")
	return *ret0, err
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Hamburger *HamburgerSession) Resolver() (common.Address, error) {
	return _Hamburger.Contract.Resolver(&_Hamburger.CallOpts)
}

// Resolver is a free data retrieval call binding the contract method 0x04f3bcec.
//
// Solidity: function resolver() constant returns(address)
func (_Hamburger *HamburgerCallerSession) Resolver() (common.Address, error) {
	return _Hamburger.Contract.Resolver(&_Hamburger.CallOpts)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Hamburger *HamburgerCaller) Sha3HexAddress(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "sha3HexAddress", addr)
	return *ret0, err
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Hamburger *HamburgerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Hamburger.Contract.Sha3HexAddress(&_Hamburger.CallOpts, addr)
}

// Sha3HexAddress is a free data retrieval call binding the contract method 0x27b752b8.
//
// Solidity: function sha3HexAddress(address addr) constant returns(bytes32 ret)
func (_Hamburger *HamburgerCallerSession) Sha3HexAddress(addr common.Address) ([32]byte, error) {
	return _Hamburger.Contract.Sha3HexAddress(&_Hamburger.CallOpts, addr)
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Hamburger *HamburgerCaller) TaxDue(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Hamburger.contract.Call(opts, out, "taxDue", _tokenId)
	return *ret0, err
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Hamburger *HamburgerSession) TaxDue(_tokenId *big.Int) (*big.Int, error) {
	return _Hamburger.Contract.TaxDue(&_Hamburger.CallOpts, _tokenId)
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Hamburger *HamburgerCallerSession) TaxDue(_tokenId *big.Int) (*big.Int, error) {
	return _Hamburger.Contract.TaxDue(&_Hamburger.CallOpts, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactor) Burn(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "burn", _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Hamburger *HamburgerSession) Burn(_tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Burn(&_Hamburger.TransactOpts, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactorSession) Burn(_tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Burn(&_Hamburger.TransactOpts, _tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _data, uint256 _credit) returns()
func (_Hamburger *HamburgerTransactor) Buy(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int, _data string, _credit *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "buy", _tokenId, _price, _data, _credit)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _data, uint256 _credit) returns()
func (_Hamburger *HamburgerSession) Buy(_tokenId *big.Int, _price *big.Int, _data string, _credit *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Buy(&_Hamburger.TransactOpts, _tokenId, _price, _data, _credit)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _data, uint256 _credit) returns()
func (_Hamburger *HamburgerTransactorSession) Buy(_tokenId *big.Int, _price *big.Int, _data string, _credit *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Buy(&_Hamburger.TransactOpts, _tokenId, _price, _data, _credit)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Hamburger *HamburgerTransactor) Credit(opts *bind.TransactOpts, _tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "credit", _tokenId, _amount, _onlyIfSelfOwned)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Hamburger *HamburgerSession) Credit(_tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Hamburger.Contract.Credit(&_Hamburger.TransactOpts, _tokenId, _amount, _onlyIfSelfOwned)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Hamburger *HamburgerTransactorSession) Credit(_tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Hamburger.Contract.Credit(&_Hamburger.TransactOpts, _tokenId, _amount, _onlyIfSelfOwned)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Hamburger *HamburgerTransactor) Debit(opts *bind.TransactOpts, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "debit", _tokenId, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Hamburger *HamburgerSession) Debit(_tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Debit(&_Hamburger.TransactOpts, _tokenId, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Hamburger *HamburgerTransactorSession) Debit(_tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.Debit(&_Hamburger.TransactOpts, _tokenId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currencyManager) returns()
func (_Hamburger *HamburgerTransactor) Initialize(opts *bind.TransactOpts, _ens common.Address, _currencyManager common.Address) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "initialize", _ens, _currencyManager)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currencyManager) returns()
func (_Hamburger *HamburgerSession) Initialize(_ens common.Address, _currencyManager common.Address) (*types.Transaction, error) {
	return _Hamburger.Contract.Initialize(&_Hamburger.TransactOpts, _ens, _currencyManager)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _ens, address _currencyManager) returns()
func (_Hamburger *HamburgerTransactorSession) Initialize(_ens common.Address, _currencyManager common.Address) (*types.Transaction, error) {
	return _Hamburger.Contract.Initialize(&_Hamburger.TransactOpts, _ens, _currencyManager)
}

// Mint is a paid mutator transaction binding the contract method 0xfa085ee3.
//
// Solidity: function mint(string _name, uint8 _tax, bool requireReg) returns()
func (_Hamburger *HamburgerTransactor) Mint(opts *bind.TransactOpts, _name string, _tax uint8, requireReg bool) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "mint", _name, _tax, requireReg)
}

// Mint is a paid mutator transaction binding the contract method 0xfa085ee3.
//
// Solidity: function mint(string _name, uint8 _tax, bool requireReg) returns()
func (_Hamburger *HamburgerSession) Mint(_name string, _tax uint8, requireReg bool) (*types.Transaction, error) {
	return _Hamburger.Contract.Mint(&_Hamburger.TransactOpts, _name, _tax, requireReg)
}

// Mint is a paid mutator transaction binding the contract method 0xfa085ee3.
//
// Solidity: function mint(string _name, uint8 _tax, bool requireReg) returns()
func (_Hamburger *HamburgerTransactorSession) Mint(_name string, _tax uint8, requireReg bool) (*types.Transaction, error) {
	return _Hamburger.Contract.Mint(&_Hamburger.TransactOpts, _name, _tax, requireReg)
}

// PayTax is a paid mutator transaction binding the contract method 0xa05aaf50.
//
// Solidity: function payTax(uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactor) PayTax(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "payTax", _tokenId)
}

// PayTax is a paid mutator transaction binding the contract method 0xa05aaf50.
//
// Solidity: function payTax(uint256 _tokenId) returns()
func (_Hamburger *HamburgerSession) PayTax(_tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.PayTax(&_Hamburger.TransactOpts, _tokenId)
}

// PayTax is a paid mutator transaction binding the contract method 0xa05aaf50.
//
// Solidity: function payTax(uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactorSession) PayTax(_tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.PayTax(&_Hamburger.TransactOpts, _tokenId)
}

// SetData is a paid mutator transaction binding the contract method 0x18562dae.
//
// Solidity: function setData(uint256 _tokenId, string _data) returns()
func (_Hamburger *HamburgerTransactor) SetData(opts *bind.TransactOpts, _tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "setData", _tokenId, _data)
}

// SetData is a paid mutator transaction binding the contract method 0x18562dae.
//
// Solidity: function setData(uint256 _tokenId, string _data) returns()
func (_Hamburger *HamburgerSession) SetData(_tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _Hamburger.Contract.SetData(&_Hamburger.TransactOpts, _tokenId, _data)
}

// SetData is a paid mutator transaction binding the contract method 0x18562dae.
//
// Solidity: function setData(uint256 _tokenId, string _data) returns()
func (_Hamburger *HamburgerTransactorSession) SetData(_tokenId *big.Int, _data string) (*types.Transaction, error) {
	return _Hamburger.Contract.SetData(&_Hamburger.TransactOpts, _tokenId, _data)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Hamburger *HamburgerTransactor) SetPrice(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "setPrice", _tokenId, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Hamburger *HamburgerSession) SetPrice(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.SetPrice(&_Hamburger.TransactOpts, _tokenId, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Hamburger *HamburgerTransactorSession) SetPrice(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.SetPrice(&_Hamburger.TransactOpts, _tokenId, _price)
}

// SetTax is a paid mutator transaction binding the contract method 0xe9b34e1e.
//
// Solidity: function setTax(uint256 _tokenId, uint8 _tax) returns()
func (_Hamburger *HamburgerTransactor) SetTax(opts *bind.TransactOpts, _tokenId *big.Int, _tax uint8) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "setTax", _tokenId, _tax)
}

// SetTax is a paid mutator transaction binding the contract method 0xe9b34e1e.
//
// Solidity: function setTax(uint256 _tokenId, uint8 _tax) returns()
func (_Hamburger *HamburgerSession) SetTax(_tokenId *big.Int, _tax uint8) (*types.Transaction, error) {
	return _Hamburger.Contract.SetTax(&_Hamburger.TransactOpts, _tokenId, _tax)
}

// SetTax is a paid mutator transaction binding the contract method 0xe9b34e1e.
//
// Solidity: function setTax(uint256 _tokenId, uint8 _tax) returns()
func (_Hamburger *HamburgerTransactorSession) SetTax(_tokenId *big.Int, _tax uint8) (*types.Transaction, error) {
	return _Hamburger.Contract.SetTax(&_Hamburger.TransactOpts, _tokenId, _tax)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_Hamburger *HamburgerSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.TransferFrom(&_Hamburger.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_Hamburger *HamburgerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Hamburger.Contract.TransferFrom(&_Hamburger.TransactOpts, _from, _to, _tokenId)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Hamburger *HamburgerTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Hamburger.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Hamburger *HamburgerSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Hamburger.Contract.TransferToVault(&_Hamburger.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Hamburger *HamburgerTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Hamburger.Contract.TransferToVault(&_Hamburger.TransactOpts, _token)
}

// HamburgerBalanceIterator is returned from FilterBalance and is used to iterate over the raw logs and unpacked data for Balance events raised by the Hamburger contract.
type HamburgerBalanceIterator struct {
	Event *HamburgerBalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerBalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerBalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerBalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerBalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerBalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerBalance represents a Balance event raised by the Hamburger contract.
type HamburgerBalance struct {
	TokenId *big.Int
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBalance is a free log retrieval operation binding the contract event 0x740f7e210cf19d27b8ab2cec1ebb61687bdc5f38f8bd56f0c8e5d22ed71854db.
//
// Solidity: event Balance(uint256 indexed _tokenId, uint256 _balance)
func (_Hamburger *HamburgerFilterer) FilterBalance(opts *bind.FilterOpts, _tokenId []*big.Int) (*HamburgerBalanceIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "Balance", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerBalanceIterator{contract: _Hamburger.contract, event: "Balance", logs: logs, sub: sub}, nil
}

// WatchBalance is a free log subscription operation binding the contract event 0x740f7e210cf19d27b8ab2cec1ebb61687bdc5f38f8bd56f0c8e5d22ed71854db.
//
// Solidity: event Balance(uint256 indexed _tokenId, uint256 _balance)
func (_Hamburger *HamburgerFilterer) WatchBalance(opts *bind.WatchOpts, sink chan<- *HamburgerBalance, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "Balance", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerBalance)
				if err := _Hamburger.contract.UnpackLog(event, "Balance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerDataIterator is returned from FilterData and is used to iterate over the raw logs and unpacked data for Data events raised by the Hamburger contract.
type HamburgerDataIterator struct {
	Event *HamburgerData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerData represents a Data event raised by the Hamburger contract.
type HamburgerData struct {
	TokenId *big.Int
	Data    string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterData is a free log retrieval operation binding the contract event 0xe15782e942419ae2c56a2762c7694c0baa10a9dd3a34f5233623ccec5a47b729.
//
// Solidity: event Data(uint256 indexed _tokenId, string _data)
func (_Hamburger *HamburgerFilterer) FilterData(opts *bind.FilterOpts, _tokenId []*big.Int) (*HamburgerDataIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "Data", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerDataIterator{contract: _Hamburger.contract, event: "Data", logs: logs, sub: sub}, nil
}

// WatchData is a free log subscription operation binding the contract event 0xe15782e942419ae2c56a2762c7694c0baa10a9dd3a34f5233623ccec5a47b729.
//
// Solidity: event Data(uint256 indexed _tokenId, string _data)
func (_Hamburger *HamburgerFilterer) WatchData(opts *bind.WatchOpts, sink chan<- *HamburgerData, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "Data", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerData)
				if err := _Hamburger.contract.UnpackLog(event, "Data", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerPriceIterator is returned from FilterPrice and is used to iterate over the raw logs and unpacked data for Price events raised by the Hamburger contract.
type HamburgerPriceIterator struct {
	Event *HamburgerPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerPrice represents a Price event raised by the Hamburger contract.
type HamburgerPrice struct {
	TokenId *big.Int
	Price   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPrice is a free log retrieval operation binding the contract event 0xd1353c68e79ef70de84ee90d2facf845ec24895116d4a03505aa41785af71f5a.
//
// Solidity: event Price(uint256 indexed _tokenId, uint256 _price)
func (_Hamburger *HamburgerFilterer) FilterPrice(opts *bind.FilterOpts, _tokenId []*big.Int) (*HamburgerPriceIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "Price", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerPriceIterator{contract: _Hamburger.contract, event: "Price", logs: logs, sub: sub}, nil
}

// WatchPrice is a free log subscription operation binding the contract event 0xd1353c68e79ef70de84ee90d2facf845ec24895116d4a03505aa41785af71f5a.
//
// Solidity: event Price(uint256 indexed _tokenId, uint256 _price)
func (_Hamburger *HamburgerFilterer) WatchPrice(opts *bind.WatchOpts, sink chan<- *HamburgerPrice, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "Price", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerPrice)
				if err := _Hamburger.contract.UnpackLog(event, "Price", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Hamburger contract.
type HamburgerRecoverToVaultIterator struct {
	Event *HamburgerRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerRecoverToVault represents a RecoverToVault event raised by the Hamburger contract.
type HamburgerRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Hamburger *HamburgerFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*HamburgerRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerRecoverToVaultIterator{contract: _Hamburger.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Hamburger *HamburgerFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *HamburgerRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerRecoverToVault)
				if err := _Hamburger.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Hamburger contract.
type HamburgerScriptResultIterator struct {
	Event *HamburgerScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerScriptResult represents a ScriptResult event raised by the Hamburger contract.
type HamburgerScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Hamburger *HamburgerFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*HamburgerScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerScriptResultIterator{contract: _Hamburger.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Hamburger *HamburgerFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *HamburgerScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerScriptResult)
				if err := _Hamburger.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerTaxIterator is returned from FilterTax and is used to iterate over the raw logs and unpacked data for Tax events raised by the Hamburger contract.
type HamburgerTaxIterator struct {
	Event *HamburgerTax // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerTaxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerTax)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerTax)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerTaxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerTaxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerTax represents a Tax event raised by the Hamburger contract.
type HamburgerTax struct {
	TokenId *big.Int
	Tax     uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTax is a free log retrieval operation binding the contract event 0xdd59bffb074f8534d0486f2f3af89aff99697f617110441d49e2f992b5b7c195.
//
// Solidity: event Tax(uint256 indexed _tokenId, uint8 _tax)
func (_Hamburger *HamburgerFilterer) FilterTax(opts *bind.FilterOpts, _tokenId []*big.Int) (*HamburgerTaxIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "Tax", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerTaxIterator{contract: _Hamburger.contract, event: "Tax", logs: logs, sub: sub}, nil
}

// WatchTax is a free log subscription operation binding the contract event 0xdd59bffb074f8534d0486f2f3af89aff99697f617110441d49e2f992b5b7c195.
//
// Solidity: event Tax(uint256 indexed _tokenId, uint8 _tax)
func (_Hamburger *HamburgerFilterer) WatchTax(opts *bind.WatchOpts, sink chan<- *HamburgerTax, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "Tax", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerTax)
				if err := _Hamburger.contract.UnpackLog(event, "Tax", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HamburgerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Hamburger contract.
type HamburgerTransferIterator struct {
	Event *HamburgerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HamburgerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HamburgerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HamburgerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HamburgerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HamburgerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HamburgerTransfer represents a Transfer event raised by the Hamburger contract.
type HamburgerTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Hamburger *HamburgerFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*HamburgerTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HamburgerTransferIterator{contract: _Hamburger.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Hamburger *HamburgerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *HamburgerTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Hamburger.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HamburgerTransfer)
				if err := _Hamburger.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
